<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>System.Reactive.Interfaces</name>
    </assembly>
    <members>
        <member name="T:System.Reactive.NamespaceDoc">
            <summary><b>System.Reactive</b> 命名空间包含在整个 Reactive Extensions 库中使用的接口和类。</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.NamespaceDoc">
            <summary><b>System.Reactive.Concurrency</b> 命名空间包含接口和类，这些接口和类提供 Reactive Extensions 用于构造和处理事件流的计划程序基础结构。计划程序用于参数化查询运算符引入的并发，提供虚拟化时间，处理历史数据以及为使用 Reactive Extensions 构造构建的功能写入单元测试的方法。</summary>
        </member>
        <member name="T:System.Reactive.Disposables.NamespaceDoc">
            <summary><b>System.Reactive.Disposables</b> 命名空间包含接口和类，这些接口和类提供用于处理 Reactive Extensions 中的资源和订阅管理的组合构造集。这些类型在 Reactive Extensions 的实现中广泛使用，并且在编写自定义查询运算符或计划程序时非常有用。</summary>
        </member>
        <member name="T:System.Reactive.Linq.NamespaceDoc">
            <summary><b>System.Reactive.Linq</b> 命名空间包含接口和类，这些接口和类使用语言集成查询 (LINQ) 持在可观察序列上表达查询。查询运算符可用作分别在 bservable 和 Qbservable 上定义的 IObservable&lt;T&gt; 和 IQbservable&lt;T&gt; 的扩展方法。</summary>
        </member>
        <member name="T:System.Reactive.Subjects.NamespaceDoc">
            <summary><b>System.Reactive.Subjects</b> 命名空间包含表示主题的接口和类，它们是实现 IObservable&lt;T&gt; 和 IObserver&lt;T&gt; 的对象。主题通常用作事件源，允许一方引发事件并允许另一方在事件流上写入查询。由于它们能够具有多个注册的观察程序，因此主题也被用作为查询中的事件流提供多播行为的工具。</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.ISchedulerPeriodic">
            <summary>计划程序，支持运行定期任务。这种类型的计划程序可用于更有效地运行计时器，而不是使用递归调度。</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.ISchedulerPeriodic.SchedulePeriodic``1(``0,System.TimeSpan,System.Func{``0,``0})">
            <summary>计划定期工作。</summary>
            <typeparam name="TState">传递至计划操作的状态类型。</typeparam>
            <param name="state">在第一次迭代时将初始状态传递至操作。</param>
            <param name="period">定期运行工作的时间段。</param>
            <param name="action">可能更新状态的待执行的操作。</param>
            <returns>用于取消计划的反复操作的一次性对象（尽力服务）。</returns>
        </member>
        <member name="T:System.Reactive.Concurrency.IStopwatchProvider">
            <summary>IStopwatch 对象的提供者。</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.IStopwatchProvider.StartStopwatch">
            <summary>启动新的秒表对象。</summary>
            <returns>新的秒表对象;在请求时启动。</returns>
        </member>
        <member name="T:System.Reactive.Concurrency.IScheduledItem`1">
            <summary>表示已计划的工作项。</summary>
            <typeparam name="TAbsolute">绝对时间表示类型。</typeparam>
        </member>
        <member name="M:System.Reactive.Concurrency.IScheduledItem`1.Invoke">
            <summary>调用工作项。</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.IScheduledItem`1.DueTime">
            <summary>获取项目调用到期的绝对时间。</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.IScheduler">
            <summary>表示计划工作单元的对象。</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.IScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>安排要执行的操作。</summary>
            <typeparam name="TState">传递至计划操作的状态类型。</typeparam>
            <param name="state">传递给待执行操作的状态。</param>
            <param name="action">要执行的操作。</param>
            <returns>用于取消计划操作的可释放对象（尽力服务）。</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.IScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>分配在 dueTime 后执行的操作。</summary>
            <typeparam name="TState">传递至计划操作的状态类型。</typeparam>
            <param name="state">传递给待执行操作的状态。</param>
            <param name="action">要执行的操作。</param>
            <param name="dueTime">执行操作之后的相对时间。</param>
            <returns>用于取消计划操作的可释放对象（尽力服务）。</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.IScheduler.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>分配在 dueTime 时执行的操作。</summary>
            <typeparam name="TState">传递至计划操作的状态类型。</typeparam>
            <param name="state">传递给待执行操作的状态。</param>
            <param name="action">要执行的操作。</param>
            <param name="dueTime">执行操作的绝对时间。</param>
            <returns>用于取消计划操作的可释放对象（尽力服务）。</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.IScheduler.Now">
            <summary>获取计划程序的当前时间概念。</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.ISchedulerLongRunning">
            <summary>计划程序，支持启动长时间运行的任务。这种类型的计划程序可用于更有效地运行循环，而不是使用递归调度。</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.ISchedulerLongRunning.ScheduleLongRunning``1(``0,System.Action{``0,System.Reactive.Disposables.ICancelable})">
            <summary>安排长期运行的工作。</summary>
            <typeparam name="TState">传递至计划操作的状态类型。</typeparam>
            <param name="state">传递给待执行操作的状态。</param>
            <param name="action">要执行的操作。</param>
            <returns>用于取消计划操作的可释放对象（尽力服务）。</returns>
            <remarks><para><b>实现者须知</b></para> 返回的一次性对象不应该阻止工作启动，而只是设置传递给指定操作的取消标志。</remarks>
        </member>
        <member name="T:System.Reactive.Concurrency.IStopwatch">
            <summary>用于计算相对于起点的时间的秒表的抽象。</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.IStopwatch.Elapsed">
            <summary>获取自获取秒表对象以来经过的时间。</summary>
        </member>
        <member name="T:System.Reactive.Disposables.ICancelable">
            <summary>具有处理状态跟踪的一次性资源。</summary>
        </member>
        <member name="P:System.Reactive.Disposables.ICancelable.IsDisposed">
            <summary>获取指示对象是否已被处理的值。</summary>
        </member>
        <member name="T:System.Reactive.IEventPattern`2">
            <summary>表示由引发事件的强类型对象和事件生成的数据组成的 .NET 事件调用。</summary>
            <typeparam name="TSender">引发事件的发送程序的类型。此类型参数是协变的。也就是说，你可以使用指定的类型或更多派生的类型。有关协方差和逆变的更多信息，请参阅泛型中的协方差和逆变。</typeparam>
            <typeparam name="TEventArgs">事件生成的事件数据的类型。此类型参数是协变的。也就是说，你可以使用指定的类型或更多派生的类型。有关协方差和逆变的更多信息，请参阅泛型中的协方差和逆变。</typeparam>
        </member>
        <member name="P:System.Reactive.IEventPattern`2.Sender">
            <summary>获取引发事件的发送程序对象。</summary>
        </member>
        <member name="P:System.Reactive.IEventPattern`2.EventArgs">
            <summary>获取事件生成的事件数据。</summary>
        </member>
        <member name="T:System.Reactive.IEventPatternSource`1">
            <summary>表示通过事件向其元素发送信号的数据流。</summary>
            <typeparam name="TEventArgs">事件生成的事件数据的类型。</typeparam>
        </member>
        <member name="E:System.Reactive.IEventPatternSource`1.OnNext">
            <summary>事件给数据流中的下一个元素发送信号。</summary>
        </member>
        <member name="T:System.Reactive.IEventSource`1">
            <summary>表示通过事件向其元素发送信号的数据流。</summary>
            <typeparam name="T">事件生成的事件数据的类型。此类型参数是协变的。也就是说，你可以使用指定的类型或更多派生的类型。有关协方差和逆变的更多信息，请参阅泛型中的协方差和逆变。</typeparam>
        </member>
        <member name="E:System.Reactive.IEventSource`1.OnNext">
            <summary>事件给数据流中的下一个元素发送信号。</summary>
        </member>
        <member name="T:System.Reactive.IObserver`2">
            <summary>提供接收基于推送的通知并返回响应的机制。</summary>
            <typeparam name="TValue">观察者收到的元素类型。此类型参数是逆变的。也就是说，你可以使用指定的类型或更少派生的类型。有关协方差和逆变的更多信息，请参阅泛型中的协方差和逆变。</typeparam>
            <typeparam name="TResult">从观察者的通知处理程序返回的结果类型。此类型参数是协变的。也就是说，你可以使用指定的类型或更多派生的类型。有关协方差和逆变的更多信息，请参阅泛型中的协方差和逆变。</typeparam>
        </member>
        <member name="M:System.Reactive.IObserver`2.OnNext(`0)">
            <summary>向观察者通知序列中的新元素。</summary>
            <param name="value">序列中的新元素。</param>
            <returns>观察到新元素后返回结果。</returns>
        </member>
        <member name="M:System.Reactive.IObserver`2.OnError(System.Exception)">
            <summary>向观察者通知发生了异常。</summary>
            <param name="exception">发生的异常。</param>
            <returns>观察到错误后返回结果。</returns>
        </member>
        <member name="M:System.Reactive.IObserver`2.OnCompleted">
            <summary>向观察者通知序列的结束。</summary>
            <returns>观察到序列完成后返回结果。</returns>
        </member>
        <member name="T:System.Reactive.Linq.IGroupedObservable`2">
            <summary>表示具有公共密钥的可观察元素序列。</summary>
            <typeparam name="TKey">组中所有元素共享的密钥类型。此类型参数是协变的。也就是说，你可以使用指定的类型或更多派生的类型。有关协方差和逆变的更多信息，请参阅泛型中的协方差和逆变。</typeparam>
            <typeparam name="TElement">组中元素的类型。此类型参数是协变的。也就是说，你可以使用指定的类型或更多派生的类型。有关协方差和逆变的更多信息，请参阅泛型中的协方差和逆变。</typeparam>
        </member>
        <member name="P:System.Reactive.Linq.IGroupedObservable`2.Key">
            <summary>获取公共密钥。</summary>
        </member>
        <member name="T:System.Reactive.Linq.IQbservable`1">
            <summary>提供对已知数据类型的特定数据源的查询进行评估的功能。</summary>
            <typeparam name="T">数据源中的数据类型。此类型参数是协变的。也就是说，你可以使用指定的类型或更多派生的类型。有关协方差和逆变的更多信息，请参阅泛型中的协方差和逆变。</typeparam>
        </member>
        <member name="T:System.Reactive.Linq.IQbservable">
            <summary>提供对未指定数据类型的特定数据源的查询进行评估的功能。</summary>
        </member>
        <member name="P:System.Reactive.Linq.IQbservable.ElementType">
            <summary>获取执行与此 IQbservable 实例关联的表达式树时返回的元素的类型。</summary>
        </member>
        <member name="P:System.Reactive.Linq.IQbservable.Expression">
            <summary>获取与 IQbservable 实例关联的表达式树。</summary>
        </member>
        <member name="P:System.Reactive.Linq.IQbservable.Provider">
            <summary>获取与此数据源关联的查询提供程序。</summary>
        </member>
        <member name="T:System.Reactive.Linq.IQbservableProvider">
            <summary>定义创建和执行 IQbservable 对象描述的查询的方法。</summary>
        </member>
        <member name="M:System.Reactive.Linq.IQbservableProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>构造 IQbservable&gt;TResult&lt; 对象，该对象可以评估由指定表达式树表示的查询。</summary>
            <typeparam name="TResult">已返回的 System.Reactive.Linq.IQbservable&lt;T&gt; 的元素的类型。</typeparam>
            <param name="expression">表示查询的表达式树。</param>
            <returns>IQbservable 对象，可以评估给定的查询表达式。</returns>
        </member>
        <member name="T:System.Reactive.Subjects.IConnectableObservable`1">
            <summary>表示可以与其基础可观察序列连接以及从其断开的可观察包装器。</summary>
            <typeparam name="T">序列中元素的类型。此类型参数是协变的。也就是说，你可以使用指定的类型或更多派生的类型。有关协方差和逆变的更多信息，请参阅泛型中的协方差和逆变。</typeparam>
        </member>
        <member name="M:System.Reactive.Subjects.IConnectableObservable`1.Connect">
            <summary>将可观察的包装器连接到其源。只要建立连接，所有订阅的观察程序都将从基础可观察序列接收值。</summary>
            <returns>一次性，用于断开可观察包装器与其源的连接，导致订阅观察程序停止从基础可观察序列接收值。</returns>
        </member>
        <member name="T:System.Reactive.Subjects.ISubject`1">
            <summary>表示既是可观察序列又是观察程序的对象。</summary>
            <typeparam name="T">主题处理的元素的类型。</typeparam>
        </member>
        <member name="T:System.Reactive.Subjects.ISubject`2">
            <summary>表示既是可观察序列又是观察程序的对象。</summary>
            <typeparam name="TSource">主题接收的元素类型。此类型参数是逆变的。也就是说，你可以使用指定的类型或更少派生的类型。有关协方差和逆变的更多信息，请参阅泛型中的协方差和逆变。</typeparam>
            <typeparam name="TResult">主题产生的元素的类型。此类型参数是协变的。也就是说，你可以使用指定的类型或更多派生的类型。有关协方差和逆变的更多信息，请参阅泛型中的协方差和逆变。</typeparam>
        </member>
    </members>
</doc>