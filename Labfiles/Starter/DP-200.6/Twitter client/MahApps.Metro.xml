<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>MahApps.Metro</name>
    </assembly>
    <members>
        <member name="T:ControlzEx.KeyboardNavigationEx">
            <summary>用于常见重点问题的辅助类应用程序重点本身不是问题。如果我们使用常用重点方法，控件可获得重点但无法获得重点视觉风格。仅当控件从键盘设备获得焦点或 SystemParameters.KeyboardCues为“true”时，KeyboardNavigation 类才处理视觉样式。</summary>
        </member>
        <member name="P:ControlzEx.KeyboardNavigationEx.Instance">
            <summary>获取 KeyboardNavigationEx 单个实例。</summary>
        </member>
        <member name="M:ControlzEx.KeyboardNavigationEx.ShowFocusVisualInternal">
            <summary>显示当前重点的 UI 元素重点视觉效果。仅与 AlwaysShowFocusVisual 属性一起使用。</summary>
        </member>
        <member name="M:ControlzEx.KeyboardNavigationEx.Focus(System.Windows.UIElement)">
            <summary>重点关注指定元素并显示重点视觉样式。</summary>
            <param name="element">需重点关注的元素。</param>
        </member>
        <member name="F:ControlzEx.KeyboardNavigationEx.AlwaysShowFocusVisualProperty">
            <summary>附加 DependencyProperty，用于为 UI 元素设置 AlwaysShowFocusVisual。</summary>
        </member>
        <member name="M:ControlzEx.KeyboardNavigationEx.GetAlwaysShowFocusVisual(System.Windows.UIElement)">
            <summary>获取一个值，该值指示的 UI 元素是否始终显示重点视觉样式。</summary>
        </member>
        <member name="M:ControlzEx.KeyboardNavigationEx.SetAlwaysShowFocusVisual(System.Windows.UIElement,System.Boolean)">
            <summary>设置一个值，该值指示的 UI 元素是否始终显示重点视觉样式。</summary>
        </member>
        <member name="T:MahApps.Metro.Accent">
            <summary>表示 Metro 前景颜色的对象 <see cref="T:MahApps.Metro.AppTheme"/>。</summary>
        </member>
        <member name="F:MahApps.Metro.Accent.Resources">
            <summary>表示此 Accent 的 ResourceDictionary。</summary>
        </member>
        <member name="P:MahApps.Metro.Accent.Name">
            <summary>获取/设置 Accent 名称。</summary>
        </member>
        <member name="M:MahApps.Metro.Accent.#ctor">
            <summary>初始化 MahApps.Metro.Accent 类的新实例。</summary>
        </member>
        <member name="M:MahApps.Metro.Accent.#ctor(System.String,System.Uri)">
            <summary>初始化 MahApps.Metro.Accent 类的新实例。</summary>
            <param name="name">新 Accent 名称。</param>
            <param name="resourceAddress">Accent ResourceDictionary 的 URI。</param>
        </member>
        <member name="T:MahApps.Metro.AppTheme">
            <summary>代表应用程序的背景主题。</summary>
        </member>
        <member name="P:MahApps.Metro.AppTheme.Resources">
            <summary>表示此应用程序主题的 ResourceDictionary。</summary>
        </member>
        <member name="P:MahApps.Metro.AppTheme.Name">
            <summary>获得应用程序主题名称。</summary>
        </member>
        <member name="T:MahApps.Metro.Behaviours.BorderlessWindowBehavior">
            <summary>通过这个类别，我们可以制作自定义窗口样式。</summary>
        </member>
        <member name="M:MahApps.Metro.Behaviours.BorderlessWindowBehavior._ModifyStyle(Standard.WS,Standard.WS)">
            <summary>从 HWND 中添加和删除本机 WindowStyle。</summary>
            <param name="removeStyle">要删除的样式。可以逐位组合。</param>
            <param name="addStyle">要添加的样式。可以逐位组合。</param>
            <returns>是否通过此调用修改了 HWND 样式。</returns>
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:MahApps.Metro.Behaviours.GlowWindowBehavior.Update">
            <summary>更新所有发光窗口（可见、隐藏、折叠）</summary>
        </member>
        <member name="M:MahApps.Metro.Behaviours.GlowWindowBehavior.SetOpacityTo(System.Double)">
            <summary>将不透明度设置为全部发光窗口</summary>
        </member>
        <member name="M:MahApps.Metro.Behaviours.GlowWindowBehavior.StartOpacityStoryboard">
            <summary>启动不透明度计事板 0  - &gt; 1</summary>
        </member>
        <member name="M:MahApps.Metro.Behaviours.GlowWindowBehavior.Show">
            <summary>显示所有发光窗口</summary>
        </member>
        <member name="F:MahApps.Metro.Behaviours.PasswordBoxBindingBehavior.PasswordProperty">
            <summary>获取或设置 PasswordBox （密码框）控件上的可绑定 Password （密码）属性。这是依赖属性。</summary>
        </member>
        <member name="M:MahApps.Metro.Behaviours.PasswordBoxBindingBehavior.OnPasswordPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>处理“密码”附加属性的更改。</summary>
        </member>
        <member name="M:MahApps.Metro.Behaviours.PasswordBoxBindingBehavior.PasswordBoxPasswordChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>在 PasswordBox 上处理“PasswordChanged”事件</summary>
        </member>
        <member name="M:MahApps.Metro.Behaviours.PasswordBoxBindingBehavior.OnAttached">
            <summary>在将行为附加到 AssociatedObject 之后进行调用。</summary>
            <remarks>重写此操作，以将功能连接至 AssociatedObject。</remarks>
        </member>
        <member name="M:MahApps.Metro.Behaviours.PasswordBoxBindingBehavior.OnDetaching">
            <summary>当行为从其 AssociatedObject 分离时进行调用，但在分离实际发生之前调用。</summary>
            <remarks>重写此项以从 AssociatedObject 中解除功能。</remarks>
        </member>
        <member name="T:MahApps.Metro.Behaviours.TabControlSelectFirstVisibleTabBehavior">
            <summary>
            <para>使用Visibility（可见性） =“设置第一个 TabItem <see cref="F:System.Windows.Visibility.Visible"/>“作为 TabControl 的 SelectedItem。</para>
            <para>如果没有可见的 TabItem，则将 null 设置为 SelectedItem</para>
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.CloseCommand.CanExecute(System.Object)">
            <summary>对确定是否能在当前状态下执行命令的方法进行定义。</summary>
            <returns>如果可以执行此命令，则为 true；否则否则为 false。</returns>
            <param name="parameter">此命令所用的数据。如果该命令不需要传递数据，则可以将此对象设置为 null。</param>
        </member>
        <member name="M:MahApps.Metro.Controls.CloseCommand.Execute(System.Object)">
            <summary>调用命令时对方法进行定义。</summary>
            <param name="parameter">此命令所用的数据。如果该命令不需要传递数据，则可以将此对象设置为 null。</param>
        </member>
        <member name="F:MahApps.Metro.Controls.ContentControlEx.ContentCharacterCasingProperty">
            <summary>CharacterCasing 属性的 DependencyProperty。控件是否将内容转换为大写或小写默认值：CharacterCasing.Normal</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ContentControlEx.ContentCharacterCasing">
            <summary>内容中的字符大小写</summary> 
        </member>
        <member name="F:MahApps.Metro.Controls.ContentControlEx.RecognizesAccessKeyProperty">
            <summary>RecognizesAccessKey 属性的 DependencyProperty。默认值：false</summary> 
        </member>
        <member name="P:MahApps.Metro.Controls.ContentControlEx.RecognizesAccessKey">
            <summary>确定内部 ContentPresenter 是否应该在其样式中使用 AccessText</summary> 
        </member>
        <member name="M:MahApps.Metro.Controls.Extensions.BeginInvoke(System.Windows.Threading.DispatcherObject,System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>在创建 Dispatcher 的会话上与 DispatcherPriority.Background 异步执行指定操作。</summary>
            <param name="dispatcherObject">运行操作的调度程序对象。</param>
            <param name="invokeAction">无参数的动作。</param>
            <param name="priority">调度程序优先级。</param> 
        </member>
        <member name="T:MahApps.Metro.Controls.TimePartVisibility">
            <summary>定义可见的时间部分的可见性 <see cref="T:MahApps.Metro.Controls.DateTimePicker"/>。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.DateTimePicker">
            <summary>表示控件允许用户选择日期和时间。</summary>
        </member>
        <member name="E:MahApps.Metro.Controls.DateTimePicker.SelectedDateChanged">
            <summary>属性变更时执行<see cref="P:MahApps.Metro.Controls.DateTimePicker.SelectedDate" />。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.DateTimePicker.DisplayDate">
            <summary>获取或设置要显示的日期</summary>
            <returns>要显示的日期。默认为 <see cref="P:System.DateTime.Today" />。</returns>
        </member>
        <member name="P:MahApps.Metro.Controls.DateTimePicker.DisplayDateEnd">
            <summary>获取或设置要显示的最后日期。</summary>
            <returns>要显示的最后日期。</returns>
        </member>
        <member name="P:MahApps.Metro.Controls.DateTimePicker.DisplayDateStart">
            <summary>获取或设置要显示的首个日期。</summary>
            <returns>要显示的首个日期。</returns>
        </member>
        <member name="P:MahApps.Metro.Controls.DateTimePicker.FirstDayOfWeek">
            <summary>获取或设置视为一周开始的日期。</summary>
            <returns>一个 <see cref="T:System.DayOfWeek" /> 代表本周开始。默认为 <see cref="P:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek" /> 由当前的区域性决定。</returns>
        </member>
        <member name="P:MahApps.Metro.Controls.DateTimePicker.IsTodayHighlighted">
            <summary>获取或设置一个指示是否突出显示当前日期的值。</summary>
            <returns>如果当前日期突出显示，则为 true;否则为 false。默认为 true。</returns>
        </member>
        <member name="P:MahApps.Metro.Controls.DateTimePicker.Orientation">
            <summary>获取或设置一个指示日历和时钟累计的维度的值。</summary>
            <returns>该 <see cref="T:System.Windows.Controls.Orientation" /> 日历和时钟。默认为 <see cref="F:System.Windows.Controls.Orientation.Horizontal" />。</returns>
        </member>
        <member name="P:MahApps.Metro.Controls.DateTimePicker.SelectedDate">
            <summary>获取或设置当前选定的日期。</summary>
            <returns>当前选择的日期。默认为 null。</returns>
        </member>
        <member name="T:MahApps.Metro.Controls.MetroThumbContentControl">
            <summary>MetroThumbContentControl 控件可用于标题或其他内容，并启用基本的拖动移动功能。</summary>
        </member>
        <member name="E:MahApps.Metro.Controls.MetroThumbContentControl.DragStarted">
            <summary>添加或删除 DragStartedEvent 处理程序</summary>
        </member>
        <member name="E:MahApps.Metro.Controls.MetroThumbContentControl.DragDelta">
            <summary>添加或删除 DragDeltaEvent 处理程序</summary>
        </member>
        <member name="E:MahApps.Metro.Controls.MetroThumbContentControl.DragCompleted">
            <summary>添加或删除 DragCompletedEvent 处理程序</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.MetroThumbContentControl.IsDraggingProperty">
            <summary>IsDragging 属性的 DependencyProperty。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroThumbContentControl.IsDragging">
            <summary>表示按下鼠标左键并且在 MetroThumbContentControl 上方。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.Dialogs.DialogCoordinator.Instance">
            <summary>如果对话框协调器可以注入视图模型，则获取默认实例。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.IDialogCoordinator">
            <summary>使用对话框协调器可帮助您从视图模型中插入对话框。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.IDialogCoordinator.ShowInputAsync(System.Object,System.String,System.String,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>显示输入对话框。</summary>
            <param name="context">通常，这应该是您在 XAML 中用于注册的视图模型 <see cref="M:MahApps.Metro.Controls.Dialogs.DialogParticipation.SetRegister(System.Windows.DependencyObject,System.Object)"/>。</param>
            <param name="title">MessageDialog 标题。</param>
            <param name="message">MessageDialog 包含的消息。</param>
            <param name="settings">覆盖全局 metro 对话框设置的可选设置。</param>
            <returns>如果用户取消操作，则输入的文本为 null（在 Visual Basic 中为 Nothing）。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.IDialogCoordinator.ShowModalInputExternal(System.Object,System.String,System.String,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>显示输入对话框。</summary>
            <param name="context">通常，这应该是您在 XAML 中用于注册的视图模型 <see cref="M:MahApps.Metro.Controls.Dialogs.DialogParticipation.SetRegister(System.Windows.DependencyObject,System.Object)"/>。</param>
            <param name="title">MessageDialog 标题。</param>
            <param name="message">MessageDialog 包含的消息。</param>
            <param name="settings">覆盖全局 metro 对话框设置的可选设置。</param>
            <returns>如果用户取消操作，则输入的文本为 null（在 Visual Basic 中为 Nothing）。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.IDialogCoordinator.ShowLoginAsync(System.Object,System.String,System.String,MahApps.Metro.Controls.Dialogs.LoginDialogSettings)">
            <summary>在当前窗口内创建 LoginDialog。</summary>
            <param name="context">通常，这应该是您在 XAML 中用于注册的视图模型 <see cref="M:MahApps.Metro.Controls.Dialogs.DialogParticipation.SetRegister(System.Windows.DependencyObject,System.Object)"/>。</param>
            <param name="title">LoginDialog 标题。</param>
            <param name="message">LoginDialog 包含的消息。</param>
            <param name="settings">覆盖全局 metro 对话框设置的可选设置。</param>
            <returns>如果用户取消操作，则输入的文本为 null（在 Visual Basic 中为 Nothing）。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.IDialogCoordinator.ShowModalLoginExternal(System.Object,System.String,System.String,MahApps.Metro.Controls.Dialogs.LoginDialogSettings)">
            <summary>在当前窗口外创建 LoginDialog。</summary>
            <param name="context">通常，这应该是您在 XAML 中用于注册的视图模型 <see cref="M:MahApps.Metro.Controls.Dialogs.DialogParticipation.SetRegister(System.Windows.DependencyObject,System.Object)"/>。</param>
            <param name="title">LoginDialog 标题。</param>
            <param name="message">LoginDialog 包含的消息。</param>
            <param name="settings">覆盖全局 metro 对话框设置的可选设置。</param>
            <returns>如果用户取消操作，则输入的文本为 null（在 Visual Basic 中为 Nothing）。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.IDialogCoordinator.ShowMessageAsync(System.Object,System.String,System.String,MahApps.Metro.Controls.Dialogs.MessageDialogStyle,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>在当前窗口内创建MessageDialog。</summary>
            <param name="context">通常，这应该是您在 XAML 中用于注册的视图模型 <see cref="M:MahApps.Metro.Controls.Dialogs.DialogParticipation.SetRegister(System.Windows.DependencyObject,System.Object)"/>。</param>
            <param name="title">MessageDialog 标题。</param>
            <param name="message">MessageDialog 包含的消息。</param>
            <param name="style">要使用的按钮类型。</param>
            <param name="settings">覆盖全局 metro 对话框设置的可选设置。</param>
            <returns>按下承诺任务结果的按钮。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.IDialogCoordinator.ShowModalMessageExternal(System.Object,System.String,System.String,MahApps.Metro.Controls.Dialogs.MessageDialogStyle,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>在当前窗口外创建 MessageDialog。</summary>
            <param name="context">通常，这应该是您在 XAML 中用于注册的视图模型 <see cref="M:MahApps.Metro.Controls.Dialogs.DialogParticipation.SetRegister(System.Windows.DependencyObject,System.Object)"/>。</param>
            <param name="title">MessageDialog 标题。</param>
            <param name="message">MessageDialog 包含的消息。</param>
            <param name="style">要使用的按钮类型。</param>
            <param name="settings">覆盖全局 metro 对话框设置的可选设置。</param>
            <returns>按下承诺任务结果的按钮。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.IDialogCoordinator.ShowProgressAsync(System.Object,System.String,System.String,System.Boolean,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>在当前窗口内创建 ProgressDialog。</summary>
            <param name="context">通常，这应该是您在 XAML 中用于注册的视图模型 <see cref="M:MahApps.Metro.Controls.Dialogs.DialogParticipation.SetRegister(System.Windows.DependencyObject,System.Object)"/>。</param>
            <param name="title">ProgressDialog 标题。</param>
            <param name="message">ProgressDialog 内的消息。</param>
            <param name="isCancelable">确定取消按钮是否可见。</param>
            <param name="settings">覆盖全局 metro 对话框设置的可选设置。</param>
            <returns>承诺为此操作提供 ProgressDialogController 实例的任务。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.IDialogCoordinator.ShowMetroDialogAsync(System.Object,MahApps.Metro.Controls.Dialogs.BaseMetroDialog,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>将 Metro Dialog 实例添加到指定的窗口，并使其异步可见。<para>您必须自己关闭生成的对话框 <see cref="M:MahApps.Metro.Controls.Dialogs.IDialogCoordinator.HideMetroDialogAsync(System.Object,MahApps.Metro.Controls.Dialogs.BaseMetroDialog,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)"/>。</para>
            </summary>
            <param name="context">通常，这应该是您在 XAML 中用于注册的视图模型 <see cref="M:MahApps.Metro.Controls.Dialogs.DialogParticipation.SetRegister(System.Windows.DependencyObject,System.Object)"/>。</param>
            <param name="dialog">对话框实例本身。</param>
            <param name="settings">可选的预定义设置实例。</param>
            <returns>表示操作的任务。</returns>
            <exception cref="T:System.InvalidOperationException">该 <paramref name="dialog"/> 在窗口中已经可见。</exception>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.IDialogCoordinator.HideMetroDialogAsync(System.Object,MahApps.Metro.Controls.Dialogs.BaseMetroDialog,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>隐藏可见的 Metro Dialog 实例。</summary>
            <param name="context">通常，这应该是您在 XAML 中用于注册的视图模型 <see cref="M:MahApps.Metro.Controls.Dialogs.DialogParticipation.SetRegister(System.Windows.DependencyObject,System.Object)"/>。</param>
            <param name="dialog">要隐藏的对话框实例。</param>
            <param name="settings">可选的预定义设置实例。</param>
            <returns>表示操作的任务。</returns>
            <exception cref="T:System.InvalidOperationException">该 <paramref name="dialog"/> 在窗口中不可见。如果这发生了 <see cref="M:MahApps.Metro.Controls.Dialogs.IDialogCoordinator.ShowMetroDialogAsync(System.Object,MahApps.Metro.Controls.Dialogs.BaseMetroDialog,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)"/> 之前没有调用过。</exception>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.IDialogCoordinator.GetCurrentDialogAsync``1(System.Object)">
            <summary>获取当前显示的对话框。</summary>
            <param name="context">通常，这应该是您在 XAML 中用于注册的视图模型 <see cref="M:MahApps.Metro.Controls.Dialogs.DialogParticipation.SetRegister(System.Windows.DependencyObject,System.Object)"/>。</param>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.BaseMetroDialog">
             <summary>对话框的基类。您可能不想使用这个类，如果你想在对话框中添加任意内容，请使用 <see cref="T:MahApps.Metro.Controls.Dialogs.CustomDialog"/> 类。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.Title">
            <summary>获取/设置对话框的标题。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.DialogTop">
            <summary>获取/设置对话框顶部的任意内容。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.DialogBottom">
            <summary>获取/设置对话框下方的任意内容。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.DialogTitleFontSize">
            <summary>获取或设置对话框标题字体的大小。</summary>
            <value>对话框标题字体的大小。</value>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.DialogMessageFontSize">
            <summary>获取或设置对话框消息字体的大小。</summary>
            <value>对话框消息字体的大小。</value>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.#ctor(MahApps.Metro.Controls.MetroWindow,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>初始化一个新的 MahApps.Metro.Controls.BaseMetroDialog。</summary>
            <param name="owningWindow">作为对话框父级的窗口。</param>
            <param name="settings">消息对话框的设置。</param>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.#ctor">
            <summary>初始化一个新的 MahApps.Metro.Controls.BaseMetroDialog。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.OnLoaded">
            <summary>这称为已加载事件。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.WaitForLoadAsync">
            <summary>等待对话框准备进行交互。</summary>
            <returns>表示操作及其状态的任务。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.RequestCloseAsync">
            <summary>请求关闭外部显示的对话框。如果 Dialog 位于 MetroWindow 内，则会抛出异常。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.OnRequestClose">
            <summary>停止关闭外部对话框的最后机会虚拟方法。</summary>
            <returns></returns>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.ParentDialogWindow">
            <summary>获取拥有当前 Dialog IF 的窗口，如果对话框显示在外部，则为 ONLY。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.OwningWindow">
            <summary>获取拥有当前 Dialog IF 的窗口，如果对话框显示在窗口内，则为ONLY。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.WaitUntilUnloadedAsync">
            <summary>等待此对话框卸载。</summary>
            <returns></returns>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.MetroDialogSettings">
            <summary>表示 Metro Dialogs 使用的设置类。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.MetroDialogSettings.AffirmativeButtonText">
            <summary>获取/设置用于 Affirmative 按钮的文本。例如：“确定”或“是”。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.MetroDialogSettings.NegativeButtonText">
            <summary>获取/设置用于“否定”按钮的文本。例如：“取消”或“否”。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.MetroDialogSettings.ColorScheme">
            <summary>获取/设置 metro 对话框是否应使用默认的黑/白外观（主题）或尝试使用当前 accent。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.MetroDialogSettings.AnimateShow">
            <summary>启用/禁用显示动画的对话框。“True” - 播放动画。“False” - 跳过显示动画。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.MetroDialogSettings.AnimateHide">
            <summary>启用/禁用对话框隐藏动画“True” - 播放隐藏动画。“False” - 跳过隐藏动画。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.MetroDialogSettings.DefaultText">
            <summary>获取/设置默认文本（只需要 inputdialog）</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.MetroDialogSettings.MaximumBodyHeight">
            <summary>获取/设置最大高度。（默认为无限高度， <a href="http://msdn.microsoft.com/de-de/library/system.double.nan">Double.NaN</a>）</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.MetroDialogSettings.DefaultButtonFocus">
            <summary>获取或设置默认情况下应该关注的按钮</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.MetroDialogSettings.CancellationToken">
            <summary>获取/设置要取消对话框的标记。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.MetroDialogSettings.CustomResourceDictionary">
            <summary>获取/设置自定义资源字典，其中可以包含自定义样式、画笔或其他内容。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.MetroDialogSettings.SuppressDefaultResources">
            <summary>如果设置，则停止应用于对话框的标准资源字典。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.MetroDialogSettings.DialogTitleFontSize">
            <summary>获取或设置对话框标题字体的大小。</summary>
            <value>对话框标题字体的大小。</value>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.MetroDialogSettings.DialogMessageFontSize">
            <summary>获取或设置对话框消息字体的大小。</summary>
            <value>对话框消息字体的大小。</value>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.MetroDialogColorScheme">
            <summary>枚举，表示 Metro 对话框中颜色方案的不同选择。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.CustomDialog">
            <summary>BaseMetroDialog 的实现允许任意内容。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.DialogManager.ShowLoginAsync(MahApps.Metro.Controls.MetroWindow,System.String,System.String,MahApps.Metro.Controls.Dialogs.LoginDialogSettings)">
            <summary>在当前窗口内创建 LoginDialog。</summary>
            <param name="window">作为对话框父级的窗口。</param>
            <param name="title">LoginDialog 标题。</param>
            <param name="message">LoginDialog 包含的消息。</param>
            <param name="settings">覆盖全局 metro 对话框设置的可选设置。</param>
            <returns>如果用户取消操作，则输入的文本为 null（在 Visual Basic 中为 Nothing）。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.DialogManager.ShowInputAsync(MahApps.Metro.Controls.MetroWindow,System.String,System.String,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>在当前窗口内创建一个 InputDialog。</summary>
            <param name="window">MetroWindow</param>
            <param name="title">MessageDialog 标题。</param>
            <param name="message">MessageDialog 包含的消息。</param>
            <param name="settings">覆盖全局 metro 对话框设置的可选设置。</param>
            <returns>如果用户取消操作，则输入的文本为 null（在 Visual Basic 中为 Nothing）。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.DialogManager.ShowMessageAsync(MahApps.Metro.Controls.MetroWindow,System.String,System.String,MahApps.Metro.Controls.Dialogs.MessageDialogStyle,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>在当前窗口内创建MessageDialog。</summary>
            <param name="window">MetroWindow</param>
            <param name="title">MessageDialog 标题。</param>
            <param name="message">MessageDialog 包含的消息。</param>
            <param name="style">要使用的按钮类型。</param>
            <param name="settings">覆盖全局 metro 对话框设置的可选设置。</param>
            <returns>按下承诺任务结果的按钮。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.DialogManager.ShowProgressAsync(MahApps.Metro.Controls.MetroWindow,System.String,System.String,System.Boolean,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>在当前窗口内创建 ProgressDialog。</summary>
            <param name="window">MetroWindow</param>
            <param name="title">ProgressDialog 标题。</param>
            <param name="message">ProgressDialog 内的消息。</param>
            <param name="isCancelable">确定取消按钮是否可见。</param>
            <param name="settings">覆盖全局 metro 对话框设置的可选设置。</param>
            <returns>承诺为此操作提供 ProgressDialogController 实例的任务。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.DialogManager.ShowMetroDialogAsync(MahApps.Metro.Controls.MetroWindow,MahApps.Metro.Controls.Dialogs.BaseMetroDialog,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>将 Metro Dialog 实例添加到指定的窗口，并使其异步可见。如果要等到用户关闭对话框，请使用 <see cref="!:ShowMetroDialogAsyncAwaitable"/><para>您必须自己关闭生成的对话框 <see cref="M:MahApps.Metro.Controls.Dialogs.DialogManager.HideMetroDialogAsync(MahApps.Metro.Controls.MetroWindow,MahApps.Metro.Controls.Dialogs.BaseMetroDialog,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)"/>。</para>
            </summary>
            <param name="window">对话框拥有窗口。</param>
            <param name="dialog">对话框实例本身。</param>
            <param name="settings">可选的预定义设置实例。</param>
            <returns>表示操作的任务。</returns>
            <exception cref="T:System.InvalidOperationException">该 <paramref name="dialog"/> 在窗口中已经可见。</exception>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.DialogManager.HideMetroDialogAsync(MahApps.Metro.Controls.MetroWindow,MahApps.Metro.Controls.Dialogs.BaseMetroDialog,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>隐藏可见的 Metro Dialog 实例。</summary>
            <param name="window">具有可见对话框的窗口。</param>
            <param name="dialog">要隐藏的对话框实例。</param>
            <param name="settings">可选的预定义设置实例。</param>
            <returns>表示操作的任务。</returns>
            <exception cref="T:System.InvalidOperationException">该 <paramref name="dialog"/> 在窗口中不可见。如果这发生了 <see cref="M:MahApps.Metro.Controls.Dialogs.DialogManager.ShowMetroDialogAsync(MahApps.Metro.Controls.MetroWindow,MahApps.Metro.Controls.Dialogs.BaseMetroDialog,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)"/> 之前没有调用过。</exception>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.DialogManager.GetCurrentDialogAsync``1(MahApps.Metro.Controls.MetroWindow)">
            <summary>以异步方式获取当前显示的对话框。</summary>
            <param name="window">对话框所有者。</param>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.DialogManager.ShowModalLoginExternal(MahApps.Metro.Controls.MetroWindow,System.String,System.String,MahApps.Metro.Controls.Dialogs.LoginDialogSettings)">
            <summary>在当前窗口外创建 LoginDialog。</summary>
            <param name="window">作为对话框父级的窗口。</param>
            <param name="title">LoginDialog 标题。</param>
            <param name="message">LoginDialog 包含的消息。</param>
            <param name="settings">覆盖全局 metro 对话框设置的可选设置。</param>
            <returns>如果用户取消操作，则输入的文本为 null（在 Visual Basic 中为 Nothing）。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.DialogManager.ShowModalInputExternal(MahApps.Metro.Controls.MetroWindow,System.String,System.String,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>在当前窗口外创建一个 InputDialog。</summary>
            <param name="window">MetroWindow</param>
            <param name="title">MessageDialog 标题。</param>
            <param name="message">MessageDialog 包含的消息。</param>
            <param name="settings">覆盖全局 metro 对话框设置的可选设置。</param>
            <returns>如果用户取消操作，则输入的文本为 null（在 Visual Basic 中为 Nothing）。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.DialogManager.ShowModalMessageExternal(MahApps.Metro.Controls.MetroWindow,System.String,System.String,MahApps.Metro.Controls.Dialogs.MessageDialogStyle,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>创建当前窗口的 MessageDialog ouside。</summary>
            <param name="window">MetroWindow</param>
            <param name="title">MessageDialog 标题。</param>
            <param name="message">MessageDialog 包含的消息。</param>
            <param name="style">要使用的按钮类型。</param>
            <param name="settings">覆盖全局 metro 对话框设置的可选设置。</param>
            <returns>按下承诺任务结果的按钮。</returns>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.InputDialog">
            <summary>显示 InputDialog</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.InputDialog.InitializeComponent">
            <summary>的 InitializeComponent</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.LoginDialog">
            <summary>一个 LoginDialog</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.LoginDialog.InitializeComponent">
            <summary>的 InitializeComponent</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.MessageDialog">
            <summary>表示消息对话框的内部控件。请改用 MetroWindow.ShowMessage！</summary>
            <summary>MessageDialog</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.MessageDialog.InitializeComponent">
            <summary>的 InitializeComponent</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.MessageDialogResult">
            <summary>表示消息对话框结果的枚举。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.MessageDialogStyle">
            <summary>表示消息对话框的不同按钮状态的枚举。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.Dialogs.MessageDialogStyle.Affirmative">
            <summary>为“OK”</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.Dialogs.MessageDialogStyle.AffirmativeAndNegative">
            <summary>“OK”和“取消”</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.ProgressDialog">
            <summary>表示消息对话框的内部控件。请改用 MetroWindow.ShowMessage！</summary>
            <summary>ProgressDialog</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.ProgressDialog.InitializeComponent">
            <summary>的 InitializeComponent</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.ProgressDialogController">
            <summary>用于操作打开的 ProgressDialog 的类。</summary>
        </member>
        <member name="E:MahApps.Metro.Controls.Dialogs.ProgressDialogController.Closed">
            <summary>关联时会引发此事件 <see cref="T:MahApps.Metro.Controls.Dialogs.ProgressDialog"/> 以编程方式关闭。</summary>
        </member>
        <member name="E:MahApps.Metro.Controls.Dialogs.ProgressDialogController.Canceled">
            <summary>关联时会引发此事件 <see cref="T:MahApps.Metro.Controls.Dialogs.ProgressDialog"/> 被用户取消。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.ProgressDialogController.IsCanceled">
            <summary>获取是否已按下“取消”按钮。</summary>        
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.ProgressDialogController.IsOpen">
            <summary>获取包装的 ProgressDialog 是否已打开。</summary>        
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.ProgressDialogController.SetIndeterminate">
            <summary>将 ProgressBar 的 IsIndeterminate 设置为 true。要将其设置为 false，请调用 SetProgress。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.ProgressDialogController.SetCancelable(System.Boolean)">
            <summary>设置“取消”按钮是否可见。</summary>
            <param name="value"></param>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.ProgressDialogController.SetProgress(System.Double)">
            <summary>设置对话框的进度条值并将 IsIndeterminate 设置为 false。</summary>
            <param name="value">要设置为值的百分比。</param>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.ProgressDialogController.Minimum">
            <summary>获取/设置进度 Value 属性的最小限制</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.ProgressDialogController.Maximum">
            <summary>获取/设置进度 Value 属性的最大限制</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.ProgressDialogController.SetMessage(System.String)">
            <summary>设置对话框的消息内容。</summary>
            <param name="message">要设置的消息。</param>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.ProgressDialogController.SetTitle(System.String)">
            <summary>设置对话框标题。</summary>
            <param name="title">要设置的标题。</param>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.ProgressDialogController.CloseAsync">
            <summary>开始关闭 ProgressDialog 的操作。</summary>
            <returns>表示操作的任务。</returns>
        </member>
        <member name="T:MahApps.Metro.Controls.AmPmComparer">
             <summary>表示确保 12 小于 1 的小时对比操作。这确保了 <see cref="T:MahApps.Metro.Controls.TimePickerBase"/> 控制可选择的第一个小时为 12（上午/下午）。</summary>
            <remarks>这确保了可选择的第一个小时为 12（上午/下午）。 <br></br> 该比较装置仅在相应的情况下使用 <see cref="T:MahApps.Metro.Controls.TimePickerBase"/> 的价值 <see cref="P:MahApps.Metro.Controls.TimePickerBase.IsMilitaryTime"/> 为 false。</remarks>
        </member>
        <member name="M:MahApps.Metro.Controls.ButtonHelper.GetPreserveTextCase(System.Windows.UIElement)">
            <summary>覆盖某些按钮的文本案例行为。设置为 <c>true</c>时，文本案例将被保留，且不会更改为大写或小写。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.ButtonHelper.CornerRadiusProperty">
            <summary><see cref="T:System.Windows.CornerRadius" /> 属性 的 DependencyProperty。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ButtonHelper.GetCornerRadius(System.Windows.UIElement)">
            <summary>CornerRadius 属性允许用户通过为每个角设置半径值来独立控制按钮角的圆度。缩放的半径值会缩放，以便它们从一个角到另一个角平滑地混合。（可以用于例如 MetroButton 风格）描述取自最初的 Microsoft 说明:-D</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.ComboBoxHelper">
            <summary>帮助类程序，它为 ComboBox 控件提供各种附加属性。 <see cref="T:System.Windows.Controls.ComboBox"/></summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ComboBoxHelper.GetMaxLength(System.Windows.UIElement)">
            <summary>获取 TextBox 可以接受的最大字符数。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ComboBoxHelper.SetMaxLength(System.Windows.UIElement,System.Int32)">
            <summary>设置 TextBox 可以接受的最大字符数。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ComboBoxHelper.GetCharacterCasing(System.Windows.UIElement)">
            <summary>获取 TextBox 的字符大小写。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ComboBoxHelper.SetCharacterCasing(System.Windows.UIElement,System.Windows.Controls.CharacterCasing)">
            <summary>设置 TextBox 的字符大小写。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.ControlsHelper">
            <summary>提供各种控件的辅助类程序。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ControlsHelper.GetDisabledVisualElementVisibility(System.Windows.UIElement)">
            <summary>获取用于处理模板中 DisabledVisualElement 的可见性值。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ControlsHelper.SetDisabledVisualElementVisibility(System.Windows.UIElement,System.Windows.Visibility)">
            <summary>设置值以处理模板中 DisabledVisualElement 的可见性。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.ControlsHelper.ContentCharacterCasingProperty">
            <summary>CharacterCasing 属性的 DependencyProperty。控制是否将内容转换为大写或小写</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ControlsHelper.GetContentCharacterCasing(System.Windows.UIElement)">
            <summary>获取控件的字符大小写</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ControlsHelper.SetContentCharacterCasing(System.Windows.UIElement,System.Windows.Controls.CharacterCasing)">
            <summary>设置控件的字符大小写</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.ControlsHelper.ButtonWidthProperty">
            <summary>此属性可用于设置 TextBox，PasswordBox，ComboBox，NumericUpDown 的按钮宽度（PART_ClearText）</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ControlsHelper.SetFocusBorderBrush(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>设置用于绘制焦点边框的画笔。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ControlsHelper.GetFocusBorderBrush(System.Windows.DependencyObject)">
            <summary>获取用于绘制焦点边框的画笔。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ControlsHelper.SetMouseOverBorderBrush(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>设置用于在画笔上绘制鼠标的画笔。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ControlsHelper.GetMouseOverBorderBrush(System.Windows.DependencyObject)">
            <summary>获取用于在画笔上绘制鼠标的画笔。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.ControlsHelper.CornerRadiusProperty">
            <summary><see cref="T:System.Windows.CornerRadius" /> 属性 的 DependencyProperty。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ControlsHelper.GetCornerRadius(System.Windows.UIElement)">
            <summary>CornerRadius 属性允许用户通过为每个角设置半径值来独立控制按钮角的圆度。缩放的半径值会缩放，以便它们从一个角到另一个角平滑地混合。（可以用于例如 MetroButton 风格）描述取自最初的 Microsoft 说明:-D</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.CustomValidationPopup">
            <summary>验证错误模板使用此自定义弹出窗口。提供了一些额外的优势功能：- 如果主窗口大小或位置发生变化，则重新定位 - 如果主窗口最大化则重新定位，反之亦然 - 如果主窗口被激活，它只在最上层显示</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.CustomValidationPopup.CloseOnMouseLeftButtonDown">
            <summary>获取/设置是否可以通过鼠标左键关闭弹出窗口。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.DataGridNumericUpDownColumn.PrepareCellForEdit(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs)">
            <summary>当单元格刚刚切换到编辑模式时调用。</summary>
            <param name="editingElement">对 GenerateEditingElement 传回元素的引用。</param> 
            <param name="editingEventArgs">输入事件的事件参数，使得单元格进入编辑模式。可能为空。</param> 
            <returns>未编辑的单元格值。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.DataGridNumericUpDownColumn.SyncColumnProperty(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Windows.DependencyProperty)">
            <summary>同步列属性。取自 DataGrid 的 Helper 代码。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.DataGridNumericUpDownColumn.IsDefaultValue(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>取自 DataGrid 的 Helper 代码。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.DataGridNumericUpDownColumn.FontFamilyProperty">
            <summary>FontFamily 属性的 DependencyProperty。默认值：SystemFonts.MessageFontFamily</summary> 
        </member>
        <member name="P:MahApps.Metro.Controls.DataGridNumericUpDownColumn.FontFamily">
            <summary>所需字体的字体系列。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.DataGridNumericUpDownColumn.FontSizeProperty">
            <summary>FontSize 属性的 DependencyProperty。默认值：SystemFonts.MessageFontSize</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.DataGridNumericUpDownColumn.FontSize">
            <summary>所需字体的大小。</summary> 
        </member>
        <member name="F:MahApps.Metro.Controls.DataGridNumericUpDownColumn.FontStyleProperty">
            <summary>FontStyle 属性的 DependencyProperty。默认值：SystemFonts.MessageFontStyle</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.DataGridNumericUpDownColumn.FontStyle">
            <summary>所需字体的样式。</summary> 
        </member>
        <member name="F:MahApps.Metro.Controls.DataGridNumericUpDownColumn.FontWeightProperty">
            <summary>FontWeight 属性的 DependencyProperty。默认值：SystemFonts.MessageFontWeight</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.DataGridNumericUpDownColumn.FontWeight">
            <summary>所需字体的粗细。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.DataGridNumericUpDownColumn.ForegroundProperty">
            <summary>Foreground 属性的 DependencyProperty。默认值：SystemColors.ControlTextBrush</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.DataGridNumericUpDownColumn.Foreground">
            <summary>描述前景颜色的画笔。这将覆盖单元格前景继承颜色。</summary> 
        </member>
        <member name="M:MahApps.Metro.Controls.DataGridNumericUpDownColumn.NotifyPropertyChangeForRefreshContent(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>用作属性的方法更改了需要调用 RefreshCellContent 的属性回呼</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.DropDownButton.ContentTemplateProperty">
            <summary>ContentTemplate 属性的 DependencyProperty。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.DropDownButton.ContentTemplateSelectorProperty">
            <summary>ContentTemplateSelector 属性的 DependencyProperty。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.DropDownButton.ContentStringFormatProperty">
            <summary>ContentStringFormat 属性的 DependencyProperty。</summary> 
        </member>
        <member name="P:MahApps.Metro.Controls.DropDownButton.Content">
            <summary>获取或设置此控件的内容..</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.DropDownButton.ContentTemplate">
            <summary>ContentTemplate 是用于显示控件内容的模板。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.DropDownButton.ContentTemplateSelector">
            <summary>ContentTemplateSelector 允许提供自定义逻辑，用于选择用于显示控件内容的模板。</summary>
            <remarks>如果 <seealso cref="P:MahApps.Metro.Controls.DropDownButton.ContentTemplate"/> 已设定，则忽略此属性。</remarks>
        </member>
        <member name="P:MahApps.Metro.Controls.DropDownButton.ContentStringFormat">
            <summary>ContentStringFormat 是用于将控件的内容显示为字符串的格式</summary>
            <remarks>如果 <seealso cref="P:MahApps.Metro.Controls.DropDownButton.ContentTemplate"/> 已设定，则忽略此属性。</remarks>
        </member>
        <member name="P:MahApps.Metro.Controls.DropDownButton.CommandParameter">
            <summary>反映在执行时传递至 CommandProperty 的参数。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.DropDownButton.CommandTarget">
            <summary>获取或设置触发命令的目标元素。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.DropDownButton.Command">
            <summary>获取或设置 Command 属性。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.DropDownButton.IsExpanded">
            <summary>指出菜单是否可见。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.DropDownButton.ExtraTag">
            <summary>获取或设置一个额外标签。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.DropDownButton.Orientation">
            <summary>获取或设置子堆叠的维度。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.DropDownButton.Icon">
            <summary>获取或设置用于生成图标部件的内容。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.DropDownButton.IconTemplate">
            <summary>获取或设置用于显示图标部件内容的 ContentTemplate。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.DropDownButton.ButtonStyle">
            <summary>获取/设置按钮样式。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.DropDownButton.MenuStyle">
            <summary>获取/设置菜单样式。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.DropDownButton.ArrowBrush">
            <summary>获取/设置按钮箭头图标的画笔。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.DropDownButton.ArrowMouseOverBrush">
            <summary>如果鼠标位于下拉按钮上，则获取/设置按钮箭头图标的画笔。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.DropDownButton.ArrowPressedBrush">
            <summary>如果按下箭头按钮，则获取/设置按钮箭头图标的画笔。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.DropDownButton.ArrowVisibility">
            <summary>获取/设置按钮箭头图标的可见性。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.DropDownButton.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>调用的时候 <see cref="P:System.Windows.Controls.ItemsControl.Items" /> 属性更改。</summary>
            <param name="e">有关更改的信息。</param>
        </member>
        <member name="T:MahApps.Metro.Controls.FlipView">
            <summary>模仿带有后退/前进按钮的幻灯片放映控件。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.FlipView.loaded">
            <summary>抵消双重加载事件问题。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.FlipView.GoBack">
            <summary>将当前幻灯片更改为上一个项目。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.FlipView.GoForward">
            <summary>将当前幻灯片更改为下一个项目。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.FlipView.ShowControlButtons">
            <summary>将控制按钮（下一个/上一个）进入视图。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.FlipView.HideControlButtons">
            <summary>从视图中删除控制按钮（下一个/上一个）。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.FlipView.MouseHoverBorderEnabled">
            <summary>获取或设置一个值，该值指明是否启用了鼠标悬停状态边框。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.FlipView.MouseHoverBorderBrush">
            <summary>获取或设置鼠标悬停边框画笔。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.FlipView.MouseHoverBorderThickness">
            <summary>获取或设置鼠标悬停边框粗细。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.FlipView.BannerText">
            <summary>获取/设置 FlipView 标题中显示的文本。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.FlipView.IsBannerEnabled">
            <summary>获取/设置 FlipView 的横幅是否可见。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.FlipView.CircularNavigation">
            <summary>获取或设置一个值，该值指示导航是否为循环，因此您获得的第一个值在最后一个值之后，最后一个值在第一个值之前。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.FlipView.IsNavigationEnabled">
            <summary>获取/设置 FlipView 的 NavigationButton 是否可见。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Flyout">
            <summary>通过 FlyoutsControl 在 MetroWindow 中托管的滑动面板控件。 <see cref="T:MahApps.Metro.Controls.MetroWindow"/> <seealso cref="T:MahApps.Metro.Controls.FlyoutsControl"/></summary>
        </member>
        <member name="F:MahApps.Metro.Controls.Flyout.IsOpenChangedEvent">
            <summary>IsOpen 更改时引发的事件。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.Flyout.ClosingFinishedEvent">
            <summary>关闭播放完毕动画时引发的事件。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.TitleVisibility">
            <summary>获取/设置标题在此弹出控件中是否可见。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.CloseButtonVisibility">
            <summary>获取/设置是否在此弹出控件中显示关闭按钮。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.CloseButtonIsCancel">
            <summary>如果关闭按钮是此弹出控件中的取消按钮，则获取/设置。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.CloseCommand">
            <summary>获取/设置命令，如果单击关闭按钮将执行该命令。请注意，这不会执行时 <see cref="P:MahApps.Metro.Controls.Flyout.IsOpen"/> 被设置为 <c>false</c>。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.CloseCommandParameter">
            <summary>获取/设置将由 CloseCommand 传递的命令参数。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.InternalCloseCommand">
            <summary>获取/设置命令，如果单击关闭按钮将执行该命令。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.HeaderTemplate">
            <summary>弹出控件标题的 DataTemplate。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.IsOpen">
            <summary>获取/设置此弹出控件是否可见。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.AnimateOnPositionChange">
            <summary>获取/设置此弹出控件在更改时是否使用打开/关闭动画 <see cref="P:MahApps.Metro.Controls.Flyout.Position"/> 属性。（默认为 true）</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.AnimateOpacity">
            <summary>获取/设置此弹出控件在打开/关闭时是否设置弹出控件的不透明度。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.IsPinned">
            <summary>获取/设置当用户在其外部单击时，此弹出按钮是否保持打开状态。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.ExternalCloseButton">
            <summary>获取/设置鼠标按钮，在外部鼠标单击时关闭弹出控件。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.IsModal">
            <summary>获取/设置此弹出控件是否为模态。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.Position">
            <summary>获取/设置此弹出控件在 FlyoutsControl / MetroWindow 中的位置。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.Header">
            <summary>获取/设置弹出控件的标题。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.Theme">
            <summary>获取或设置此弹出控件的主题。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.FocusedElement">
            <summary>获取或设置焦点元素。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.IsAutoCloseEnabled">
            <summary>获取或设置一个值，该值指明在 AutoCloseInterval 传递后是否应自动关闭弹出控件。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.AutoCloseInterval">
            <summary>获取或设置弹出控件应自动关闭的时间（以毫秒为单位）。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.AllowFocusElement">
            <summary>获取或设置一个值，该值指明弹出控件是否应尝试聚焦元素。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.FlyoutsControl">
            <summary>FlyoutsControl 用于在 MetroWindow 中显示弹出控件。 <see cref="T:MahApps.Metro.Controls.MetroWindow"/></summary>
        </member>
        <member name="P:MahApps.Metro.Controls.FlyoutsControl.OverrideExternalCloseButton">
            <summary>获取/设置是否 <see cref="P:MahApps.Metro.Controls.Flyout.ExternalCloseButton"/> 被忽略，所有弹出控件的行为就像设置为此属性值。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.FlyoutsControl.OverrideIsPinned">
            <summary>获取/设置是否 <see cref="P:MahApps.Metro.Controls.Flyout.IsPinned"/> 被忽略，所有弹出控件的行为都像设置为 false。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.FlyoutTheme.Adapt">
            <summary>将弹出控件的主题调整为主窗口的主题。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.FlyoutTheme.Inverse">
            <summary>将弹出控件的主题调整为其主窗口的主题，但是倒排。仅当主持窗口的主题遵循“黑色”和“白色”词缀约定时，才能应用此主题。（更多信息参见 <see cref="M:MahApps.Metro.ThemeManager.GetInverseAppTheme(MahApps.Metro.AppTheme)"/>。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.FlyoutTheme.Dark">
            <summary>黑色主题。这是默认主题。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.FlyoutTheme.Accent">
            <summary>弹出控件主题将与主机窗口的强调色相匹配。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.GlowWindow">
            <summary>GlowWindow</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.GlowWindow.InitializeComponent">
            <summary>的 InitializeComponent</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.DataGridCellHelper.GetSaveDataGrid(System.Windows.UIElement)">
            <summary>保存 DataGrid。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.DataGridCellHelper.GetDataGrid(System.Windows.UIElement)">
            <summary>获取 DataGrid。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.DataGridCellHelper.GetSelectionUnit(System.Windows.UIElement)">
            <summary>获取用于定义 DataGridCell 选择行为的值。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.DataGridCellHelper.SetSelectionUnit(System.Windows.UIElement,System.Windows.Controls.DataGridSelectionUnit)">
            <summary>设置值以定义 DataGridCell 选择行为。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.DataGridCellHelper.GetIsCellOrRowHeader(System.Windows.UIElement)">
            <summary>获取用于定义 DataGridCell 选择行为的值。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.DataGridCellHelper.SetIsCellOrRowHeader(System.Windows.UIElement,System.Boolean)">
            <summary>设置值以定义 DataGridCell 选择行为。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.DataGridRowHelper.GetSelectionUnit(System.Windows.UIElement)">
            <summary>获取用于定义 DataGridRow 选择行为的值。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.DataGridRowHelper.SetSelectionUnit(System.Windows.UIElement,System.Windows.Controls.DataGridSelectionUnit)">
            <summary>设置值以定义 DataGridRow 选择行为。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.ExpanderHelper">
            <summary>帮助类程序，它为 Expander 控件提供各种附加属性。 <see cref="T:System.Windows.Controls.Expander"/></summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ExpanderHelper.GetHeaderUpStyle(System.Windows.UIElement)">
            <summary>获取用于 ExpandDirection Up 的切换按钮样式。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ExpanderHelper.SetHeaderUpStyle(System.Windows.UIElement,System.Windows.Style)">
            <summary>设置用于 ExpandDirection Up 的切换按钮样式。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ExpanderHelper.GetHeaderDownStyle(System.Windows.UIElement)">
            <summary>获取用于 ExpandDirection Down 的切换按钮样式。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ExpanderHelper.SetHeaderDownStyle(System.Windows.UIElement,System.Windows.Style)">
            <summary>设置用于 ExpandDirection Down 的切换按钮样式。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ExpanderHelper.GetHeaderLeftStyle(System.Windows.UIElement)">
            <summary>获取用于 ExpandDirection Left 的切换按钮样式。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ExpanderHelper.SetHeaderLeftStyle(System.Windows.UIElement,System.Windows.Style)">
            <summary>设置用于 ExpandDirection Left 的切换按钮样式。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ExpanderHelper.GetHeaderRightStyle(System.Windows.UIElement)">
            <summary>获取用于 ExpandDirection Right 的切换按钮样式。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ExpanderHelper.SetHeaderRightStyle(System.Windows.UIElement,System.Windows.Style)">
            <summary>设置用于 ExpandDirection Right 的切换按钮样式。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.MouseWheelChange.SmallChange">
            <summary>如果用户将鼠标滚轮旋转为定义的值，则更改滑块的值 <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange"/></summary>
        </member>
        <member name="F:MahApps.Metro.Controls.MouseWheelChange.LargeChange">
            <summary>如果用户将鼠标滚轮旋转为定义的值，则更改滑块的值 <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange"/></summary>
        </member>
        <member name="F:MahApps.Metro.Controls.MouseWheelState.None">
            <summary>如果用户旋转鼠标滚轮，请勿更改滑块的值。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.MouseWheelState.ControlFocused">
            <summary>仅在控件聚焦时才更改滑块的值。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.MouseWheelState.MouseHover">
            <summary>如果鼠标指针位于此元素上，则更改滑块的值。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.SliderHelper.GetChangeValueBy(System.Windows.Controls.Slider)">
            <summary>获取/设置用户旋转鼠标滚轮时如何更改值的类型。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.SliderHelper.SetChangeValueBy(System.Windows.Controls.Slider,MahApps.Metro.Controls.MouseWheelChange)">
            <summary>获取/设置用户旋转鼠标滚轮时如何更改值的类型。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.SliderHelper.GetEnableMouseWheel(System.Windows.Controls.Slider)">
            <summary>获取/设置滑块更改时的值。如果滑块已聚焦或鼠标位于滑块上方时，相应的可能值。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.SliderHelper.SetEnableMouseWheel(System.Windows.Controls.Slider,MahApps.Metro.Controls.MouseWheelState)">
            <summary>获取/设置滑块更改时的值。如果滑块已聚焦或鼠标位于滑块上方时，相应的可能值。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.TimePicker">
            <summary>表示允许用户选择时间的控件。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.TimePickerBase">
            <summary>表示时间选择的基类。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TimePickerBase.IsDatePickerVisiblePropertyKey">
            <summary>这个只读依赖属性是控制是否显示日期选择器（若是 <see cref="T:MahApps.Metro.Controls.DateTimePicker"/>）或隐藏它（若是） <see cref="T:MahApps.Metro.Controls.TimePicker"/>。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TimePickerBase.MinTimeOfDay">
            <summary>代表时间分别为 00:00:00 和凌晨12:00:00</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TimePickerBase.MaxTimeOfDay">
            <summary>代表时间分别为 23：59：59.9999999 和 11：59：59.9999999 PM</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TimePickerBase.IntervalOf5">
            <summary>此列表包含 0 到 55 之间的值，间隔为 5。它可以用来绑定 <see cref="P:MahApps.Metro.Controls.TimePickerBase.SourceMinutes"/> 和 <see cref="P:MahApps.Metro.Controls.TimePickerBase.SourceSeconds"/>。</summary>
            <example>
            <code>&lt;MahApps:TimePicker SourceSeconds=&quot;{x:Static MahApps:TimePickerBase.IntervalOf5}&quot; /&gt;</code>
            <code>&lt;MahApps:DateTimePicker SourceSeconds=&quot;{x:Static MahApps:TimePickerBase.IntervalOf5}&quot; /&gt;</code>
            </example>
            <returns>返回包含{0,5,10,15,20,25,30,35,40,45,50,55}的列表。</returns>
        </member>
        <member name="F:MahApps.Metro.Controls.TimePickerBase.IntervalOf10">
            <summary>此列表包含 0 到 50 之间的值，间隔为 10。它可以用来绑定 <see cref="P:MahApps.Metro.Controls.TimePickerBase.SourceMinutes"/> 和 <see cref="P:MahApps.Metro.Controls.TimePickerBase.SourceSeconds"/>。</summary>
            <example>
            <code>&lt;MahApps:TimePicker SourceSeconds=&quot;{x:Static MahApps:TimePickerBase.IntervalOf10}&quot; /&gt;</code>
            <code>&lt;MahApps:DateTimePicker SourceSeconds=&quot;{x:Static MahApps:TimePickerBase.IntervalOf10}&quot; /&gt;</code>
            </example>
            <returns>返回包含{0,10,20,30,40,50}的列表。</returns>
        </member>
        <member name="F:MahApps.Metro.Controls.TimePickerBase.IntervalOf15">
            <summary>此列表包含 0 到 45 之间的值，间隔为 15。它可以用来绑定 <see cref="P:MahApps.Metro.Controls.TimePickerBase.SourceMinutes"/> 和 <see cref="P:MahApps.Metro.Controls.TimePickerBase.SourceSeconds"/>。</summary>
            <example>
            <code>&lt;MahApps:TimePicker SourceSeconds=&quot;{x:Static MahApps:TimePickerBase.IntervalOf15}&quot; /&gt;</code>
            <code>&lt;MahApps:DateTimePicker SourceSeconds=&quot;{x:Static MahApps:TimePickerBase.IntervalOf15}&quot; /&gt;</code>
            </example>
            <returns>返回包含{0,15,30,45}的列表。</returns>
        </member>
        <member name="E:MahApps.Metro.Controls.TimePickerBase.SelectedTimeChanged">
            <summary>属性变更时执行<see cref="P:MahApps.Metro.Controls.TimePickerBase.SelectedTime" />。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.TimePickerBase.Culture">
            <summary>获取或设置一个值，该值指明在字符串格式设置操作中使用的区域性。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.TimePickerBase.HandVisibility">
            <summary>获取或设置一个值，该值指明时钟指针在用户界面 （UI） 中的可见性。</summary>
            <returns>时钟的可见性定义。默认为 <see cref="F:MahApps.Metro.Controls.TimePartVisibility.All" />。</returns>
        </member>
        <member name="P:MahApps.Metro.Controls.TimePickerBase.IsDatePickerVisible">
            <summary>获取或设置一个值，该值指明是否可以选择日期。此属性为只读。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.TimePickerBase.IsClockVisible">
            <summary>获取或设置一个值，该值指示此控件的时钟在用户界面 （UI） 中是否可见。这是依赖属性。</summary>
            <remarks>如果此值设置为 false，则 <see cref="T:System.Windows.Controls.Orientation" /> 被设置为 <see cref="F:System.Windows.Controls.Orientation.Vertical" /></remarks>
            <returns>如果时钟可见，则为 true;否则为 false。默认值为 true。</returns>
        </member>
        <member name="P:MahApps.Metro.Controls.TimePickerBase.IsDropDownOpen">
            <summary>获取或设置一个值，该值指明是否为下拉列表 <see cref="T:MahApps.Metro.Controls.TimePickerBase"/> 列表目前处于打开状态。</summary>
            <returns>如果下拉列表打开，则为 true;否则为 false。默认为 false。</returns>
        </member>
        <member name="P:MahApps.Metro.Controls.TimePickerBase.IsReadOnly">
            <summary>获取或设置一个值，该值指示是否包含不可编辑的内容 <see cref="T:MahApps.Metro.Controls.TimePickerBase" /> 。</summary>
            <returns>如果 <see cref="T:MahApps.Metro.Controls.TimePickerBase" /> 为只读，则为 true；否则，为 false。默认为 false。</returns>
        </member>
        <member name="P:MahApps.Metro.Controls.TimePickerBase.PickerVisibility">
            <summary>获取或设置一个值，该值指明用户界面 （UI） 中可选日期时间部分的可见性。</summary>
            <returns>可选日期时间部分的可见性定义。默认为 <see cref="F:MahApps.Metro.Controls.TimePartVisibility.All" />。</returns>
        </member>
        <member name="P:MahApps.Metro.Controls.TimePickerBase.SelectedTime">
            <summary>获取或设置当前选定的时间。</summary>
            <returns>当前选择的时间。默认为 null。</returns>
        </member>
        <member name="P:MahApps.Metro.Controls.TimePickerBase.SourceHours">
            <summary>获取或设置用于生成用于选择小时的内容集合。</summary>
            <returns>用于生成用于选择小时的内容集合。如果是，则默认为0到23之间的整数列表 <see cref="P:MahApps.Metro.Controls.TimePickerBase.IsMilitaryTime" /> 是 false 或1到12的整数列表，则..</returns>
        </member>
        <member name="P:MahApps.Metro.Controls.TimePickerBase.SourceMinutes">
            <summary>获取或设置用于生成用于选择分钟的内容集合。</summary>
            <returns>用于生成用于选择分钟的内容集合。默认值为 0 到59之间的 int 列表。</returns>
        </member>
        <member name="P:MahApps.Metro.Controls.TimePickerBase.SourceSeconds">
            <summary>获取或设置用于生成用于选择秒的内容集合。</summary>
            <returns>用于生成用于选择分钟的内容集合。默认值为 0 到59之间的 int 列表。</returns>
        </member>
        <member name="P:MahApps.Metro.Controls.TimePickerBase.IsMilitaryTime">
            <summary>获取一个指明是否的值 <see cref="P:System.Globalization.DateTimeFormatInfo.AMDesignator" /> 由...指定 <see cref="T:System.Globalization.CultureInfo" /> 由...设定 <see cref="P:MahApps.Metro.Controls.TimePickerBase.Culture" /> （<see cref="P:System.Windows.FrameworkElement.Language" /> 如果为null）没有值。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.TimePickerBase.OnApplyTemplate">
            <summary>在派生类程序中重写时，只要应用程序代码或内部进程调用，就可以进行调用 <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.TimePickerBase.GetAmPmOffset(System.Int32)">
            <summary>获取所选的偏移量 <paramref name="currentHour" /> 使用它 <see cref="T:System.TimeSpan" /> 作为小时参数。</summary>
            <param name="currentHour">当前小时时间。</param>
            <returns>整数，表示要添加到小时选择器中选择的小时以设置正确的偏移量 <see cref="P:System.DateTime.TimeOfDay" />。偏移量确定如下：<list type="table"><listheader><term>条件</term><description>抵消</description></listheader> <item><term><see cref="P:MahApps.Metro.Controls.TimePickerBase.IsMilitaryTime" /> 是 false</term><description>0</description></item> <item><term>所选时间为凌晨 1 点至 11 点</term><description>0</description></item> <item><term>选定的时间是上午 12 点</term><description>-12 小时</description></item> <item><term>所选时间为下午 12 点至晚上 11 点</term><description>+12 小时</description></item></list></returns>
        </member>
        <member name="T:MahApps.Metro.Controls.MetroAnimatedSingleRowTabControl">
            <summary>MetroTabControl（Pivot），它将 TabItem / MetroTabItem 标题包装在一行上。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroAnimatedSingleRowTabControl.#ctor">
            <summary>初始化 MahApps.Metro.Controls.MetroAnimatedSingleRowTabControl 类的新实例。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.MetroAnimatedTabControl">
            <summary>MetroTabControl （Pivot），它使用 TransitioningContentControl 为 TabItem / MetroTabItem 的内容设置动画。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroAnimatedTabControl.#ctor">
            <summary>初始化 MahApps.Metro.Controls.MetroAnimatedTabControl 类的新实例。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.MetroNavigationWindow">
            <summary>基于 MetroWindow 重新实现 NavigationWindow。</summary><see cref="T:System.Windows.Navigation.NavigationWindow"/><summary>MetroNavigationWindow</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroNavigationWindow.ForwardStack">
            <summary>获取一个 Ienumerable，用于枚举 NavigationWindow 的后导航历史记录中的条目。</summary><see cref="P:System.Windows.Navigation.NavigationWindow.ForwardStack"/></member>
        <member name="P:MahApps.Metro.Controls.MetroNavigationWindow.BackStack">
            <summary>获取一个 Ienumerable，用于枚举 NavigationWindow 的后导航历史记录中的条目。</summary><see cref="P:System.Windows.Navigation.NavigationWindow.BackStack"/></member>
        <member name="P:MahApps.Metro.Controls.MetroNavigationWindow.NavigationService">
            <summary>获取此 MetroNavigationWindow 用于为其内容提供导航服务的 NavigationService。</summary><see cref="P:System.Windows.Navigation.NavigationWindow.NavigationService"/></member>
        <member name="P:MahApps.Metro.Controls.MetroNavigationWindow.CanGoBack">
            <summary>获取一个值，该值指明后退导航历史记录中是否至少有一个条目。</summary><see cref="P:System.Windows.Navigation.NavigationWindow.CanGoBack"/></member>
        <member name="P:MahApps.Metro.Controls.MetroNavigationWindow.CanGoForward">
            <summary>获取一个值，该值指示前进导航历史记录中是否至少有一个条目。</summary><see cref="P:System.Windows.Navigation.NavigationWindow.CanGoForward"/></member>
        <member name="P:MahApps.Metro.Controls.MetroNavigationWindow.System#Windows#Markup#IUriContext#BaseUri">
            <summary>获取或设置当前上下文的基本统一资源标识符 （URI）。</summary><see cref="P:System.Windows.Markup.IUriContext.BaseUri"/></member>
        <member name="P:MahApps.Metro.Controls.MetroNavigationWindow.Source">
            <summary>获取或设置当前内容的统一资源标识符 （URI），或当前导航到的新内容 URI。</summary><see cref="P:System.Windows.Navigation.NavigationWindow.Source"/></member>
        <member name="M:MahApps.Metro.Controls.MetroNavigationWindow.AddBackEntry(System.Windows.Navigation.CustomContentState)">
            <summary>添加包含 CustomContentState对象的返回导航历史记录的条目。</summary>
            <param name="state">CustomContentState 对象，表示与特定内容关联的应用程序定义状态。</param><see cref="M:System.Windows.Navigation.NavigationWindow.AddBackEntry(System.Windows.Navigation.CustomContentState)"/></member>
        <member name="M:MahApps.Metro.Controls.MetroNavigationWindow.RemoveBackEntry">
            <summary>从历史记录中删除最新的日记项目分录。</summary>
            <returns>若有，则为返回导航记录中最新的 JournalEntry。</returns><see cref="M:System.Windows.Navigation.NavigationWindow.RemoveBackEntry"/></member>
        <member name="M:MahApps.Metro.Controls.MetroNavigationWindow.GoBack">
            <summary>导航到返回导航历史记录中的最新项目。</summary><see cref="M:System.Windows.Navigation.NavigationWindow.GoBack"/></member>
        <member name="M:MahApps.Metro.Controls.MetroNavigationWindow.GoForward">
            <summary>导航到前进导航历史记录中的最新项目。</summary><see cref="M:System.Windows.Navigation.NavigationWindow.GoForward"/></member>
        <member name="M:MahApps.Metro.Controls.MetroNavigationWindow.Navigate(System.Object)">
            <summary>异步导航到对象包含的内容。</summary>
            <param name="content">包含要导航到的内容的 Object。</param>
            <returns>如果未取消导航，则为 true;否则为 false。</returns><see cref="M:System.Windows.Navigation.NavigationWindow.Navigate(System.Object)"/></member>
        <member name="M:MahApps.Metro.Controls.MetroNavigationWindow.Navigate(System.Uri)">
            <summary>异步导航到统一资源标识符 （URI） 指定的内容。</summary>
            <param name="source">使用所需内容的 URI 初始化 Uri 对象。</param>
            <returns>如果未取消导航，则为 true;否则为 false。</returns><see cref="M:System.Windows.Navigation.NavigationWindow.Navigate(System.Uri)"/></member>
        <member name="M:MahApps.Metro.Controls.MetroNavigationWindow.Navigate(System.Object,System.Object)">
            <summary>异步导航到对象包含的内容，并传递包含要在导航期间用于处理的数据的对象。</summary>
            <param name="content">包含要导航到的内容的 Object。</param>
            <param name="extraData">包含要在导航期间处理的数据的对象。</param>
            <returns>如果未取消导航，则为 true;否则为 false。</returns><see cref="M:System.Windows.Navigation.NavigationWindow.Navigate(System.Object,System.Object)"/></member>
        <member name="M:MahApps.Metro.Controls.MetroNavigationWindow.Navigate(System.Uri,System.Object)">
            <summary>异步导航至位于统一资源标识符 （URI） 的源内容，并传递包含要在导航期间用于处理的数据的对象。</summary>
            <param name="source">使用所需内容的 URI 初始化 Uri 对象。</param>
            <param name="extraData">包含要在导航期间处理的数据的对象。</param>
            <returns>如果未取消导航，则为 true;否则为 false。</returns><see cref="M:System.Windows.Navigation.NavigationWindow.Navigate(System.Uri,System.Object)"/></member>
        <member name="M:MahApps.Metro.Controls.MetroNavigationWindow.StopLoading">
            <summary>停止继续下载当前导航请求的内容。</summary><see cref="M:System.Windows.Navigation.NavigationWindow.StopLoading"/></member>
        <member name="E:MahApps.Metro.Controls.MetroNavigationWindow.FragmentNavigation">
            <summary>若所需片段在当前内容中，则在开始导航至内同片段时立即发生；若所需片段在不同内容中，则在加载 XAML 内容后再发生。</summary><see cref="E:System.Windows.Navigation.NavigationWindow.FragmentNavigation"/></member>
        <member name="E:MahApps.Metro.Controls.MetroNavigationWindow.Navigating">
            <summary>请求新导航时发生。</summary><see cref="E:System.Windows.Navigation.NavigationWindow.Navigating"/></member>
        <member name="E:MahApps.Metro.Controls.MetroNavigationWindow.NavigationFailed">
            <summary>导航至请求内容且引发错误时发生。</summary><see cref="E:System.Windows.Navigation.NavigationWindow.NavigationFailed"/></member>
        <member name="E:MahApps.Metro.Controls.MetroNavigationWindow.NavigationProgress">
            <summary>在下载期间定期发生，以提供导航进度信息。</summary><see cref="E:System.Windows.Navigation.NavigationWindow.NavigationProgress"/></member>
        <member name="E:MahApps.Metro.Controls.MetroNavigationWindow.NavigationStopped">
            <summary>调用 StopLoading 方法，在调用 StopLoading 方法或请求新导航时发生</summary><see cref="E:System.Windows.Navigation.NavigationWindow.NavigationStopped"/></member>
        <member name="E:MahApps.Metro.Controls.MetroNavigationWindow.Navigated">
            <summary>在找到要导航到的内容时发生，并且可以从 PageContent 属性获得，尽管它可能尚未完成加载</summary><see cref="E:System.Windows.Navigation.NavigationWindow.Navigated"/></member>
        <member name="E:MahApps.Metro.Controls.MetroNavigationWindow.LoadCompleted">
            <summary>已加载和解析导航到的内容，并在开始渲染时发生。</summary><see cref="E:System.Windows.Navigation.NavigationWindow.LoadCompleted"/></member>
        <member name="M:MahApps.Metro.Controls.MetroNavigationWindow.InitializeComponent">
            <summary>的 InitializeComponent</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.MetroProgressBar">
            <summary>一个 metrofied ProgressBar。 <see cref="T:System.Windows.Controls.ProgressBar"/></summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroProgressBar.EllipseDiameter">
            <summary>获取/设置不确定动画中使用的省略号的直径。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroProgressBar.EllipseOffset">
            <summary>获取/设置不确定动画中使用的省略号的偏移量。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.MetroTabControl">
            <summary>标准 的MetroTabControl（Pivot）。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroTabControl.#ctor">
            <summary>初始化 MahApps.Metro.Controls.MetroTabControl 类的新实例。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.BaseMetroTabControl">
            <summary>每个 MetroTabControl（Pivot） 的基类。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.BaseMetroTabControl.CloseTabCommand">
            <summary>获取/设置单击 MetroTabItem 的关闭按钮时执行的命令。</summary>
        </member>
        <member name="E:MahApps.Metro.Controls.BaseMetroTabControl.TabItemClosingEvent">
            <summary>TabItem 关闭时引发的事件。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.BaseMetroTabControl.TabItemClosingEventArgs">
            <summary>TabItem 关闭时创建的事件参数。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.BaseMetroTabControl.TabItemClosingEventArgs.ClosingTabItem">
            <summary>获取将要关闭的 MetroTabItem。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.MetroTabItem">
            <summary>具有 metro 风格的扩展 TabItem。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroTabItem.CloseButtonEnabled">
            <summary>获取/设置“关闭”按钮是否可见。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroTabItem.InternalCloseTabCommand">
            <summary>获取/设置单击“关闭”按钮时执行的命令。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroTabItem.CloseTabCommand">
            <summary>获取/设置单击“关闭”按钮时执行的命令。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroTabItem.CloseTabCommandParameter">
            <summary>获取/设置传递给关闭按钮命令的命令参数。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.MetroWindowHelpers">
            <summary>这堂课了解子窗口。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroWindowHelpers.SetIsHitTestVisibleInChromeProperty``1(MahApps.Metro.Controls.MetroWindow,System.String,System.Boolean)">
            <summary>将 IsHitTestVisibleInChromeProperty 设置为 MetroWindow 模板子项</summary>
            <param name="window">MetroWindow。</param>
            <param name="name">模板子项的名称。</param>
            <param name="hitTestVisible"></param>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroWindowHelpers.SetWindowChromeResizeGripDirection(MahApps.Metro.Controls.MetroWindow,System.String,Microsoft.Windows.Shell.ResizeGripDirection)">
            <summary>将 WindowChrome ResizeGripDirection 设置为 MetroWindow 模板子项。</summary>
            <param name="window">MetroWindow。</param>
            <param name="name">模板子项的名称。</param>
            <param name="direction">方向。</param>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroWindowHelpers.HandleWindowCommandsForFlyouts(MahApps.Metro.Controls.MetroWindow,System.Collections.Generic.IEnumerable{MahApps.Metro.Controls.Flyout},System.Windows.Media.Brush)">
            <summary>将 WindowCommands 调整为第一个打开，最顶部的&amp;&amp;（顶部||右侧||左侧）弹出控件的主题</summary>
            <param name="window">MetroWindow</param>
            <param name="flyouts">所有的弹出控件！或者弹出控件属于摘要中描述的类别。</param>
            <param name="resetBrush">可选画笔，用于重置窗口命令刷到。</param>
        </member>
        <member name="T:MahApps.Metro.Controls.NumericUpDown">
            <summary>表示显示数值的 Windows 旋转框（也称为上下控件）。</summary>
        </member>
        <member name="E:MahApps.Metro.Controls.NumericUpDown.MaximumReached">
            <summary>当其值已达到最大值时，从此 NumericUpDown 触发事件</summary>
        </member>
        <member name="E:MahApps.Metro.Controls.NumericUpDown.MinimumReached">
            <summary>当其值已达到最小值时，从此 NumericUpDown 触发事件</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.Delay">
            <summary>获取或设置时间量，针对指定的 <see cref="P:MahApps.Metro.Controls.NumericUpDown.Interval" /> ，在其开始增加/减少前 <see cref="P:MahApps.Metro.Controls.NumericUpDown.Value" /> 按下向上/向下按钮时等待的时间量（以毫秒为单位）。该值必须非负。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.InterceptArrowKeys">
            <summary>获取或设置一个值，该值指明用户是否可以使用箭头键 <see cref="F:System.Windows.Input.Key.Up"/> 和 <see cref="F:System.Windows.Input.Key.Down"/> 改变数值。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.InterceptMouseWheel">
            <summary>获取或设置一个值，该值指明用户是否可以使用鼠标滚轮更改值。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.TrackMouseWheelWhenMouseOver">
            <summary>获取或设置一个值，该值指明控件是否必须具有焦点才能使用鼠标滚轮更改值。<remarks>如果该值为 true，则当鼠标滚轮位于控件上时，该值会更改。如果值为 false，则仅当控件具有焦点时，值才会更改。如果 <see cref="P:MahApps.Metro.Controls.NumericUpDown.InterceptMouseWheel"/> 设置为“false”然后此属性无效。</remarks>
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.InterceptManualEnter">
            <summary>获取或设置一个值，该值指明用户是否可以在控件中输入文本。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.Culture">
            <summary>获取或设置一个值，该值指明在字符串格式设置操作中使用的区域性。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.HideUpDownButtons">
            <summary>获取或设置一个值，该值指示控件的/  - 按钮是否可见。</summary>
            <remarks>如果值为 false 则为 <see cref="P:MahApps.Metro.Controls.NumericUpDown.Value" /> 仅当满足以下一种情况时，才能更改控件的值： <list type="bullet"><item><description><see cref="P:MahApps.Metro.Controls.NumericUpDown.InterceptArrowKeys" /> 为 true。</description></item> <item><description><see cref="P:MahApps.Metro.Controls.NumericUpDown.InterceptMouseWheel" /> 为 true。</description></item> <item><description><see cref="P:MahApps.Metro.Controls.NumericUpDown.InterceptManualEnter" /> 为 true。</description></item></list></remarks>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.IsReadOnly">
            <summary>获取或设置一个值，该值指明是否可以仅使用向上或向下按钮更改文本。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.Speedup">
            <summary>获取或设置一个值，该值指明为添加的值或从中减去的值 <see cref="P:MahApps.Metro.Controls.NumericUpDown.Value" /> 永远都是 <see cref="P:MahApps.Metro.Controls.NumericUpDown.Interval" /> 或者如果按下向上/向下按钮/箭头一段时间后，它会增加得更快。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.StringFormat">
            <summary>获取或设置显示的格式 <see cref="P:MahApps.Metro.Controls.NumericUpDown.Value" /></summary>
            <remarks><see href="http://msdn.microsoft.com/zh-cn/library/dwhawy9k.aspx"></see></remarks>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.TextAlignment">
            <summary>获取或设置文本框内容的水平对齐方式。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.HasDecimals">
            <summary>指明 NumericUpDown 是否应显示小数分隔符。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.NumericUpDown.OnGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>当此元素或任何下面的元素获得焦点时调用。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.NumericUpDown.OnApplyTemplate">
            <summary>在派生类程序中重写时，只要应用程序代码或内部进程调用，就可以进行调用 <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.NumericUpDown.OnValueChanged(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>提高了 <see cref="E:MahApps.Metro.Controls.NumericUpDown.ValueChanged" /> 路线事件。</summary>
            <param name="oldValue">旧值 <see cref="P:MahApps.Metro.Controls.NumericUpDown.Value" /> 属性</param>
            <param name="newValue">新值 <see cref="P:MahApps.Metro.Controls.NumericUpDown.Value" /> 属性</param>
        </member>
        <member name="T:MahApps.Metro.Controls.Position">
            <summary>表示不同位置的枚举，例如左或右。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.PropertyChangeNotifier">
            <summary>正如您所知，依赖项属性描述符的 AddValueChanged 会导致内存泄漏。因此，如此处所述，您可以创建自定义类 PropertyChangeNotifier 来听取任何依赖项属性更改。此类程序利用了绑定使用弱引用来管理关联这一事实，因此这类程序不会根据它正在观察的属性更改对象。它还使用 WeakReference 来维护对正在监视其属性的对象的引用，而不会使该对象生根。、通过这种方式，您可以维护这些对象的集合，以便以后可以取消对属性的更改，同时不必担心根据您正在观察其值的对象生成该集合。完整实现请参考：http：//agsmith.wordpress.com/2008/04/07/propertydescriptor-addvaluechanged-alternative/</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.PropertyChangeNotifier.ValueProperty">
            <summary>识别 <see cref="P:MahApps.Metro.Controls.PropertyChangeNotifier.Value"/> 依赖属性</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.PropertyChangeNotifier.Value">
            <summary>返回/设置属性的值</summary><seealso cref="F:MahApps.Metro.Controls.PropertyChangeNotifier.ValueProperty"/></member>
        <member name="F:MahApps.Metro.Controls.ScrollBarHelper.VerticalScrollBarOnLeftSideProperty">
            <summary>此属性可用于从 tabpanel 设置垂直滚动条左侧（查看 MetroAnimatedSingleRowTabControl）</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.SplitButton.CommandParameter">
            <summary>反映在执行时传递至 CommandProperty 的参数。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.SplitButton.CommandTarget">
            <summary>获取或设置触发命令的目标元素。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.SplitButton.Command">
            <summary>获取或设置 Command 属性。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.SplitButton.IsExpanded">
            <summary>指示弹出窗口是否可见。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.SplitButton.ExtraTag">
            <summary>获取或设置一个额外标签。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.SplitButton.Orientation">
            <summary>获取或设置子堆叠的维度。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.SplitButton.Icon">
            <summary>获取或设置用于生成图标部件的内容。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.SplitButton.IconTemplate">
            <summary>获取或设置用于显示图标部件内容的 ContentTemplate。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.SplitButton.ButtonStyle">
            <summary>获取/设置按钮样式。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.SplitButton.ButtonArrowStyle">
            <summary>获取/设置按钮箭头样式。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.SplitButton.ListBoxStyle">
            <summary>获取/设置弹出列表框样式。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.SplitButton.ArrowBrush">
            <summary>获取/设置按钮箭头图标的画笔。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.SplitButton.ArrowMouseOverBrush">
            <summary>如果鼠标位于拆分按钮上，则获取/设置按钮箭头图标的画笔。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.SplitButton.ArrowPressedBrush">
            <summary>如果按下箭头按钮，则获取/设置按钮箭头图标的画笔。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.SplitButton.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>更新当前选择时的项目 <see cref="T:System.Windows.Controls.Primitives.Selector" /> 已改变</summary>
            <param name="e">事件数据。</param>
        </member>
        <member name="F:MahApps.Metro.Controls.TabControlHelper.IsUnderlinedProperty">
            <summary>定义下划线 <see cref="T:System.Windows.Controls.TabControl"/> 是否显示。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TabControlHelper.TransitionProperty">
            <summary>此属性可用于为动画 TabControls 设置 Transition</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.ToggleButtonHelper.ContentDirectionProperty">
            <summary>此属性可用于处理 CheckBox 和 RadioButton 的样式，LeftToRight 表示内容左侧和右侧按钮，RightToLeft 表示反向</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ToggleButtonHelper.GetContentDirection(System.Windows.UIElement)">
            <summary>此属性可用于处理 CheckBox 和 RadioButton 的样式，LeftToRight 表示内容左侧和右侧按钮，RightToLeft 表示反向</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Theme">
            <summary>Enum 表示窗口命令的不同主题。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.WindowButtonCommands.LightMinButtonStyle">
            <summary>获取或设置指示最小化按钮的当前白色样式的值。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.WindowButtonCommands.LightMaxButtonStyle">
            <summary>获取或设置指示最大化按钮的当前白色样式的值。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.WindowButtonCommands.LightCloseButtonStyle">
            <summary>获取或设置指示关闭按钮的当前白色样式的值。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.WindowButtonCommands.DarkMinButtonStyle">
            <summary>获取或设置指示最小化按钮的当前黑色样式的值。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.WindowButtonCommands.DarkMaxButtonStyle">
            <summary>获取或设置指示最大化按钮的当前黑色样式的值。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.WindowButtonCommands.DarkCloseButtonStyle">
            <summary>获取或设置指示关闭按钮的当前黑色样式的值。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.WindowButtonCommands.Theme">
            <summary>获取或设置指示当前主题的值。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.WindowButtonCommands.Minimize">
            <summary>获取或设置最小化按钮工具提示。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.WindowButtonCommands.Maximize">
            <summary>获取或设置最大化按钮工具提示。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.WindowButtonCommands.Close">
            <summary>获取或设置关闭按钮工具提示。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.WindowButtonCommands.Restore">
            <summary>获取或设置还原按钮工具提示。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.WindowCommandsOverlayBehavior.Never">
            <summary>不覆盖弹出控件或隐藏的 TitleBar。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.WindowCommandsOverlayBehavior.Flyouts">
            <summary>打开覆盖图 <see cref="T:MahApps.Metro.Controls.Flyout"/> 控制。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.WindowCommandsOverlayBehavior.HiddenTitleBar">
            <summary>覆盖隐藏的 TitleBar。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Planerator">
            <summary>基于 Greg Schechter 的 Planerator http://blogs.msdn.com/b/greg_schechter/archive/2007/10/26/enter-the-planerator-dead-simple-3d-in-wpf-with-a-stupid-name的.aspx</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.RangeSelectionChangedEventArgs">
            <summary>为 RangeSlider 的 SelectionChanged 事件创建的事件参数。 <see cref="T:MahApps.Metro.Controls.RangeSlider"/></summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSelectionChangedEventArgs.NewLowerValue">
            <summary>新范围的起始值。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSelectionChangedEventArgs.NewUpperValue">
            <summary>新范围的结束值。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.RangeSlider">
            <summary>滑块控件，可以选择两个值之间的范围。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.Interval">
            <summary>获取/设置当用户使用鼠标左键按下左/右/中央时，拇指的移动速度（IsMoveToPoint 必须设置为 FALSE）</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.AutoToolTipPrecision">
            <summary>获取/设置值的精度会显示在 AutotToolTip 中</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.AutoToolTipTextConverter">
            <summary>获取/设置工具提示文本的转换器</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.AutoToolTipPlacement">
            <summary>获取/设置工具提示，在拖动拇指和显示当前值时显示</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.TickPlacement">
            <summary>获取/设置刻度线放置位置</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.IsMoveToPointEnabled">
            <summary>获取/设置 IsMoveToPoint 功能，该功能将在用户单击时启用/禁用移动到控件内的精确点</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.TickFrequency">
            <summary>获取/设置 tickFrequency</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.Orientation">
            <summary>获取/设置范围滑块的方向</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.IsSnapToTickEnabled">
            <summary>获取/设置是否可以使用左/右鼠标按钮 cotrol 按钮在范围内进行操作</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.ExtendedMode">
            <summary>获取/设置是否可以使用左/右鼠标按钮 cotrol 按钮在范围内进行操作</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.MoveWholeRange">
            <summary>获取/设置当按下控制器的右/左/中央部分时是否移动整个范围</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.MinRangeWidth">
            <summary>获取/设置两个拇指之间的最小距离。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.LowerValue">
            <summary>获取/设置范围选择的开始值。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.UpperValue">
            <summary>获取/设置范围选择的结束值。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.MinRange">
            <summary>获取/设置可以选择的最小范围。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.RangeSlider.OnMinimumChanged(System.Double,System.Double)">
            <summary>回应值的变化 <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"/> 属性。</summary>
            <param name="oldMinimum">旧值 <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"/> 属性。</param><param name="newMinimum">新值 <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"/> 属性。</param>
        </member>
        <member name="M:MahApps.Metro.Controls.RangeSlider.OnMaximumChanged(System.Double,System.Double)">
            <summary>回应值的变化 <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum"/> 属性。</summary>
            <param name="oldMaximum">旧值 <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum"/> 属性。</param><param name="newMaximum">新值 <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum"/> 属性。</param>
        </member>
        <member name="T:MahApps.Metro.Controls.TextBoxHelper">
            <summary>帮助类程序，它为 TextBox 控件提供各种附加属性。</summary>
            <remarks>密码水印代码来自：http：//prabu-guru.blogspot.com/2010/06/how-to-add-watermark-text-to-textbox.html</remarks>
        </member>
        <member name="F:MahApps.Metro.Controls.TextBoxHelper.IsClearTextButtonBehaviorEnabledProperty">
            <summary>明文按钮行为属性。如果值为 true，它会将按钮事件设置为按钮。</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TextBoxHelper.ButtonWidthProperty">
            <summary>此属性可用于设置 TextBox，PasswordBox，ComboBox，NumericUpDown 的按钮宽度（PART_ClearText）</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.TextBoxHelper.GetIsSpellCheckContextMenuEnabled(System.Windows.UIElement)">
            <summary>指示 TextBox 或 RichTextBox 是否应使用 SpellCheck 上下文菜单</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.TextBoxHelper.GetHasText(System.Windows.DependencyObject)">
            <summary>获取附加的 TextBox 是否包含文本。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.TextBoxHelper.GetClearTextButton(System.Windows.DependencyObject)">
            <summary>获取明文按钮可见性/功能。可用于启用文本删除。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.TextBoxHelper.SetClearTextButton(System.Windows.DependencyObject,System.Boolean)">
            <summary>设置明文按钮可见性/功能。可用于启用文本删除。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.TextBoxHelper.GetTextButton(System.Windows.DependencyObject)">
            <summary>获取文本按钮可见性。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.TextBoxHelper.SetTextButton(System.Windows.DependencyObject,System.Boolean)">
            <summary>设置文本按钮可见性。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.TextBoxHelper.GetButtonsAlignment(System.Windows.DependencyObject)">
            <summary>获取按钮放置变体。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.TextBoxHelper.SetButtonsAlignment(System.Windows.DependencyObject,MahApps.Metro.Controls.ButtonsAlignment)">
            <summary>设置按钮放置变体。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.TextBoxHelper.GetIsClearTextButtonBehaviorEnabled(System.Windows.Controls.Button)">
            <summary>获取明文按钮行为。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.TextBoxHelper.SetIsClearTextButtonBehaviorEnabled(System.Windows.Controls.Button,System.Boolean)">
            <summary>设置明文按钮行为。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.TextBoxHelper.GetButtonContentTemplate(System.Windows.DependencyObject)">
            <summary>ButtonContentTemplate 是用于显示 ClearText 按钮内容的模板。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.ToggleSwitchButton">
            <summary>允许用户在两种状态之间切换的按钮。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitchButton.SwitchForeground">
            <summary>获取/设置用于控件前景的画笔。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitchButton.OnSwitchBrush">
            <summary>获取/设置用于 on-switch 前景的画笔。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitchButton.OffSwitchBrush">
            <summary>获取/设置用于 off-switch 前景的画笔。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitchButton.ThumbIndicatorBrush">
            <summary>获取/设置用于拇指指示器的画笔。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitchButton.ThumbIndicatorDisabledBrush">
            <summary>获取/设置用于拇指指示器的画笔。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitchButton.ThumbIndicatorWidth">
            <summary>获取/设置拇指指示器的宽度。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.TransitionType">
            <summary>不同转换类型的枚举</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TransitionType.Default">
            <summary>使用 VisualState DefaultTransition</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TransitionType.Normal">
            <summary>使用 VisualState Normal</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TransitionType.Up">
            <summary>使用 VisualState UpTransition</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TransitionType.Down">
            <summary>使用 VisualState DownTransition</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TransitionType.Right">
            <summary>使用 VisualState RightTransition</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TransitionType.RightReplace">
            <summary>使用 VisualState RightReplaceTransition</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TransitionType.Left">
            <summary>使用 VisualState LeftTransition</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TransitionType.LeftReplace">
            <summary>使用 VisualState LeftReplaceTransition</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TransitionType.Custom">
            <summary>使用自定义 VisualState，必须使用 CustomVisualStatesName 属性设置名称</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.TransitioningContentControl">
            <summary>ContentControl 在加载和卸载内容时为内容设置动画。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.TransitioningContentControl.CustomVisualStatesName">
            <summary>获取或设置自定义转换可视状态的名称。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.TransitioningContentControl.IsTransitioning">
            <summary>获取/设置内容是否正在转换。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.TransitioningContentControl.ReloadTransition">
            <summary>若内容相同，则重新加载当前转换。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.TreeHelper">
            <summary>用于 UI 相关任务的帮助方法。本课程来自 Philip Sumi（WPF Disciples 博客）http://www.hardcodet.net/uploads/2009/06/UIHelper.cs</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.TreeHelper.TryFindParent``1(System.Windows.DependencyObject)">
            <summary>在可视树上查找给定项的父级。</summary>
            <typeparam name="T">查询项的类型。</typeparam>
            <param name="child">查询项目的直接或间接子项。</param>
            <returns>与提交的类型参数匹配的第一个父项。如果找不到匹配项，则返回空引用。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.TreeHelper.FindChild``1(System.Windows.DependencyObject,System.String)">
            <summary>在可视树中查找给定项的子项。</summary>
            <param name="parent">查询项的直接父项。</param>
            <typeparam name="T">查询项的类型。</typeparam>
            <param name="childName">x：子项名称。</param>
            <returns>与提交的类型参数匹配的第一个父项。如果找不到匹配项，则返回空父项。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.TreeHelper.GetParentObject(System.Windows.DependencyObject)">
            <summary>这种方法是 WPF 方法的替代方法 <see cref="M:System.Windows.Media.VisualTreeHelper.GetParent(System.Windows.DependencyObject)"/> ，也支持内容元素。请记住，针对 content 元素，此方法将回退到元素的逻辑树！</summary>
            <param name="child">待处理项。</param>
            <returns>已提交项目的父项（如果可用）。否则为 null。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.TreeHelper.FindChildren``1(System.Windows.DependencyObject,System.Boolean)">
            <summary>分析视觉树和逻辑树，以便找到作为后代给定类型的所有元素 <paramref name="source"/> 项目。</summary>
            <typeparam name="T">查询项的类型。</typeparam>
            <param name="source">标记搜索源的根元素。如果源已经是请求类型，则不会包含在结果中。</param>
            <param name="forceUsingTheVisualTreeHelper">有时在 VisualTree 中搜索更好（例如在测试中）</param>
            <returns>所有的后代 <paramref name="source"/> 匹配请求的类型。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.TreeHelper.GetChildObjects(System.Windows.DependencyObject,System.Boolean)">
            <summary>这种方法是 WPF 方法的替代方法 <see cref="M:System.Windows.Media.VisualTreeHelper.GetChild(System.Windows.DependencyObject,System.Int32)"/> ，也支持内容元素。请记住，针对内容元素，此方法将回退到元素的逻辑树。</summary>
            <param name="parent">待处理项。</param>
            <param name="forceUsingTheVisualTreeHelper">有时在 VisualTree 中搜索更好（例如在测试中）</param>
            <returns>已提交项目的子元素（如果可用）。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.TreeHelper.TryFindFromPoint``1(System.Windows.UIElement,System.Windows.Point)">
            <summary>尝试在可视树中定位给定项，从给定位置的依赖项对象开始。</summary>
            <typeparam name="T">在给定位置元素的可视树上找到的元素的类型。</typeparam>
            <param name="reference">用于执行命中测试的主要元素。</param>
            <param name="point">要对原点进行评估的位置。</param>
        </member>
        <member name="P:MahApps.Metro.Controls.WindowCommands.Theme">
            <summary>获取或设置指示当前主题的值。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.WindowCommands.LightTemplate">
            <summary>获取或设置指示白色主题模板的值。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.WindowCommands.DarkTemplate">
            <summary>获取或设置指示白色主题模板的值。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.WindowCommands.ShowSeparators">
            <summary>获取或设置指示是否显示分隔符的值。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.WindowCommands.ShowLastSeparator">
            <summary>获取或设置指示是否显示最后一个分隔符的值。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.WindowCommands.SeparatorHeight">
            <summary>获取或设置指示分隔符高度的值。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.WindowCommandsItem.IsSeparatorVisible">
            <summary>获取或设置指示是否显示分隔符的值。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.IWindowPlacementSettings.Reload">
            <summary>刷新永久存储中的应用程序设置属性值。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.IWindowPlacementSettings.UpgradeSettings">
            <summary>加载时升级应用程序设置。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.IWindowPlacementSettings.Upgrade">
            <summary>更新应用程序设置，以反映应用程序的最新安装。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.IWindowPlacementSettings.Save">
            <summary>存储设置属性的当前值。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.WindowApplicationSettings">
            <summary>此设置类是保存窗口位置的默认方式</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.WindowApplicationSettings.UpgradeSettings">
            <summary>加载时升级应用程序设置。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.MetroContentControl">
            <summary>原文来自http://xamlcoder.com/blog/2010/11/04/creating-a-metro-ui-style-control/</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.MetroWindow">
            <summary>扩展的 metrofied Window 类。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.OverrideDefaultWindowCommandsBrush">
            <summary>允许轻松处理窗口命令刷。主题也基于此画笔进行应用。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.WindowTransitionsEnabled">
            <summary>获取/设置是否启用窗口的进入过渡动画。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.Flyouts">
            <summary>获取/设置托管窗口弹出窗口的 FlyoutsControl。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.IconTemplate">
            <summary>获取/设置图标内容模板以显示自定义图标。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.TitleTemplate">
            <summary>获取/设置标题内容模板以显示自定义标题。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.LeftWindowCommands">
            <summary>获取/设置承载用户命令的左侧窗口命令。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.RightWindowCommands">
            <summary>获取/设置承载用户命令的右侧窗口命令。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.WindowButtonCommands">
            <summary>获取/设置承载最小/最大/关闭命令的窗口按钮命令。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.IgnoreTaskbarOnMaximize">
            <summary>获取/设置窗口在最大化时是否忽略（和重叠）任务栏。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.TitleForeground">
            <summary>获取/设置用于标题栏前景的画笔。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.SaveWindowPosition">
            <summary>获取/设置窗口是否将保存它在加载时的位置。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroWindow.GetWindowPlacementSettings">
            <summary>获取窗口放置设置（可覆盖）。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.ShowIconOnTitleBar">
            <summary>获取/设置标题栏图标是否可见。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.ShowDialogsOverTitleBar">
            <summary>获取/设置是否在标题栏显示对话框。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.IconEdgeMode">
            <summary>获取/设置标题栏图标的边缘模式。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.IconBitmapScalingMode">
            <summary>获取/设置标题栏图标的位图缩放模式。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.ShowTitleBar">
            <summary>获取/设置 TitleBar 是否可见。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.UseNoneWindowStyle">
            <summary>获取/设置 WindowStyle 是否为 None。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.ShowMinButton">
            <summary>获取/设置最小化按钮是否可见。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.ShowMaxRestoreButton">
            <summary>获取/设置最大化/还原按钮是否可见。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.ShowCloseButton">
            <summary>如果关闭按钮可见，则获取/设置。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.IsMinButtonEnabled">
            <summary>获取/设置是否启用了最小按钮。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.IsMaxRestoreButtonEnabled">
            <summary>获取/设置是否启用了最大/恢复按钮。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.IsCloseButtonEnabled">
            <summary>获取/设置是否启用了关闭按钮。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.ShowSystemMenuOnRightClick">
            <summary>获取/设置是否应在右键单击时弹出系统菜单。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.TitlebarHeight">
            <summary>获取/设置 TitleBar 的高度。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.TitleCaps">
            <summary>获取/设置 TitleBar 的文本是否自动大写。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.TitleCharacterCasing">
            <summary>标题的字符大小写</summary> 
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.TitleAlignment">
            <summary>获取/设置标题水平对齐方式。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.WindowTitleBrush">
            <summary>获取/设置用于 Window 标题栏的画笔。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.GlowBrush">
            <summary>获取/设置用于 Window 发光画笔。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.NonActiveGlowBrush">
            <summary>获取/设置用于 Window 的非活动发光画笔。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.NonActiveBorderBrush">
            <summary>获取/设置用于 Window 的非活动边框画笔。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.NonActiveWindowTitleBrush">
            <summary>获取/设置用于 Window 的非活动标题栏画笔。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroWindow.ShowOverlayAsync">
            <summary>开始显示 MetroWindow 的叠加效果。</summary>
            <returns>表示该过程的任务。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroWindow.HideOverlayAsync">
            <summary>开始隐藏 MetroWindow 的叠加效果。</summary>
            <returns>表示该过程的任务。</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroWindow.StoreFocus(System.Windows.IInputElement)">
            <summary>通过 FocusManager 存储给定元素或最后一个焦点元素，以在关闭对话框后恢复焦点。</summary>
            <param name="thisElement">将再次聚焦的元素。</param>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroWindow.ResetStoredFocus">
            <summary>清除关闭对话框后将获得焦点的存储元素。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroWindow.#ctor">
            <summary>初始化 MahApps.Metro.Controls.MetroWindow 类的新实例。</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroWindow.GetPart``1(System.String)">
            <summary>获取含给定名称的模板子项。</summary>
            <typeparam name="T">接口类型从 DependencyObject 开始。</typeparam>
            <param name="name">模板子项的名称。</param>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroWindow.GetPart(System.String)">
            <summary>获取含给定名称的模板子项。</summary>
            <param name="name">模板子项的名称。</param>
        </member>
        <member name="T:MahApps.Metro.Controls.RevealImage">
            <summary>RevealImage</summary>
        </member>
        <member name="M:MahApps.Metro.Controls.RevealImage.InitializeComponent">
            <summary>的 InitializeComponent</summary>
        </member>
        <member name="F:MahApps.Metro.Controls.Tile.HorizontalTitleAlignmentProperty">
            <summary>HorizontalTitleAlignment 依赖属性。默认值：HorizontalAlignment.Left</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Tile.HorizontalTitleAlignment">
            <summary>获取/设置标题的水平对齐方式。</summary> 
        </member>
        <member name="F:MahApps.Metro.Controls.Tile.VerticalTitleAlignmentProperty">
            <summary>VerticalTitleAlignment 依赖属性。默认值：VerticalAlignment.Bottom</summary> 
        </member>
        <member name="P:MahApps.Metro.Controls.Tile.VerticalTitleAlignment">
            <summary>获取/设置标题的垂直对齐方式。</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.ToggleSwitch">
            <summary>允许用户在两种状态之间切换的控件：一个代表 true；另一个代表 false。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.HeaderFontFamily">
            <summary>获取/设置标头的字体名称。</summary> 
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.OnLabel">
            <summary>获取/设置控件处于“打开”状态时要显示的文本。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.OffLabel">
            <summary>获取/设置控件处于“关闭”状态时要显示的文本。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.SwitchForeground">
            <summary>获取/设置用于切换前景的画笔。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.OnSwitchBrush">
            <summary>获取/设置用于 on-switch 前景的画笔。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.OffSwitchBrush">
            <summary>获取/设置用于 off-switch 前景的画笔。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.ThumbIndicatorBrush">
            <summary>获取/设置用于拇指指示器的画笔。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.ThumbIndicatorDisabledBrush">
            <summary>获取/设置用于拇指指示器的画笔。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.ThumbIndicatorWidth">
            <summary>获取/设置拇指指示器的宽度。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.ContentDirection">
            <summary>获取/设置控件的内容流方向。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.ToggleSwitchButtonStyle">
            <summary>获取/设置控件的切换开关按钮样式。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.IsChecked">
            <summary>获取/设置控件是选择（开）还是不选（关）。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.CheckChangedCommand">
            <summary>获取/设置在 IsChecked 属性更改时将执行的命令。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.CheckedCommand">
            <summary>获取/设置在触发控件的已检查事件时将执行的命令。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.UnCheckedCommand">
            <summary>获取/设置在触发控件的已检查事件时将执行的命令。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.CheckChangedCommandParameter">
            <summary>获取/设置将由 CheckChangedCommand 传递的命令参数。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.CheckedCommandParameter">
            <summary>获取/设置将由 CheckedCommand 传递的命令参数。</summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.UnCheckedCommandParameter">
            <summary>获取/设置将由 UnCheckedCommand 传递的命令参数。</summary>
        </member>
        <member name="E:MahApps.Metro.Controls.ToggleSwitch.IsCheckedChanged">
            <summary>当 IsChecked 的值更改时引发的事件。</summary>
        </member>
        <member name="T:MahApps.Metro.Converters.ClockDegreeConverter">
            <summary>将表示小时/分钟/秒的双精度转换为相应的角度。</summary>
        </member>
        <member name="M:MahApps.Metro.Converters.BackgroundToForegroundConverter.IdealTextColor(System.Windows.Media.Color)">
            <summary>根据指定的背景颜色确定理想的文本颜色 http://www.codeproject.com/KB/GDI-plus/IdealTextColor.aspx</summary>
            <param name = "bg">bg。</param>
            <returns></returns>
        </member>
        <member name="T:MahApps.Metro.Converters.IsNullConverter">
            <summary>将值从 true 转换为 false，从 false 转换为 true。</summary>
        </member>
        <member name="T:MahApps.Metro.Converters.StringToVisibilityConverter">
            <summary>将字符串转换为可见枚举（并返回）可以使用“FalseEquivalent”属性声明 FalseEquivalent</summary>
        </member>
        <member name="M:MahApps.Metro.Converters.StringToVisibilityConverter.#ctor">
            <summary>使用标准值初始化属性</summary>
        </member>
        <member name="P:MahApps.Metro.Converters.StringToVisibilityConverter.FalseEquivalent">
            <summary>FalseEquivalent（默认值：Visibility.Collapsed =&gt;参见构造函数）</summary>
        </member>
        <member name="P:MahApps.Metro.Converters.StringToVisibilityConverter.OppositeStringValue">
            <summary>定义相反的布尔值是否觉有重要性（默认值：false）</summary>
        </member>
        <member name="T:MahApps.Metro.Converters.ThicknessBindingConverter">
            <summary>将字体粗细转换为新的粗细。使用 IgnoreThicknessSide 属性可以忽略一侧。</summary>
        </member>
        <member name="F:MahApps.Metro.Converters.IgnoreThicknessSideType.None">
            <summary>使用两侧。</summary>
        </member>
        <member name="F:MahApps.Metro.Converters.IgnoreThicknessSideType.Left">
            <summary>忽略左侧。</summary>
        </member>
        <member name="F:MahApps.Metro.Converters.IgnoreThicknessSideType.Top">
            <summary>忽略顶部。</summary>
        </member>
        <member name="F:MahApps.Metro.Converters.IgnoreThicknessSideType.Right">
            <summary>忽略右侧。</summary>
        </member>
        <member name="F:MahApps.Metro.Converters.IgnoreThicknessSideType.Bottom">
            <summary>忽略底部。</summary>
        </member>
        <member name="M:MahApps.Metro.Converters.TimeSpanToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>转换一个值。</summary>
            <returns>转换后的值。如果方法返回为 null，则使用有效的 null 值。</returns>
            <param name="value">绑定源生成的值。</param>
            <param name="targetType">绑定目标属性的类型。</param>
            <param name="parameter">要使用的转换器参数。</param>
            <param name="culture">在转换器中使用的区域性。</param>
        </member>
        <member name="M:MahApps.Metro.Converters.TimeSpanToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>转换一个值。</summary>
            <returns>转换后的值。如果方法返回为 null，则使用有效的 null 值。</returns>
            <param name="value">绑定目标生成的值。</param>
            <param name="targetType">要转换为的类型。</param>
            <param name="parameter">要使用的转换器参数。</param>
            <param name="culture">在转换器中使用的区域性。</param>
        </member>
        <member name="T:MahApps.Metro.Models.Win32.WM">
            <summary>针对从 MSDN 中提取的文档Windows SDK v6.1，对其中 winuser.h 所含的 Windows Messages 下的定义。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NULL">
            <summary>WM_NULL 消息不执行任何操作。如果应用程序要发布收件人窗口将会忽略的消息，则发送 WM_NULL 消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CREATE">
            <summary>当应用程序通过调用 CreateWindowEx 或 CreateWindow 函数请求创建窗口时，将发送 WM_CREATE 消息。（在函数返回前发送消息。）创建窗口后，但在窗口变为可见前，新窗口的窗口程序会收到此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DESTROY">
            <summary>在销毁窗口时发送 WM_DESTROY 消息。窗口从屏幕上移除后，其被发送至窗口的窗口程序。此消息首先发送至正在销毁的窗口，然后发送到子窗口（若有），因为它们被销毁。在处理消息期间，可以假设所有子窗口仍存在。///</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MOVE">
            <summary>移动窗口后发送 WM_MOVE 消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SIZE">
            <summary>在其大小更改后发送 WM_SIZE 消息到窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.ACTIVATE">
            <summary>WM_ACTIVATE 消息被发送到正在激活的窗口和正处于被停用状态的窗口。如果窗口使用相同的输入队列，则同步发送消息，首先发送到被停用的顶层窗口的窗口程序，然后发送到被激活的顶层窗口的窗口程序。如果窗口使用不同的输入队列，则会异步发送消息，因此会立即激活窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SETFOCUS">
            <summary>获得键盘焦点后发送 WM_SETFOCUS 消息到窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.KILLFOCUS">
            <summary>在失去键盘焦点之前立即发送 WM_KILLFOCUS 消息到窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.ENABLE">
            <summary>当应用程序更改窗口的启用状态时，将发送 WM_ENABLE 消息。它被发送到启用状态正在更改的窗口。此消息在 EnableWindow 函数返回之前发送，但在窗口的启用状态（WS_DISABLED 样式位）发生更改后发送。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SETREDRAW">
            <summary>应用程序将 WM_SETREDRAW 消息发送到窗口，以允许重绘该窗口中的更改或防止重新绘制该窗口中的更改。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SETTEXT">
            <summary>应用程序发送 WM_SETTEXT 消息以设置窗口文本。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.GETTEXT">
            <summary>应用程序发送 WM_GETTEXT 消息，将复制对应于窗口的文本到调用者提供的缓冲区中。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.GETTEXTLENGTH">
            <summary>应用程序发送 WM_GETTEXTLENGTH 消息以确定与窗口关联的文本的长度（以字符为单位）。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.PAINT">
            <summary>当系统或其他应用程序请求绘制应用程序窗口的一部分时，将发送 WM_PAINT 消息。在调用 UpdateWindow 或 RedrawWindow 函数时发送消息，或者在应用程序使用 GetMessage 或 PeekMessage 函数获取 WM_PAINT 消息时通过 DispatchMessage 函数发送消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CLOSE">
            <summary>应将 WM_CLOSE 消息作为窗口或应用程序终止使用的信号进行发送。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.QUERYENDSESSION">
            <summary>当用户选择结束会话或应用程序调用其中一个系统关闭功能时，将发送 WM_QUERYENDSESSION 消息。如果任何应用程序返回零，则会话不会结束。一旦一个应用程序返回零，系统就会停止发送 WM_QUERYENDSESSION 消息。处理完此消息后，系统会发送 WM_ENDSESSION 消息，并将 wParam 参数设置为 WM_QUERYENDSESSION 消息的结果。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.QUERYOPEN">
            <summary>当用户请求将窗口恢复到其先前的大小和位置时，将发送 WM_QUERYOPEN 消息到图标。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.ENDSESSION">
            <summary>在系统处理 WM_QUERYENDSESSION 消息的结果后，将发送 WM_ENDSESSION 消息到应用程序。WM_ENDSESSION 消息通知应用程序会话是否结束。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.QUIT">
            <summary>WM_QUIT 消息指示终止应用程序的请求，并在应用程序调用 PostQuitMessage 函数时生成。它导致 GetMessage 函数返回零。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.ERASEBKGND">
            <summary>必须清除窗口背景时（例如，调整窗口大小时）发送 WM_ERASEBKGND 消息。发送该消息以准备用于绘画的窗口的无效部分。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SYSCOLORCHANGE">
            <summary>当对系统颜色设置进行更改时，此消息将发送到所有顶层窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SHOWWINDOW">
            <summary>当窗口即将被隐藏或显示时，发送 WM_SHOWWINDOW 消息到窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.WININICHANGE">
            <summary>应用程序在更改WIN.INI文件后将WM_WININICHANGE消息发送到所有顶层窗口。应用程序使用该函数更改 WIN.INI 中的设置后，SystemParametersInfo 函数发送此消息。注意，提供仅用于与早期系统版本兼容的 WM_WININICHANGE 消息。应用程序应使用 WM_SETTINGCHANGE 消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SETTINGCHANGE">
            <summary>应用程序在更改WIN.INI文件后将WM_WININICHANGE消息发送到所有顶层窗口。应用程序使用该函数更改 WIN.INI 中的设置后，SystemParametersInfo 函数发送此消息。注意，提供仅用于与早期系统版本兼容的 WM_WININICHANGE 消息。应用程序应使用 WM_SETTINGCHANGE 消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DEVMODECHANGE">
            <summary>只要用户更改设备模式设置，WM_DEVMODECHANGE消息就会发送到所有顶层窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.ACTIVATEAPP">
            <summary>当即将激活属于与活动窗口不同的应用程序的窗口时，发送 WM_ACTIVATEAPP 消息。消息将发送到正在激活窗口的应用程序以及其窗口正处于被停用状态的应用程序。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.FONTCHANGE">
            <summary>应用程序在更改字体资源池后将WM_FONTCHANGE消息发送到系统中的所有顶层窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.TIMECHANGE">
            <summary>每当系统时间更改时发送的消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CANCELMODE">
            <summary>发送 WM_CANCELMODE 消息以取消某些模式，例如鼠标捕获。例如，当显示对话框或消息框时，系统会将此消息发送到活动窗口。某些函数也会将此消息显式发送到指定的窗口，且不管它是否为活动窗口。例如，EnableWindow 函数在禁用指定窗口时发送此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SETCURSOR">
            <summary>如果鼠标使光标在窗口内移动并且未捕获鼠标输入，则将发送 WM_SETCURSOR 消息到窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MOUSEACTIVATE">
            <summary>当光标处于非活动窗口并且用户按下鼠标按钮时，将发送 WM_MOUSEACTIVATE 消息。仅当子窗口将其传递给 DefWindowProc 函数时，父级窗口才会收到此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CHILDACTIVATE">
            <summary>当用户单击窗口的标题栏或激活，、移动或调整窗口时，将发送到 WM_CHILDACTIVATE 消息子窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.QUEUESYNC">
            <summary>由基于计算机的培训（CBT）应用程序发送 WM_QUEUESYNC 消息，以将用户输入消息与通过 WH_JOURNALPLAYBACK Hook 程序发送的其他消息分开。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.GETMINMAXINFO">
            <summary>当窗口的大小或位置即将改变时，发送 WM_GETMINMAXINFO 消息到窗口。应用程序可以使用此消息覆盖窗口的默认最大化尺寸和位置，或其默认的最小或最大跟踪尺寸。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.PAINTICON">
            <summary>Windows NT 3.51 及更早版本：在要绘制图标时，将发送 WM_PAINTICON 消息到最小化窗口。除了备注中说明的异常情况外，较新版本的 Microsoft Windows 不会发送此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.ICONERASEBKGND">
            <summary>Windows NT 3.51 及更早版本：绘制图标之前必须填充图标的背景时，将发送 WM_ICONERASEBKGND 消息到最小化窗口。仅当为窗口定义了类图标时，窗口才会收到此消息；否则，发送 WM_ERASEBKGND。较新版本的 Windows 不会发送此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NEXTDLGCTL">
            <summary>发送 WM_NEXTDLGCTL 消息到对话框程序，以将键盘焦点设置为对话框中的其他控件。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SPOOLERSTATUS">
            <summary>只要在打印管理器队列中添加或删除作业，打印管理器就会发送 WM_SPOOLERSTATUS 消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DRAWITEM">
            <summary>当按钮、组合框、列表框或菜单的可视方面发生更改时，将发送 WM_DRAWITEM 消息到所有者描述按钮、组合框、列表框或菜单的父级窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MEASUREITEM">
            <summary>创建控件或菜单时，将发送 WM_MEASUREITEM 消息到组合框、列表框、列表视图控件或菜单项的所有者窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DELETEITEM">
            <summary>当列表框或组合框被销毁或 LB_DELETESTRING，LB_RESETCONTENT，CB_DELETESTRING 或C B_RESETCONTENT 消息删除项目时，发送给列表框或组合框的所有者。系统为每个已删除的项目发送 WM_DELETEITEM 消息。系统为任何已删除的列表框或具有非零项数据的组合框项发送 WM_DELETEITEM 消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.VKEYTOITEM">
            <summary>通过带有 LBS_WANTKEYBOARDINPUT 样式的列表框发送给其所有者，以响应 WM_KEYDOWN 消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CHARTOITEM">
            <summary>通过带有 LBS_WANTKEYBOARDINPUT 样式的列表框发送给其所有者，以响应 WM_CHAR 消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SETFONT">
            <summary>应用程序发送 WM_SETFONT 消息以指定控件绘制文本时要使用的字体。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.GETFONT">
            <summary>应用程序发送WM_GETFONT 消息到控件，以检索控件当前用于绘制文本的字体。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SETHOTKEY">
            <summary>应用程序发送 WM_SETHOTKEY 消息到窗口，以将热键与窗口相关联。用户按下热键时，系统激活该窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.GETHOTKEY">
            <summary>应用程序发送 WM_GETHOTKEY 消息，以确定与窗口关联的热键。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.QUERYDRAGICON">
            <summary>发送 WM_QUERYDRAGICON 消息到最小化（标志性）窗口。用户即将拖动该窗口，但没有为其类别定义图标。应用程序可以将图柄返回至图标或光标。用户拖动图标时，系统显示此光标或图标。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.COMPAREITEM">
            <summary>系统发送 WM_COMPAREITEM 消息，以确定新项目在所有者绘制的组合框或列表框排序列表中的相对位置。每当应用程序添加新项目时，系统都会将此消息发送给使用 CBS_SORT 或 LBS_SORT 样式创建的组合框或列表框的所有者。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.GETOBJECT">
            <summary>Active Accessibility发送 WM_GETOBJECT 消息，以获取有关服务器应用程序中包含可访问对象的信息。应用程序从不直接发送此消息。仅由 Active Accessibility 发送，以响应对 AccessibleObjectFromPoint，AccessibleObjectFromEvent 或 AccessibleObjectFromWindow 的调用。但是，服务器应用程序处理此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.COMPACTING">
            <summary>当系统检测到在 30 到 60 秒间隔内超过 12.5％ 的系统时间用于压缩内存时，WM_COMPACTING 消息将发送到所有顶层窗口。这表示系统内存不足。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.COMMNOTIFY">
            <summary>对于基于 Win32 的应用程序，WM_COMMNOTIFY 已过时</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.WINDOWPOSCHANGING">
            <summary>发送 WM_WINDOWPOSCHANGING 消息到一个窗口，该窗口的大小、位置或 Z 顺序中的位置将因调用 SetWindowPos 函数或另一个窗口管理函数而发生更改。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.WINDOWPOSCHANGED">
            <summary>发送 WM_WINDOWPOSCHANGED 消息到一个窗口，该窗口的大小、位置或 Z 顺序中的位置由于调用 SetWindowPos 函数或另一个窗口管理函数而发生了变化。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.POWER">
            <summary>通知应用程序系统（通常是电池供电的个人计算机）即将进入暂停模式。使用：POWERBROADCAST</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.COPYDATA">
            <summary>应用程序发送 WM_COPYDATA 消息以将数据传递到另一个应用程序。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CANCELJOURNAL">
            <summary>当用户取消应用程序的日记活动时，将发布 WM_CANCELJOURNAL 消息到应用程序。消息以 NULL 窗口图柄发布。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NOTIFY">
            <summary>当事件发生或控件需要某些信息时，由公共控件发送到其父级窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.INPUTLANGCHANGEREQUEST">
            <summary>当用户选择新的输入语言时，使用热键（在键盘控制面板应用程序中指定）或从系统任务栏上的指示器，将 WM_INPUTLANGCHANGEREQUEST 消息发布到具有焦点的窗口。应用程序可以通过将消息传递给 DefWindowProc 函数来接受更改，或者通过立即返回来拒绝更改（并防止它发生）。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.INPUTLANGCHANGE">
            <summary>更改应用程序的输入语言后，将发送 WM_INPUTLANGCHANGE 消息到最顶层的受影响窗口。您应该进行任何特定于应用程序的设置，并将消息传递给 DefWindowProc 函数，该函数将消息传递给所有一级子窗口。这些子窗口可以将消息传递给 DefWindowProc，以便将消息传递给子窗口，依此类推。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.TCARD">
            <summary>发送到已使用 Microsoft Windows 帮助启动培训卡的应用程序。当用户单击可授权按钮时，该消息会通知应用程序。应用程序通过在 WinHelp 函数调用中指定 HELP_TCARD 命令来启动培训卡。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.HELP">
            <summary>表明用户按下了 F1 键。如果按下 F1 时菜单处于活动状态，则将发送 WM_HELP 到与菜单关联的窗口；否则，发送 WM_HELP 到具有键盘焦点的窗口。如果窗口均无键盘焦点，将发送 WM_HELP 到当前活动的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.USERCHANGED">
            <summary>用户登录或注销后，将发送 WM_USERCHANGED 消息到所有窗口。当用户登录或注销时，系统会更新用户指定的设置。更新设置后，系统立即发送此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NOTIFYFORMAT">
            <summary>确定窗口是否接受 WM_NOTIFY 通知消息中的 ANSI 或 Unicode 结构。WM_NOTIFYFORMAT 消息从公共控件发送到其父级窗口，并从父级窗口发送到公共控件。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CONTEXTMENU">
            <summary>WM_CONTEXTMENU 消息通知窗口用户在窗口中单击鼠标右键（右键单击）。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.STYLECHANGING">
            <summary>当 SetWindowLong 函数即将更改一个或多个窗口样式时，将发送 WM_STYLECHANGING 消息到窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.STYLECHANGED">
            <summary>SetWindowLong 函数更改了一个或多个窗口样式后，会发送 WM_STYLECHANGED 消息到窗口</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DISPLAYCHANGE">
            <summary>当显示分辨率发生变化时，将发送 WM_DISPLAYCHANGE 消息到所有窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.GETICON">
            <summary>发送 WM_GETICON 消息到窗口，以检索与窗口相关联的大图标或小图标的图柄。系统在 ALT TAB 对话框中显示大图标，在窗口标题中显示小图标。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SETICON">
            <summary>应用程序发送 WM_SETICON 消息，以将新的大图标或小图标与窗口相关联。系统在 ALT TAB 对话框中显示大图标，在窗口标题中显示小图标。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCCREATE">
            <summary>首次创建窗口时，将在 WM_CREATE 消息之前发送 WM_NREREATE 消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCDESTROY">
            <summary>WM_NCDESTROY 消息通知窗口其非工作区正在被销毁。DestroyWindow 函数将 WM_NCDESTROY 消息发送到 WM_DESTROY 消息之后的窗口。WM_DESTROY 用于释放与窗口关联的已分配内存对象。子窗口被销毁后发送 WM_NCDESTROY 消息。相反，在子窗口被销毁之前发送 WM_DESTROY。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCCALCSIZE">
            <summary>当必须计算窗口客户区的大小和位置时，将发送 WM_NCCALCSIZE 消息。通过处理该消息，当窗口的大小或位置改变时，应用程序可以控制窗口的工作区内内容。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCHITTEST">
            <summary>当光标移动或按下或释放鼠标按钮时，将发送 WM_NCHITTEST 消息到窗口。如果未捕获鼠标，则将消息发送到光标下方的窗口。否则，消息将发送到捕获鼠标的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCPAINT">
            <summary>WM_NCPAINT 消息在必须绘制其框架时发送到窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCACTIVATE">
            <summary>当需要更改其非工作区以指示活动或非活动状态时，发送 WM_NCACTIVATE 消息到窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.GETDLGCODE">
            <summary>发送 WM_GETDLGCODE 消息到与控件关联的窗口过程。默认情况下，系统处理控件的所有键盘输入；系统将某些类型的键盘输入解释为对话框导航键。要覆盖此默认行为，控件可以响应 WM_GETDLGCODE 消息以指示它想要处理自己的输入类型。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SYNCPAINT">
            <summary>WM_SYNCPAINT 消息用于同步绘制，同时避免链接独立的 GUI 线程。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCMOUSEMOVE">
            <summary>当光标在窗口的非工作区内移动时，将发布 WM_NCMOUSEMOVE 消息到窗口。此消息将发布到包含光标的窗口。如果窗口捕获了鼠标，则不会发布此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCLBUTTONDOWN">
            <summary>当用户在窗口的非工作区内按下鼠标左键时，将发布 WM_NCLBUTTONDOWN 消息。此消息将发布到包含光标的窗口。如果窗口捕获了鼠标，则不会发布此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCLBUTTONUP">
            <summary>当用户在窗口的非工作区内释放鼠标左键时，将发布 WM_NCLBUTTONUP 消息。此消息将发布到包含光标的窗口。如果窗口捕获了鼠标，则不会发布此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCLBUTTONDBLCLK">
            <summary>当用户在窗口的非工作区内双击鼠标左键时，将发布 WM_NCLBUTTONDBLCLK 消息。此消息将发布到包含光标的窗口。如果窗口捕获了鼠标，则不会发布此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCRBUTTONDOWN">
            <summary>当用户在窗口的非工作区内按下鼠标右键时，将发布 WM_NCRBUTTONDOWN 消息。此消息将发布到包含光标的窗口。如果窗口捕获了鼠标，则不会发布此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCRBUTTONUP">
            <summary>当用户在窗口的非工作区内释放鼠标右键时，将发布 WM_NCRBUTTONUP 消息。此消息将发布到包含光标的窗口。如果窗口捕获了鼠标，则不会发布此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCRBUTTONDBLCLK">
            <summary>当用户在光标位于窗口的非工作区内时双击鼠标右键时，将发布 WM_NCRBUTTONDBLCLK 消息。此消息将发布到包含光标的窗口。如果窗口捕获了鼠标，则不会发布此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCMBUTTONDOWN">
            <summary>当用户在窗口的非工作区内按下鼠标中键时，将发布 WM_NCMBUTTONDOWN 消息。此消息将发布到包含光标的窗口。如果窗口捕获了鼠标，则不会发布此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCMBUTTONUP">
            <summary>当用户在窗口的非工作区内释放鼠标中键时，将发布 WM_NCMBUTTONUP 消息。此消息将发布到包含光标的窗口。如果窗口捕获了鼠标，则不会发布此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCMBUTTONDBLCLK">
            <summary>当用户在光标位于窗口的非工作区内时双击鼠标中键时，将发布 WM_NCMBUTTONDBLCLK 消息。此消息将发布到包含光标的窗口。如果窗口捕获了鼠标，则不会发布此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCXBUTTONDOWN">
            <summary>当用户在窗口的非工作区内按下第一个或第二个 X 按钮时，将发布 WM_NCXBUTTONDOWN 消息。此消息将发布到包含光标的窗口。如果窗口捕获了鼠标，则不会发布此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCXBUTTONUP">
            <summary>当用户在窗口的非工作区内释放第一个或第二个 X 按钮时，将发布 WM_NCXBUTTONUP 消息。此消息将发布到包含光标的窗口。如果窗口捕获了鼠标，则不会发布此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCXBUTTONDBLCLK">
            <summary>当用户在光标位于窗口的非工作区时双击第一个或第二个 X 按钮时，将发布 WM_NCXBUTTONDBLCLK 消息。此消息将发布到包含光标的窗口。如果窗口捕获了鼠标，则不会发布此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.INPUT_DEVICE_CHANGE">
            <summary>发送WM_INPUT_DEVICE_CHANGE 消息到注册接收原始输入的窗口。窗口通过其 WindowProc 函数接收此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.INPUT">
            <summary>发送WM_INPUT消息到正在获取原始输入的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.KEYFIRST">
            <summary>此消息过滤键盘消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.KEYDOWN">
            <summary>当按下非系统键时，WM_KEYDOWN 消息将以键盘焦点发布到窗口。非系统键是在未按下 ALT 键时按下的键。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.KEYUP">
            <summary>释放非系统密钥时，WM_KEYUP 消息将以键盘焦点发布到窗口。非系统键是在未按下 ALT 键时按下的键，或在窗口具有键盘焦点时按下的键盘键。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CHAR">
            <summary>当 TranslateMessage 函数转换 WM_KEYDOWN 消息时，WM_CHAR 消息将以键盘焦点发布到窗口。WM_CHAR 消息包含按下的键的字符代码。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DEADCHAR">
            <summary>当 TranslateMessage 函数转换 WM_KEYUP 消息时，WM_DEADCHAR 消息将以键盘焦点发布到窗口。WM_DEADCHAR 指定由无效键生成的字符代码。无效键是生成字符的键，例如变音符号（双点），它与另一个字符组合以形成复合字符。例如，通过键入变音字符的无效键，然后键入 O 键生成变音符号 O 字符（Ö）。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SYSKEYDOWN">
            <summary>当用户按下 F10 键（激活菜单栏）或按住 ALT 键然后按下另一个键时，将以键盘焦点发布 WM_SYSKEYDOWN 消息到窗口。当没有窗口当前具有键盘焦点时也会发生这种情况；在这种情况下，发送 WM_SYSKEYDOWN 消息到活动窗口。接收消息的窗口可以通过检查 lParam 参数中的上下文代码，来区分这两个上下文。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SYSKEYUP">
            <summary>当用户释放按下 ALT 键时按下的键时，将以键盘焦点发布 WM_SYSKEYUP 消息到窗口。当没有窗口当前具有键盘焦点时也会发生这种情况；在这种情况下，发送 WM_SYSKEYUP 消息到活动窗口。接收消息的窗口可以通过检查 lParam 参数中的上下文代码，来区分这两个上下文。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SYSCHAR">
            <summary>当 TranslateMessage 函数转换WM_SYSKEYDOWN消息时，将以键盘焦点发布 WM_SYSCHAR 消息到窗口。它指定系统字符键的字符代码 - 即在 ALT 键关闭时按下的字符键。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SYSDEADCHAR">
            <summary>当 TranslateMessage 函数转换 WM_SYSKEYDOWN 消息时，将发送 WM_SYSDEADCHAR 消息到具有键盘焦点的窗口。WM_SYSDEADCHAR 指定系统无效键的字符代码 - 即按住ALT键时按下的无效键。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.UNICHAR">
            <summary>当 TranslateMessage 函数转换 WM_KEYDOWN 消息时，将以键盘焦点发布 WM_UNICHAR 消息到窗口。WM_UNICHAR 消息包含按下键的字符代码。WM_UNICHAR 消息等同于 WM_CHAR，但它使用 Unicode 转换格式 （UTF）-32，而 WM_CHAR 使用 UTF-16。它旨在将 Unicode 字符发送或发布到 ANSI 窗口，它可以处理 Unicode 补充平面字符。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.KEYLAST">
            <summary>此消息过滤键盘消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_STARTCOMPOSITION">
            <summary>在 IME 通过击键生成组合字符串之前立即发送。窗口通过其 WindowProc 函数接收此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_ENDCOMPOSITION">
            <summary>当 IME 结束组合时发送到应用程序。窗口通过其 WindowProc 函数接收此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_COMPOSITION">
            <summary>当 IME 因击键而改变组合状态时，发送到应用程序。窗口通过其 WindowProc 函数接收此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.INITDIALOG">
            <summary>显示对话框之前，WM_INITDIALOG 消息将立即发送到对话框过程。对话框过程通常使用此消息来初始化控件，并执行影响对话框外观的任何其他初始化任务。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.COMMAND">
            <summary>当用户从菜单中选择命令项，控件向其父级窗口发送通知消息或转换加速键击时，将发送 WM_COMMAND 消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SYSCOMMAND">
            <summary>当用户从“窗口”菜单中选择命令、单击“最大化”按钮、“最小化”按钮、“还原”按钮、“关闭”按钮或移动表单时，窗口将收到此消息。您可以通过筛选来停止表单移动。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.TIMER">
            <summary>当计时器到期时，将发布 WM_TIMER 消息到安装线程的消息队列中。该消息由 GetMessage 或 PeekMessage 函数发布。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.HSCROLL">
            <summary>当窗口的标准水平滚动条中发生滚动事件时，将发送 WM_HSCROLL 消息到窗口。当控件中发生 scroll 事件时，此消息也会发送到水平滚动条控件的所有者。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.VSCROLL">
            <summary>当窗口的标准垂直滚动条中发生 scroll 事件时，将发送 WM_VSCROLL 消息到窗口。当控件中发生 scroll 事件时，此消息也会发送到垂直滚动条控件的所有者。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.INITMENU">
            <summary>当菜单即将变为活动状态时，将发送 WM_INITMENU 消息。当用户单击菜单栏上的项目或按下菜单键时，会发生这种情况。这允许应用程序在显示菜单之前修改它。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.INITMENUPOPUP">
            <summary>当下拉菜单或子菜单即将变为活动状态时，将发送 WM_INITMENUPOPUP 消息。这允许应用程序在显示菜单之前修改菜单，而无需更改整个菜单。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MENUSELECT">
            <summary>当用户选择菜单项时，发送 WM_MENUSELECT 消息到菜单的所有者窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MENUCHAR">
            <summary>当菜单处于活动状态且用户按下与任何助记符或加速键不对应的键时，将发送 WM_MENUCHAR 消息。此消息将发送到拥有该菜单的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.ENTERIDLE">
            <summary>发送 WM_ENTERIDLE 消息到进入空闲状态的模式对话框或菜单的所有者窗口。当模块对话框或菜单处理了一个或多个先前的消息后，如果没有消息在其队列中等待，则模式对话框或菜单进入空闲状态。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MENURBUTTONUP">
            <summary>当用户在光标位于菜单项上时释放鼠标右键时，将发送 WM_MENURBUTTONUP 消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MENUDRAG">
            <summary>当用户拖动菜单项时，将发送 WM_MENUDRAG 消息给拖放菜单的所有者。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MENUGETOBJECT">
            <summary>当鼠标光标进入菜单项或从项目的中心移动到项目的顶部或底部时，将发送 WM_MENUGETOBJECT 消息给拖放菜单的所有者。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.UNINITMENUPOPUP">
            <summary>当下拉菜单或子菜单被销毁时，将发送 WM_UNINITMENUPOPUP 消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MENUCOMMAND">
            <summary>当用户从菜单中进行选择时，将发送 WM_MENUCOMMAND 消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CHANGEUISTATE">
            <summary>应用程序发送 WM_CHANGEUISTATE 消息以指示应更改用户界面 （UI） 状态。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.UPDATEUISTATE">
            <summary>应用程序发送 WM_UPDATEUISTATE 消息，以更改指定窗口及其所有子窗口的用户界面 （UI） 状态。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.QUERYUISTATE">
            <summary>应用程序发送 WM_QUERYUISTATE 消息以检索窗口的用户界面 （UI） 状态。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CTLCOLORMSGBOX">
            <summary>在 Windows 绘制消息框之前，将发送 WM_CTLCOLORMSGBOX 消息到消息框的所有者窗口。通过响应此消息，所有者窗口可以使用给定的显示设备上下文图柄，设置消息框的文本和背景颜色。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CTLCOLOREDIT">
            <summary>即将绘制控件时，不是只读或禁用的编辑控件会将 WM_CTLCOLOREDIT 消息发送到其父级窗口。通过响应此消息，父级窗口可以使用指定的设备上下文图柄设置编辑控件的文本和背景颜色。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CTLCOLORLISTBOX">
            <summary>在系统绘制列表框之前发送到列表框的父级窗口。通过响应此消息，父级窗口可以使用指定的显示设备上下文图柄，设置列表框的文本和背景颜色。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CTLCOLORBTN">
            <summary>绘制按钮之前，将发送 WM_CTLCOLORBTN 消息到按钮的父窗口。父级窗口可以更改按钮的文本和背景颜色。但是，只有所有者绘制的按钮才会响应处理此消息的父级窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CTLCOLORDLG">
            <summary>系统绘制对话框之前，将发送 WM_CTLCOLORDLG 消息到对话框。通过响应此消息，对话框可以使用指定的显示设备上下文图柄设置其文本和背景颜色。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CTLCOLORSCROLLBAR">
            <summary>即将绘制控件时，将发送 WM_CTLCOLORSCROLLBAR 消息到滚动条控件的父级窗口。通过响应此消息，父级窗口可以使用显示上下文图柄来设置滚动条控件的背景颜色。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CTLCOLORSTATIC">
            <summary>静态控件或只读或禁用的编辑控件在将要绘制控件时，将 WM_CTLCOLORSTATIC 消息发送到其父级窗口。通过响应此消息，父级窗口可以使用指定的设备上下文图柄设置静态控件的文本和背景颜色。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MOUSEFIRST">
            <summary>使用 WM_MOUSEFIRST 指定第一个鼠标消息。使用 PeekMessage（） 函数。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MOUSEMOVE">
            <summary>光标移动时，将发布 WM_MOUSEMOVE 消息到窗口。如果未捕获鼠标，则会将消息发布到包含光标的窗口。否则，消息将发布到捕获鼠标的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.LBUTTONDOWN">
            <summary>当用户在窗口的工作区内按下鼠标左键时，将发布 WM_LBUTTONDOWN 消息。如果未捕获鼠标，则会将消息发布到光标下方的窗口中。否则，消息将发布到捕获鼠标的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.LBUTTONUP">
            <summary>当用户在窗口的工作区内释放鼠标左键时，将发布 WM_LBUTTONUP 消息。如果未捕获鼠标，则会将消息发布到光标下方的窗口中。否则，消息将发布到捕获鼠标的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.LBUTTONDBLCLK">
            <summary>当用户在光标位于窗口的工作区内双击鼠标左键时，将发布 WM_LBUTTONDBLCLK 消息。如果未捕获鼠标，则会将消息发布到光标下方的窗口中。否则，消息将发布到捕获鼠标的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.RBUTTONDOWN">
            <summary>当用户在窗口的工作区内按下鼠标右键时，将发布 WM_RBUTTONDOWN 消息。如果未捕获鼠标，则会将消息发布到光标下方的窗口中。否则，消息将发布到捕获鼠标的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.RBUTTONUP">
            <summary>当用户在光标位于窗口的工作区内释放鼠标右键时，将发布 WM_RBUTTONUP 消息。如果未捕获鼠标，则会将消息发布到光标下方的窗口中。否则，消息将发布到捕获鼠标的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.RBUTTONDBLCLK">
            <summary>当用户在光标位于窗口的工作区内双击鼠标右键时，将发布 WM_RBUTTONDBLCLK 消息。如果未捕获鼠标，则会将消息发布到光标下方的窗口中。否则，消息将发布到捕获鼠标的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MBUTTONDOWN">
            <summary>当用户在窗口的工作区内按下鼠标中键时，将发布 WM_MBUTTONDOWN 消息。如果未捕获鼠标，则会将消息发布到光标下方的窗口中。否则，消息将发布到捕获鼠标的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MBUTTONUP">
            <summary>当用户在窗口的工作区内释放鼠标中键时，将发布 WM_MBUTTONUP 消息。如果未捕获鼠标，则会将消息发布到光标下方的窗口中。否则，消息将发布到捕获鼠标的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MBUTTONDBLCLK">
            <summary>当用户在光标位于窗口的工作区内双击鼠标中键时，将发布 WM_MBUTTONDBLCLK 消息。如果未捕获鼠标，则会将消息发布到光标下方的窗口中。否则，消息将发布到捕获鼠标的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MOUSEWHEEL">
            <summary>旋转鼠标滚轮时，将发送 WM_MOUSEWHEEL 消息到焦点窗口。DefWindowProc 函数将消息传送到窗口的父级。应该没有内部转发消息，因为 DefWindowProc 将它传播到父链，直到找到一个进行处理的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.XBUTTONDOWN">
            <summary>当用户在窗口的工作区内按下第一个或第二个 X 按钮时，将发布 WM_XBUTTONDOWN 消息。如果未捕获鼠标，则会将消息发布到光标下方的窗口中。否则，消息将发布到捕获鼠标的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.XBUTTONUP">
            <summary>当用户在窗口的工作区内释放第一个或第二个 X 按钮时，将发布 WM_XBUTTONUP 消息。如果未捕获鼠标，则会将消息发布到光标下方的窗口中。否则，消息将发布到捕获鼠标的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.XBUTTONDBLCLK">
            <summary>当用户在光标位于窗口的工作区内双击第一个或第二个 X 按钮时，将发布 WM_XBUTTONDBLCLK 消息。如果未捕获鼠标，则会将消息发布到光标下方的窗口中。否则，消息将发布到捕获鼠标的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MOUSEHWHEEL">
            <summary>当鼠标的水平滚轮倾斜或旋转时，将发送 WM_MOUSEHWHEEL 消息到焦点窗口。DefWindowProc 函数将消息传送到窗口的父级。应该没有内部转发消息，因为 DefWindowProc 将它传播到父链，直到找到一个进行处理的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MOUSELAST">
            <summary>使用 WM_MOUSELAST 指定最后一条鼠标消息。与 PeekMessage（） 函数一起使用。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.PARENTNOTIFY">
            <summary>创建或销毁子窗口时，或者当用户在子窗口上方单击鼠标按钮时，将发送 WM_PARENTNOTIFY 消息到子窗口的父级窗口。创建子窗口时，系统会在创建窗口返回的 CreateWindow 或 CreateWindowEx 函数之前发送 WM_PARENTNOTIFY。当子窗口被销毁时，系统会在进行任何破坏窗口的处理之前发送消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.ENTERMENULOOP">
            <summary>WM_ENTERMENULOOP 消息通知应用程序的主窗口过程已输入菜单模态循环。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.EXITMENULOOP">
            <summary>WM_EXITMENULOOP 消息通知应用程序的主窗口过程已退出菜单模态循环。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NEXTMENU">
            <summary>使用向右或向左箭头键在菜单栏和系统菜单之间切换时，将发送 WM_NEXTMENU 消息到应用程序。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SIZING">
            <summary>发送 WM_SIZING 消息到用户正在调整大小的窗口。通过处理此消息，应用程序可以监视拖动矩形的大小和位置，并在需要时更改其大小或位置。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CAPTURECHANGED">
            <summary>发送 WM_CAPTURECHANGED 消息到丢失鼠标捕获的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MOVING">
            <summary>发送 WM_MOVING 消息到用户正在移动的窗口。通过处理此消息，应用程序可以监视拖动矩形的位置，并在需要时更改其位置。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.POWERBROADCAST">
            <summary>通知应用程序发生了电源管理事件。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DEVICECHANGE">
            <summary>通知应用程序更改设备或计算机的硬件配置。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDICREATE">
            <summary>应用程序将 WM_MDICREATE 消息发送到多文档界面 （MDI） 客户端窗口以创建 MDI 子窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDIDESTROY">
            <summary>应用程序将 WM_MDIDESTROY 消息发送到多文档界面 （MDI） 客户端窗口以关闭 MDI 子窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDIACTIVATE">
            <summary>应用程序将 WM_MDIACTIVATE 消息发送到多文档界面 （MDI） 客户端窗口，以指示客户端窗口激活不同的 MDI 子窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDIRESTORE">
            <summary>应用程序将 WM_MDIRESTORE 消息发送到多文档界面 （MDI） 客户端窗口，以从最大化或最小化的大小恢复 MDI 子窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDINEXT">
            <summary>应用程序将 WM_MDINEXT 消息发送到多文档界面 （MDI） 客户端窗口以激活下一个或上一个子窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDIMAXIMIZE">
            <summary>应用程序将 WM_MDIMAXIMIZE 消息发送到多文档界面 （MDI） 客户端窗口，以最大化 MDI 子窗口。系统调整子窗口的大小以使其客户区填充客户端窗口。系统将子窗口的窗口菜单图标放在框架窗口菜单栏的最右侧位置，并将子窗口的恢复图标放在最左侧的位置。系统还将子窗口的标题栏文本附加到框架窗口的标题栏文本。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDITILE">
            <summary>应用程序将 WM_MDITILE 消息发送到多文档界面 （MDI） 客户端窗口，以便以 tile 格式排列其所有 MDI 子窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDICASCADE">
            <summary>应用程序将 WM_MDICASCADE 消息发送到多文档界面 （MDI） 客户端窗口，以便以级联格式排列其所有子窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDIICONARRANGE">
            <summary>应用程序将 WM_MDIICONARRANGE 消息发送到多文档界面 （MDI） 客户端窗口，以排列所有最小化的 MDI 子窗口。不会影响未最小化的子窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDIGETACTIVE">
            <summary>应用程序将 WM_MDIGETACTIVE 消息发送到多文档界面 （MDI） 客户端窗口，以检索活动 MDI 子窗口的图柄。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDISETMENU">
            <summary>应用程序将 WM_MDISETMENU 消息发送到多文档界面 （MDI） 客户端窗口，以替换 MDI 框架窗口的整个菜单，替换框架窗口的窗口菜单，或替换两者。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.ENTERSIZEMOVE">
            <summary>进入移动或大小调整模态循环后一次发送 WM_ENTERSIZEMOVE 消息到窗口。当用户单击窗口的标题栏或调整边框时，或者当窗口将 WM_SYSCOMMAND 消息传递给 DefWindowProc 函数并且消息的 wParam 参数指定 SC_MOVE 或 SC_SIZE 值时，窗口进入移动或大小调整模式循环。当 DefWindowProc 返回时，操作完成。无论是否启用了拖动整个窗口，系统都会发送 WM_ENTERSIZEMOVE 消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.EXITSIZEMOVE">
            <summary>WM_EXITSIZEMOVE 消息在退出移动或大小调整模式循环后一次发送到窗口。当用户单击窗口的标题栏或调整边框时，或者当窗口将 WM_SYSCOMMAND 消息传递给 DefWindowProc 函数并且消息的 wParam 参数指定 SC_MOVE 或 SC_SIZE 值时，窗口进入移动或大小调整模式循环。当 DefWindowProc 返回时，操作完成。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DROPFILES">
            <summary>当用户在已将自身注册为已删除文件的收件人的应用程序的窗口上删除文件时，发送。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDIREFRESHMENU">
            <summary>应用程序将 WM_MDIREFRESHMENU 消息发送到多文档界面 （MDI） 客户端窗口以刷新 MDI 框架窗口的窗口菜单。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_SETCONTEXT">
            <summary>激活窗口时发送到应用程序。窗口通过其 WindowProc 函数接收此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_NOTIFY">
            <summary>发送到应用程序以通知 IME 窗口的更改。窗口通过其 WindowProc 函数接收此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_CONTROL">
            <summary>由应用程序发送以指示 IME 窗口执行所请求的命令。应用程序使用此消息来控制它已创建的 IME 窗口。要发送此消息，应用程序使用以下参数调用 SendMessage 函数。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_COMPOSITIONFULL">
            <summary>当 IME 窗口找不到用于扩展合成窗口区域的空间时，发送到应用程序。窗口通过其 WindowProc 函数接收此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_SELECT">
            <summary>当操作系统即将更改当前 IME 时，发送到应用程序。窗口通过其 WindowProc 函数接收此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_CHAR">
            <summary>当 IME 获得转换结果的字符时，发送到应用程序。窗口通过其 WindowProc 函数接收此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_REQUEST">
            <summary>发送到应用程序以提供命令和请求信息。窗口通过其 WindowProc 函数接收此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_KEYDOWN">
            <summary>由 IME 发送到应用程序以通知应用程序按键并保持消息顺序。窗口通过其 WindowProc 函数接收此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_KEYUP">
            <summary>由 IME 发送到应用程序以通知应用程序密钥释放并保持消息顺序。窗口通过其 WindowProc 函数接收此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MOUSEHOVER">
            <summary>当光标在先前调用 TrackMouseEvent 中指定的时间段内悬停在窗口的客户区域上时，将发布 WM_MOUSEHOVER 消息到窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MOUSELEAVE">
            <summary>当光标离开先前调用 TrackMouseEvent 时指定的窗口的客户区域时，将发布 WM_MOUSELEAVE 消息到窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCMOUSEHOVER">
            <summary>当光标悬停在窗口的非客户区域上一段时间之前，将发布 WM_NCMOUSEHOVER 消息到窗口中，该时间段是在先前调用 TrackMouseEvent 中指定的时间段。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCMOUSELEAVE">
            <summary>当光标离开先前调用 TrackMouseEvent 时指定的窗口的非客户区域时，将发布 WM_NCMOUSELEAVE 消息到窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.WTSSESSION_CHANGE">
            <summary>WM_WTSSESSION_CHANGE 消息通知应用程序会话状态的更改。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CUT">
            <summary>应用程序将 WM_CUT 消息发送到编辑控件或组合框以删除（剪切）编辑控件中的当前选择（如果有），并将已删除的文本以 CF_TEXT 格式复制到剪贴板。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.COPY">
            <summary>应用程序将 WM_COPY 消息发送到编辑控件或组合框，以 CF_TEXT 格式将当前选择复制到剪贴板。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.PASTE">
            <summary>应用程序将 WM_PASTE消 息发送到编辑控件或组合框，以将剪贴板的当前内容复制到当前插入符号位置的编辑控件。仅当剪贴板包含CF_TEXT 格式的数据时，才插入数据。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CLEAR">
            <summary>应用程序将 WM_CLEAR 消息发送到编辑控件或组合框，以从编辑控件中删除（清除）当前选择（如果有）。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.UNDO">
            <summary>应用程序将 WM_UNDO 消息发送到编辑控件以撤消上一个操作。将此消息发送到编辑控件时，将还原先前删除的文本或删除以前添加的文本。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.RENDERFORMAT">
            <summary>如果 WM_RENDERFORMAT 消息已延迟呈现特定剪贴板格式，并且应用程序已请求该格式的数据，则会将 WM_RENDERFORMAT 消息发送给剪贴板所有者。剪贴板所有者必须以指定的格式呈现数据，并通过调用 SetClipboardData 函数将其放在剪贴板上。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.RENDERALLFORMATS">
            <summary>如果剪贴板所有者延迟呈现一个或多个剪贴板格式，WM_RENDERALLFORMATS 消息将在销毁之前发送给剪贴板所有者。为了使剪贴板的内容对其他应用程序可用，剪贴板所有者必须以其能够生成的所有格式呈现数据，并通过调用 SetClipboardData 函数将数据放在剪贴板上。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DESTROYCLIPBOARD">
            <summary>当对 EmptyClipboard 函数的调用清空剪贴板时，将发送 WM_DESTROYCLIPBOARD 消息到剪贴板所有者。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DRAWCLIPBOARD">
            <summary>当剪贴板的内容发生变化时，将发送 WM_DRAWCLIPBOARD 消息到剪贴板查看器链中的第一个窗口。这使剪贴板查看器窗口能够显示剪贴板的新内容。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.PAINTCLIPBOARD">
            <summary>当剪贴板包含 CF_OWNERDISPLAY 格式的数据且剪贴板查看器的客户区需要重新绘制时，剪贴板查看器窗口将 WM_PAINTCLIPBOARD 消息发送给剪贴板所有者。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.VSCROLLCLIPBOARD">
            <summary>当剪贴板包含 CF_OWNERDISPLAY 格式的数据并且剪贴板查看器的垂直滚动条中发生事件时，剪贴板查看器窗口会将 WM_VSCROLLCLIPBOARD 消息发送给剪贴板所有者。所有者应滚动剪贴板图像并更新滚动条值。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SIZECLIPBOARD">
            <summary>当剪贴板包含 CF_OWNERDISPLAY 格式的数据且剪贴板查看器的客户区域已更改大小时，剪贴板查看器窗口将 WM_SIZECLIPBOARD 消息发送给剪贴板所有者。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.ASKCBFORMATNAME">
            <summary>剪贴板查看器窗口将 WM_ASKCBFORMATNAME 消息发送给剪贴板所有者，以请求 CF_OWNERDISPLAY 剪贴板格式的名称。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CHANGECBCHAIN">
            <summary>当从链中移除窗口时，发送 WM_CHANGECBCHAIN 消息到剪贴板查看器链中的第一个窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.HSCROLLCLIPBOARD">
            <summary>WM_HSCROLLCLIPBOARD 消息由剪贴板查看器窗口发送给剪贴板所有者。当剪贴板包 含CF_OWNERDISPLAY 格式的数据并且剪贴板查看器的水平滚动条中发生事件时，会发生这种情况。所有者应滚动剪贴板图像并更新滚动条值。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.QUERYNEWPALETTE">
            <summary>此消息通知窗口它将要接收键盘焦点，使窗口有机会在接收焦点时实现其逻辑调色板。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.PALETTEISCHANGING">
            <summary>WM_PALETTEISCHANGING 消息通知应用程序应用程序将实现其逻辑调色板。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.PALETTECHANGED">
            <summary>在具有键盘焦点的窗口实现其逻辑调色板之后，OS将该消息发送到所有顶层和重叠窗口。此消息使没有键盘焦点的窗口能够实现其逻辑调色板并更新其客户区域。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.HOTKEY">
            <summary>当用户按下 RegisterHotKey 函数注册的热键时，将发布 WM_HOTKEY 消息。该消息位于与注册热键的线程关联的消息队列的顶部。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.PRINT">
            <summary>发送 WM_PRINT 消息到窗口以请求它在指定的设备上下文中绘制自己，最常见的是在打印机设备上下文中。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.PRINTCLIENT">
            <summary>发送 WM_PRINTCLIENT 消息到窗口以请求它在指定的设备上下文中绘制其客户区域，最常见的是在打印机设备上下文中。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.APPCOMMAND">
            <summary>WM_APPCOMMAND 消息通知窗口用户生成应用程序命令事件，例如，通过使用鼠标单击应用程序命令按钮或在键盘上键入应用程序命令键。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.THEMECHANGED">
            <summary>WM_THEMECHANGED 消息在主题更改事件之后广播到每个窗口。主题更改事件的示例包括主题的激活，主题的停用或从一个主题到另一个主题的转换。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CLIPBOARDUPDATE">
            <summary>在剪贴板的内容发生更改时发送。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DWMCOMPOSITIONCHANGED">
            <summary>系统将发送 WM_DWMCOMPOSITIONCHANGED 消息的窗口，以指示桌面组合的可用性已更改。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DWMNCRENDERINGCHANGED">
            <summary>当窗口的非客户区渲染状态发生更改时，将调用 WM_DWMNCRENDERINGCHANGED。只有将标志 DWM_BLURBEHIND.fTransitionOnMaximized 设置为 true 的窗口才会收到此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DWMCOLORIZATIONCOLORCHANGED">
            <summary>当着色颜色发生变化时，发送到所有顶层窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DWMWINDOWMAXIMIZEDCHANGE">
            <summary>WM_DWMWINDOWMAXIMIZEDCHANGE 将在 DWM 组合窗口最大化时通知您。您还必须注册此消息。发送此消息时，您将有其他窗口变为不透明。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.GETTITLEBARINFOEX">
            <summary>发送以请求扩展标题栏信息。窗口通过其 WindowProc 函数接收此消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.APP">
            <summary>应用程序使用 WM_APP 常量来帮助定义私有消息，通常是 WM_APP X 形式，其中 X 是整数值。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.USER">
            <summary>应用程序使用 WM_USER 常量来帮助定义私有窗口类使用的私有消息，通常是 WM_USER X 形式，其中 X 是整数值。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CPL_LAUNCH">
            <summary>应用程序将 WM_CPL_LAUNCH 消息发送到 Windows 控制面板以请求启动控制面板应用程序。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CPL_LAUNCHED">
            <summary>当由 WM_CPL_LAUNCH 消息启动的控制面板应用程序关闭时，将发送 WM_CPL_LAUNCHED 消息。WM_CPL_LAUNCHED 消息被发送到由启动应用程序的 WM_CPL_LAUNCH 消息的 wParam 参数标识的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SYSTIMER">
            <summary>WM_SYSTIMER 是一个众所周知但尚未记录的消息。Windows 使用 WM_SYSTIMER 进行滚动等内部操作。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.BORDER">
            <summary>窗口有一个细线边框。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.CAPTION">
            <summary>该窗口有一个标题栏（包括 WS_BORDER 样式）。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.CHILD">
            <summary>窗口是一个子窗口。具有此样式的窗口不能有菜单栏。此样式不能与 WS_POPUP 样式一起使用。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.CLIPCHILDREN">
            <summary>在父级窗口中进行绘制时，排除子窗口占用的区域。创建父级窗口时使用此样式。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.CLIPSIBLINGS">
            <summary>剪切相互关联的子窗口；也就是说，当特定子窗口收到 WM_PAINT 消息时，WS_CLIPSIBLINGS 样式会剪切要更新的子窗口区域之外的所有其他重叠子窗口。如果未指定 WS_CLIPSIBLINGS 并且子窗口重叠，则在子窗口的客户区域内绘制时，可以在相邻子窗口的客户区域内绘制。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.DISABLED">
            <summary>最初禁用该窗口。禁用的窗口无法接收用户输入。要在创建窗口后更改此设置，请使用 EnableWindow 功能。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.DLGFRAME">
            <summary>窗口具有通常与对话框一起使用的样式边框。具有此样式的窗口不能有标题栏。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.GROUP">
            <summary>该窗口是一组控件的第一个控件。该组由第一个控件和在其后定义的所有控件组成，直到具有 WS_GROUP 样式的下一个控件。每个组中的第一个控件通常具有 WS_TABSTOP 样式，以便用户可以从一个组移动到另一个组。用户随后可以通过使用方向键将键盘焦点从组中的一个控件更改为组中的下一个控件。您可以打开和关闭此样式以更改对话框导航。要在创建窗口后更改此样式，请使用 SetWindowLong 函数。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.HSCROLL">
            <summary>窗口有一个水平滚动条。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.MAXIMIZE">
            <summary>窗口开始处于最大化。</summary> 
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.MAXIMIZEBOX">
            <summary>窗口有最大化按钮。不能与 WS_EX_CONTEXTHELP 样式结合使用。还必须指定 WS_SYSMENU 样式。</summary> 
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.MINIMIZE">
            <summary>窗口开始处于最小化。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.MINIMIZEBOX">
            <summary>窗口有最小化按钮。不能与 WS_EX_CONTEXTHELP 样式结合使用。还必须指定 WS_SYSMENU 样式。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.OVERLAPPED">
            <summary>窗口是重叠的窗口。重叠窗口具有标题栏和边框。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.OVERLAPPEDWINDOW">
            <summary>窗口是重叠的窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.POPUP">
            <summary>该窗口为弹出窗口。此样式不能与 WS_CHILD 样式一起使用。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.POPUPWINDOW">
            <summary>该窗口为弹出窗口。必须组合 WS_CAPTION 和 WS_POPUPWINDOW 样式才能使窗口菜单可见。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.SIZEFRAME">
            <summary>窗口有尺寸边框。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.SYSMENU">
            <summary>窗口的标题栏上有窗口菜单。还必须指定 WS_CAPTION 样式。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.TABSTOP">
            <summary>该窗口为控件，当用户按下 TAB 键时，该控件可以接收键盘焦点。按 TAB 键可将键盘焦点更改为 WS_TABSTOP 样式的下一个控件。您可以打开和关闭此样式以更改对话框导航。要在创建窗口后更改此样式，请使用 SetWindowLong 函数。对于用户创建的窗口和无模式对话框以使用制表位，请更改消息循环以调用 IsDialogMessage 函数。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.VISIBLE">
            <summary>窗口开始可见。可以使用 ShowWindow 或 SetWindowPos 函数打开和关闭此样式。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.VSCROLL">
            <summary>窗口有垂直滚动条。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.ACCEPTFILES">
            <summary>指定使用此样式创建的窗口接受拖放文件。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.APPWINDOW">
            <summary>当窗口可见时，强制顶层窗口进入任务栏。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.CLIENTEDGE">
            <summary>指定窗口具有带凹陷边的边框。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.COMPOSITED">
            <summary>Windows XP: 使用双缓冲以底部到顶部绘制顺序绘制窗口的所有后代。详细信息请参阅如果窗口具有 CS_OWNDC 或 CS_CLASSDC 的类样式，则不能使用此方法。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.CONTEXTHELP">
            <summary>窗口的标题栏中包含一个问号。当用户单击问号时，光标将变为带有指针的问号。如果用户然后单击子窗口，则子项将收到 WM_HELP 消息。子窗口应该将消息传递给父级窗口过程，该过程应该使用 HELP_WM_HELP 命令调用 WinHelp 函数。“帮助”应用程序显示一个弹出窗口，该窗口通常包含子窗口的帮助。WS_EX_CONTEXTHELP 不能与 WS_MAXIMIZEBOX 或 WS_MINIMIZEBOX 样式一起使用。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.CONTROLPARENT">
            <summary>窗口本身包含应该参与对话框导航的子窗口。如果指定了此样式，则对话管理器在执行导航操作（例如处理 TAB 键，箭头键或键盘助记符）时会递归到此窗口的子项中。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.DLGMODALFRAME">
            <summary>创建一个具有双边框的窗口；通过在 dwStyle 参数中指定 WS_CAPTION 样式，可以选择使用标题栏创建窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.LAYERED">
            <summary>Windows 2000/XP: 创建分层窗口。注意：不能用于子窗口。此外，如果窗口具有 CS_OWNDC 或 CS_CLASSDC 的类样式，则不能使用此方法。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.LAYOUTRTL">
            <summary>阿拉伯语和希伯来语版本的 Windows 98 / Me，Windows 2000 / XP：创建水平原点位于右边缘的窗口。增加水平值向左前进。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.LEFT">
            <summary>创建具有通用左对齐属性的窗口。这是默认值。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.LEFTSCROLLBAR">
            <summary>如果 shell 语言是希伯来语、阿拉伯语或支持阅读顺序对齐的其他语言，则垂直滚动条（如果存在）位于工作区的左侧。其他语言中将忽略该样式。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.LTRREADING">
            <summary>窗口文本使用从左到右的阅读顺序属性显示。这是默认值。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.MDICHILD">
            <summary>创建多文档界面 （MDI） 子窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.NOACTIVATE">
            <summary>Windows 2000/XP: 使用此样式创建的顶层窗口在用户单击时不会成为前台窗口。当用户最小化或关闭前景窗口时，系统不会将此窗口置于前台。要激活窗口，请使用 SetActiveWindow 或 SetForegroundWindow 函数。默认情况下，窗口不会出现在任务栏上。要强制窗口显示在任务栏上，请使用 WS_EX_APPWINDOW 样式。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.NOINHERITLAYOUT">
            <summary>Windows 2000/XP: 使用此样式创建的窗口不会将其窗口布局传递给其子窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.NOPARENTNOTIFY">
            <summary>指定使用此样式创建的子窗口在创建或销毁时不会将 WM_PARENTNOTIFY 消息发送到其父级窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.OVERLAPPEDWINDOW">
            <summary>结合 WS_EX_CLIENTEDGE 和 WS_EX_WINDOWEDGE 样式。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.PALETTEWINDOW">
            <summary>结合 WS_EX_WINDOWEDGE，WS_EX_TOOLWINDOW 和 WS_EX_TOPMOST 样式。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.RIGHT">
            <summary>该窗口具有通用的“右对齐”属性。这取决于窗口类。仅当 shell 语言是希伯来语，阿拉伯语或支持阅读顺序对齐的其他语言时，此样式才有效；否则将忽略此风格。对静态或编辑控件使用 WS_EX_RIGHT 样式分别与使用 SS_RIGHT 或 ES_RIGHT 样式具有相同的效果。使用带有按钮控件的此样式与使用 BS_RIGHT 和 BS_RIGHTBUTTON 样式具有相同的效果。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.RIGHTSCROLLBAR">
            <summary>垂直滚动条（如果存在）位于工作区右侧。这是默认值。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.RTLREADING">
            <summary>如果 shell 语言是希伯来语，阿拉伯语或支持阅读顺序对齐的其他语言，则使用从右到左的阅读顺序属性显示窗口文本。其他语言中将忽略该样式。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.STATICEDGE">
            <summary>创建具有三维边框样式的窗口，用于不接受用户输入的项目。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.TOOLWINDOW">
            <summary>创建工具窗口；也就是说，这是用作浮动工具栏的窗口。工具窗口的标题栏比普通标题栏短，窗口标题使用较小的字体绘制。工具窗口不会出现在任务栏或用户按下 ALT TAB 时出现的对话框中。如果工具窗口有系统菜单，则其图标不会显示在标题栏上。但是，您可以通过右键单击或键入 ALT SPACE 来显示系统菜单。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.TOPMOST">
            <summary>指定使用此样式创建的窗口应放置在所有非最顶层窗口的上方，并且即使窗口已停用，也应保持在它们上方。要添加或删除此样式，请使用 SetWindowPos 函数。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.TRANSPARENT">
            <summary>指定在绘制窗口下方（由同一个线程创建）的同层级节点之前，不应绘制使用此样式创建的窗口。窗口显示为透明，因为底层同层级窗口的位已经被绘制。要在没有这些限制的情况下实现透明度，请使用 SetWindowRgn 函数。</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.WINDOWEDGE">
            <summary>指定窗口具有带凸起边的边框。</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_HIDE">
            <summary>隐藏窗口并激活另一个窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_SHOWNORMAL">
            <summary>激活并显示一个窗口。如果窗口最小化或最大化，系统会将其恢复到原始大小和位置。应用程序应在首次显示窗口时指定此标志。</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_NORMAL">
            <summary>激活并显示一个窗口。如果窗口最小化或最大化，系统会将其恢复到原始大小和位置。应用程序应在首次显示窗口时指定此标志。</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_SHOWMINIMIZED">
            <summary>激活窗口并将其显示为最小化窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_SHOWMAXIMIZED">
            <summary>激活窗口并将其显示为最大化窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_MAXIMIZE">
            <summary>将指定窗口最大化。</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_SHOWNOACTIVATE">
            <summary>显示最近大小和位置的窗口。这个值类似于 <see cref="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_SHOWNORMAL"/>，窗口未激活。</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_SHOW">
            <summary>激活窗口并以当前大小和位置显示它。</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_MINIMIZE">
            <summary>最小化指定的窗口并激活z顺序中的下一个顶层窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_SHOWMINNOACTIVE">
            <summary>将窗口显示为最小化窗口。这个值类似于 <see cref="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_SHOWMINIMIZED"/>，窗口未激活。</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_SHOWNA">
            <summary>以当前大小和位置显示窗口。这个值类似于 <see cref="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_SHOW"/>，窗口未激活。</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_RESTORE">
            <summary>激活并显示窗口。如果窗口最小化或最大化，系统会将其恢复到原始大小和位置。应用程序应在还原最小化窗口时指定此标志。</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.RedrawWindowFlags.Invalidate">
            <summary>使您在 lprcUpdate 或 hrgnUpdate 中指定的矩形或区域无效。您只能将其中一个参数设置为非 NULL 值。如果两者都为 NULL，则 RDW_INVALIDATE 使整个窗口无效。</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.RedrawWindowFlags.InternalPaint">
            <summary>无论窗口的一部分是否无效，都会使 OS 将 WM_PAINT 消息发布到窗口。</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.RedrawWindowFlags.Erase">
            <summary>在重新绘制窗口时使窗口接收 WM_ERASEBKGND 消息。将此值与 RDW_INVALIDATE 值一起指定；否则，RDW_ERASE 无效。</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.RedrawWindowFlags.Validate">
            <summary>验证您在 lprcUpdate 或 hrgnUpdate 中指定的矩形或区域。您只能将其中一个参数设置为非 NULL 值。如果两者都为 NULL，则 RDW_VALIDATE 验证整个窗口。此值不会影响内部 WM_PAINT 消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.RedrawWindowFlags.NoErase">
            <summary>禁止挂起任何 WM_ERASEBKGND 消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.RedrawWindowFlags.NoChildren">
            <summary>从重新绘制操作中排除子窗口（如果有）。</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.RedrawWindowFlags.AllChildren">
            <summary>在重新绘制操作中包括子窗口（如果有的话）。</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.RedrawWindowFlags.UpdateNow">
            <summary>如果需要，通过设置 RDW_ALLCHILDREN和RDW_NOCHILDREN 值指定受影响的窗口，以在 RedrawWindow 返回之前接收 WM_ERASEBKGND 和 WM_PAINT 消息。</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.RedrawWindowFlags.EraseNow">
            <summary>如果需要，通过设置 RDW_ALLCHILDREN 和 RDW_NOCHILDREN 值指定受影响的窗口，以在 RedrawWindow 返回之前接收 WM_ERASEBKGND 消息。受影响的窗口平时接收 WM_PAINT 消息。</summary>
        </member>
        <member name="M:MahApps.Metro.Native.RECT.Equals(System.Object)">
            <summary>确定 2 RECT 是否相等（深度比较）</summary>
        </member>
        <member name="M:MahApps.Metro.Native.RECT.GetHashCode">
            <summary>返回此结构的 HashCode（不保证唯一性）</summary>
        </member>
        <member name="T:MahApps.Metro.Native.UnsafeNativeMethods">
            <devdoc>http://msdn.microsoft.com/zh-cn/library/ms182161.aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.DwmIsCompositionEnabled">
            <devdoc>http://msdn.microsoft.com/zh-cn/library/windows/desktop/aa969518%28v=vs.85%29.aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.DwmExtendFrameIntoClientArea(System.IntPtr,MahApps.Metro.Native.MARGINS@)">
            <devdoc>http://msdn.microsoft.com/zh-cn/library/windows/desktop/aa969512%28v=vs.85%29.aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.DwmSetWindowAttribute(System.IntPtr,System.Int32,System.Int32@,System.Int32)">
            <devdoc>http://msdn.microsoft.com/zh-cn/library/windows/desktop/aa969524%28v=vs.85%29.aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.DefWindowProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <devdoc>http://msdn.microsoft.com/zh-cn/library/windows/desktop/ms633572%28v=vs.85%29.aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.GetMonitorInfo(System.IntPtr,MahApps.Metro.Native.MONITORINFO)">
            <devdoc>http://msdn.microsoft.com/zh-cn/library/dd144901%28v=VS.85%29.aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.MonitorFromWindow(System.IntPtr,System.Int32)">
            <devdoc>http://msdn.microsoft.com/zh-cn/library/dd145064%28v=VS.85%29.aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <devdoc>http://msdn.microsoft.com/zh-cn/library/windows/desktop/ms633545(v=vs.85).aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.LoadString(MahApps.Metro.Native.SafeLibraryHandle,System.UInt32,System.Text.StringBuilder,System.Int32)">
            <devdoc>http://msdn.microsoft.com/zh-cn/library/windows/desktop/ms647486%28v=vs.85%29.aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.IsWindow(System.IntPtr)">
            <devdoc>http://msdn.microsoft.com/zh-cn/library/windows/desktop/ms633528(v=vs.85).aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.GetSystemMenu(System.IntPtr,System.Boolean)">
            <devdoc>http://msdn.microsoft.com/zh-cn/library/windows/desktop/ms647985(v=vs.85).aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.TrackPopupMenuEx(System.IntPtr,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.IntPtr)">
            <devdoc>http://msdn.microsoft.com/zh-cn/library/windows/desktop/ms648003(v=vs.85).aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods._PostMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <devdoc>http://msdn.microsoft.com/zh-cn/library/windows/desktop/ms644944(v=vs.85).aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.GetCursorPos(MahApps.Metro.Native.POINT@)">
            <devdoc>http://msdn.microsoft.com/zh-cn/library/windows/desktop/ms648390(v=vs.85).aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.GetDoubleClickTime">
            <devdoc>http://msdn.microsoft.com/zh-cn/library/windows/desktop/ms646258(v=vs.85).aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.LoadLibrary(System.String)">
            <devdoc>http://msdn.microsoft.com/zh-cn/library/windows/desktop/ms684175%28v=vs.85%29.aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.FreeLibrary(System.IntPtr)">
            <devdoc>http://msdn.microsoft.com/zh-cn/library/windows/desktop/ms683152%28v=vs.85%29.aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.SetWindowPlacement(System.IntPtr,MahApps.Metro.Native.WINDOWPLACEMENT@)">
            <summary>设置显示状态，以及指定窗口的回复、最小化和最大化位置。</summary>
            <param name="hWnd">窗口图柄。</param>
            <param name="lpwndpl">指向 WINDOWPLACEMENT 结构的指针，指定新的显示状态和窗口位置。<para>调用 SetWindowPlacement 之前，将 WINDOWPLACEMEN T结构的 length 成员设置为 sizeof（WINDOWPLACEMENT）。如果未正确设置长度成员，SetWindowPlacement 将失败。</para>
            </param>
            <returns>如果函数成功，则返回值为非零值。<para>如果函数失败，则返回值为零。要获取扩展错误信息，请调用 GetLastError。</para>
            </returns>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.GetWindowPlacement(System.IntPtr,MahApps.Metro.Native.WINDOWPLACEMENT@)">
            <summary>检索显示状态，以及指定窗口的回复、最小化和最大化位置。</summary>
            <param name="hWnd">窗口图柄。</param>
            <param name="lpwndpl">指向 WINDOWPLACEMENT 结构的指针，该结构接收显示状态和位置信息。<para>调用 GetWindowPlacement 之前，将 length 成员设置为 sizeof（WINDOWPLACEMENT）。如果未正确设置 lpwndpl-&gt; length，GetWindowPlacement 将失败。</para>
            </param>
            <returns>如果函数成功，则返回值为非零值。<para>如果函数失败，则返回值为零。要获取扩展错误信息，请调用 GetLastError。</para>
            </returns>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.EnableMenuItem(System.IntPtr,System.UInt32,System.UInt32)">
            <devdoc>http://msdn.microsoft.com/zh-cn/library/windows/desktop/ms647636(v=vs.85).aspx</devdoc>
        </member>
        <member name="T:MahApps.Metro.ThemeManager">
            <summary>允许检测和更改 MetroWindow 主题和突出。</summary>
        </member>
        <member name="P:MahApps.Metro.ThemeManager.Accents">
            <summary>获取所有默认主题的列表。</summary>
        </member>
        <member name="P:MahApps.Metro.ThemeManager.AppThemes">
            <summary>获取所有默认 metro 主题的列表。</summary>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.AddAccent(System.String,System.Uri)">
            <summary>添加具有给定名称的突出。</summary>
            <param name="name"></param>
            <param name="resourceAddress"></param>
            <returns>如果突出不存在且可以添加，则为 true。</returns>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.AddAppTheme(System.String,System.Uri)">
            <summary>添加具有给定名称的应用主题。</summary>
            <param name="name"></param>
            <param name="resourceAddress"></param>
            <returns>如果应用主题不存在且可以添加，则为 true。</returns>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.GetAppTheme(System.Windows.ResourceDictionary)">
            <summary>使用给定的资源字典获取应用程序主题。</summary>
            <param name="resources"></param>
            <returns>AppTheme</returns>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.GetAppTheme(System.String)">
            <summary>获取具有给定名称和主题类型（白色或黑色）的应用主题。</summary>
            <param name="appThemeName"></param>
            <returns>AppTheme</returns>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.GetInverseAppTheme(MahApps.Metro.AppTheme)">
            <summary>得到反转 <see cref="T:MahApps.Metro.AppTheme" /> 给定的 <see cref="T:MahApps.Metro.AppTheme"/>。该方法依赖于存在的“黑色”或“白色”词缀。</summary>
            <param name="appTheme">应用主题。</param>
            <returns>如果找不到的话，则相反 <see cref="T:MahApps.Metro.AppTheme"/> 或为 <c>null</c> 。</returns>
            <remarks>如果给出 BaseDark，则返回 BaseLight，反之亦然。自定义主题必须以“Dark”或“Light”结尾才能使用，例如“CustomDark”和“CustomLight”。</remarks>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.GetAccent(System.String)">
            <summary>获取 <see cref="T:MahApps.Metro.Accent"/> 用给定的名字。</summary>
            <param name="accentName"></param>
            <returns>如果找不到应用主题，该 <see cref="T:MahApps.Metro.Accent"/> 要么为 <c>null</c></returns>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.GetAccent(System.Windows.ResourceDictionary)">
            <summary>获取 <see cref="T:MahApps.Metro.Accent"/> 使用给定的资源字典。</summary>
            <param name="resources"></param>
            <returns>如果没有找到突出，该 <see cref="T:MahApps.Metro.Accent"/> 要么为 <c>null</c>。</returns>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.IsAccentDictionary(System.Windows.ResourceDictionary)">
            <summary>确定指定的资源字典是否表示 <see cref="T:MahApps.Metro.Accent"/>。<para />这可能包括没有资源 uri 运行时的突出。</summary>
            <param name="resources">资源。</param>
            <returns>如果资源字典是，则为<c>true</c>  <see cref="T:MahApps.Metro.Accent"/>；除此以外，则为 <c>false</c>。</returns>
            <exception cref="T:System.ArgumentNullException">资源</exception>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.GetResourceFromAppStyle(System.Windows.Window,System.String)">
            <summary>从检测到的 AppStyle 中获取资源。</summary>
            <param name="window">要检查的窗口。如果为 null，则将检查应用程序的源。</param>
            <param name="key">检查关键。</param>
            <returns>资源对象，如果未找到资源，则返回 null。</returns>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.ChangeAppTheme(System.Windows.Application,System.String)">
            <summary>更改整个应用程序的主题。</summary>
            <param name="app"></param>
            <param name="themeName"></param>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.ChangeAppTheme(System.Windows.Window,System.String)">
            <summary>更改给定窗口的主题。</summary>
            <param name="window"></param>
            <param name="themeName"></param>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.ChangeAppStyle(System.Windows.Application,MahApps.Metro.Accent,MahApps.Metro.AppTheme)">
            <summary>更改整个应用程序的突出和主题。</summary>
            <param name="app">要更改的应用程序实例。</param>
            <param name="newAccent">申请的突出。</param>
            <param name="newTheme">申请的主题。</param>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.ChangeAppStyle(System.Windows.Window,MahApps.Metro.Accent,MahApps.Metro.AppTheme)">
            <summary>更改给定窗口的突出和主题。</summary>
            <param name="window">更改的窗口。</param>
            <param name="newAccent">申请的突出。</param>
            <param name="newTheme">申请的主题。</param>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.ChangeAppStyle(System.Windows.ResourceDictionary,MahApps.Metro.Accent,MahApps.Metro.AppTheme)">
            <summary>直接更改 ResourceDictionary 的突出和主题。</summary>
            <param name="resources">要修改的 ResourceDictionary。</param>
            <param name="newAccent">应用于 ResourceDictionary 的突出。</param>
            <param name="newTheme">要应用于 ResourceDictionary 的主题。</param>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.CopyResource(System.Windows.ResourceDictionary,System.Windows.ResourceDictionary)">
            <summary>将所有资源键从一个资源复制到另一个资源。</summary>
            <param name="fromRD">源资源字典。</param>
            <param name="toRD">目标资源字典。</param>
            <exception cref="T:System.ArgumentNullException">fromRD 或 toRD</exception>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.DetectAppStyle">
            <summary>扫描窗口资源并返回其突出和主题。</summary>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.DetectAppStyle(System.Windows.Window)">
            <summary>扫描窗口资源并返回其突出和主题。</summary>
            <param name="window">要扫描的窗口。</param>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.DetectAppStyle(System.Windows.Application)">
            <summary>扫描应用程序资源并返回其突出和主题。</summary>
            <param name="app">要扫描的应用程序实例。</param>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.DetectAppStyle(System.Windows.ResourceDictionary)">
            <summary>扫描资源并返回其突出和主题。</summary>
            <param name="resources">要检查的 ResourceDictionary。</param>
        </member>
        <member name="E:MahApps.Metro.ThemeManager.IsThemeChanged">
            <summary>如果强调颜色和主题被更改，则此事件将触发，这应该使用弱事件模式，但是现在已足够</summary>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.OnThemeChanged(MahApps.Metro.Accent,MahApps.Metro.AppTheme)">
            <summary>使全局颜色和资源无效。有时 ContextMenu 不会改变颜色，所以需要解决。</summary>
        </member>
        <member name="F:Standard.IID.ApplicationAssociationRegistration">
            <summary>IID_IApplicationAssociationRegistration</summary>
        </member>
        <member name="F:Standard.IID.ConnectionPoint">
            <summary>IID_IConnectionPoint</summary>
        </member>
        <member name="F:Standard.IID.ConnectionPointContainer">
            <summary>IID_IConnectionPointContainer</summary>
        </member>
        <member name="F:Standard.IID.EnumConnectionPoints">
            <summary>IID_IEnumConnectionPoints</summary>
        </member>
        <member name="F:Standard.IID.EnumConnections">
            <summary>IID_IEnumConnections</summary>
        </member>
        <member name="F:Standard.IID.EnumIdList">
            <summary>IID_IEnumIDList</summary>
        </member>
        <member name="F:Standard.IID.EnumObjects">
            <summary>IID_IEnumObjects</summary>
        </member>
        <member name="F:Standard.IID.FileDialog">
            <summary>IID_IFileDialog</summary>
        </member>
        <member name="F:Standard.IID.FileDialogEvents">
            <summary>IID_IFileDialogEvents</summary>
        </member>
        <member name="F:Standard.IID.FileOpenDialog">
            <summary>IID_IFileOpenDialog</summary>
        </member>
        <member name="F:Standard.IID.FileSaveDialog">
            <summary>IID_IFileSaveDialog</summary>
        </member>
        <member name="F:Standard.IID.HtmlDocument">
            <summary>IID_IHTMLDocument</summary>
        </member>
        <member name="F:Standard.IID.HtmlDocument2">
            <summary>IID_IHTMLDocument2</summary>
        </member>
        <member name="F:Standard.IID.ModalWindow">
            <summary>IID_IModalWindow</summary>
        </member>
        <member name="F:Standard.IID.ObjectArray">
            <summary>IID_IObjectArray</summary>
        </member>
        <member name="F:Standard.IID.ObjectCollection">
            <summary>IID_IObjectCollection</summary>
        </member>
        <member name="F:Standard.IID.PropertyNotifySink">
            <summary>IID_IPropertyNotifySink</summary>
        </member>
        <member name="F:Standard.IID.PropertyStore">
            <summary>IID_IPropertyStore</summary>
        </member>
        <member name="F:Standard.IID.ServiceProvider">
            <summary>IID_IServiceProvider</summary>
        </member>
        <member name="F:Standard.IID.ShellFolder">
            <summary>IID_IShellFolder</summary>
        </member>
        <member name="F:Standard.IID.ShellLink">
            <summary>IID_IShellLink</summary>
        </member>
        <member name="F:Standard.IID.ShellItem">
            <summary>IID_IShellItem</summary>
        </member>
        <member name="F:Standard.IID.ShellItem2">
            <summary>IID_IShellItem2</summary>
        </member>
        <member name="F:Standard.IID.ShellItemArray">
            <summary>IID_IShellItemArray</summary>
        </member>
        <member name="F:Standard.IID.TaskbarList">
            <summary>IID_ITaskbarList</summary>
        </member>
        <member name="F:Standard.IID.TaskbarList2">
            <summary>IID_ITaskbarList2</summary>
        </member>
        <member name="F:Standard.IID.Unknown">
            <summary>IID_IUnknown</summary>
        </member>
        <member name="F:Standard.IID.WebBrowser2">
            <summary>IID_IWebBrowser2</summary>
        </member>
        <member name="F:Standard.IID.WebBrowserEvents">
            <summary>DIID_DWebBrowserEvents</summary>
        </member>
        <member name="F:Standard.IID.WebBrowserEvents2">
            <summary>IID_DWebBrowserEvents2</summary>
        </member>
        <member name="F:Standard.IID.WICBitmapDecoder">
            <summary>IID_IWICBitmapDecoder</summary>
        </member>
        <member name="F:Standard.IID.WICBitmapFlipRotator">
            <summary>IID_IWICBitmapFlipRotator</summary>
        </member>
        <member name="F:Standard.IID.WICBitmapFrameDecode">
            <summary>IID_IWICBitmapFrameDecode</summary>
        </member>
        <member name="F:Standard.IID.WICBitmap">
            <summary>IID_IWICBitmap</summary>
        </member>
        <member name="F:Standard.IID.WICBitmapSource">
            <summary>IID_IWICBitmapSource</summary>
        </member>
        <member name="F:Standard.IID.WICFormatConverter">
            <summary>IID_IWICFormatConverter</summary>
        </member>
        <member name="F:Standard.IID.WICImagingFactory">
            <summary>IID_IWICImagingFactory</summary>
        </member>
        <member name="F:Standard.IID.WICStream">
            <summary>IID_IWICStream</summary>
        </member>
        <member name="F:Standard.IID.ApplicationDestinations">
            <summary>IID_IApplicationDestinations</summary>
        </member>
        <member name="F:Standard.IID.ApplicationDocumentLists">
            <summary>IID_IApplicationDocumentLists</summary>
        </member>
        <member name="F:Standard.IID.CustomDestinationList">
            <summary>IID_ICustomDestinationList</summary>
        </member>
        <member name="F:Standard.IID.ObjectWithAppUserModelId">
            <summary>IID_IObjectWithAppUserModelID</summary>
        </member>
        <member name="F:Standard.IID.ObjectWithProgId">
            <summary>IID_IObjectWithProgID</summary>
        </member>
        <member name="F:Standard.IID.TaskbarList3">
            <summary>IID_ITaskbarList3</summary>
        </member>
        <member name="F:Standard.IID.TaskbarList4">
            <summary>IID_ITaskbarList4</summary>
        </member>
        <member name="F:Standard.SID.SWebBrowserApp">
            <summary>SID_SWebBrowserApp</summary>
        </member>
        <member name="F:Standard.CLSID.ApplicationAssociationRegistration">
            <summary>CLSID_ApplicationAssociationRegistration</summary>
            <remarks>IID_IApplicationAssociationRegistration</remarks>
        </member>
        <member name="F:Standard.CLSID.DragDropHelper">
            <summary>CLSID_DragDropHelper</summary>
        </member>
        <member name="F:Standard.CLSID.FileOpenDialog">
            <summary>CLSID_FileOpenDialog</summary>
            <remarks>IID_IFileOpenDialog</remarks>
        </member>
        <member name="F:Standard.CLSID.FileSaveDialog">
            <summary>CLSID_FileSaveDialog</summary>
            <remarks>IID_IFileSaveDialog</remarks>
        </member>
        <member name="F:Standard.CLSID.TaskbarList">
            <summary>CLSID_TaskbarList</summary>
            <remarks>IID_ITaskbarList</remarks>
        </member>
        <member name="F:Standard.CLSID.EnumerableObjectCollection">
            <summary>CLSID_EnumerableObjectCollection</summary>
            <remarks>IID_IEnumObjects.</remarks>
        </member>
        <member name="F:Standard.CLSID.ShellLink">
            <summary>CLSID_ShellLink</summary>
            <remarks>IID_IShellLink</remarks>
        </member>
        <member name="F:Standard.CLSID.WICImagingFactory">
            <summary>CLSID_WICImagingFactory</summary>
        </member>
        <member name="F:Standard.CLSID.DestinationList">
            <summary>CLSID_DestinationList</summary>
            <remarks>IID_ICustomDestinationList</remarks>
        </member>
        <member name="F:Standard.CLSID.ApplicationDestinations">
            <summary>CLSID_ApplicationDestinations</summary>
            <remarks>IID_IApplicationDestinations</remarks>
        </member>
        <member name="F:Standard.CLSID.ApplicationDocumentLists">
            <summary>CLSID_ApplicationDocumentLists</summary>
            <remarks>IID_IApplicationDocumentLists</remarks>
        </member>
        <member name="T:Standard.Assert">
            <summary>用于验证假设的静态类应用程序。</summary>
        </member>
        <member name="T:Standard.Assert.EvaluateFunction">
            <summary>Assert.Evaluate 函数签名。</summary>
        </member>
        <member name="T:Standard.Assert.ImplicationFunction">
            <summary>Assert 函数签名.Implies。</summary>
            <returns>返回谓词的真实性。</returns>
        </member>
        <member name="M:Standard.Assert.Evaluate(Standard.Assert.EvaluateFunction)">
            <summary>执行指定参数。</summary>
            <param name="argument">要执行的功能。</param>
        </member>
        <member name="M:Standard.Assert.Equals``1(``0,``0)">
            <summary>过时：使用 Standard.Assert.AreEqual 而不是 Assert.Equals</summary>
            <typeparam name="T">要比较相等性的泛型类型。</typeparam>
            <param name="expected">要比较的第一个通用类型数据。为预期值。</param>
            <param name="actual">要比较的第二个通用类型数据。为是实际值。</param>
        </member>
        <member name="M:Standard.Assert.AreEqual``1(``0,``0)">
            <summary>验证两个泛型类型数据是否相等。若不是，则声明失败。</summary>
            <typeparam name="T">要比较相等性的泛型类型。</typeparam>
            <param name="expected">要比较的第一个通用类型数据。为预期值。</param>
            <param name="actual">要比较的第二个通用类型数据。为是实际值。</param>
            <remarks>声明失败的情况下，会进入调试器。</remarks>
        </member>
        <member name="M:Standard.Assert.AreNotEqual``1(``0,``0)">
            <summary>验证两个泛型类型数据不相等。若有，则声明失败。</summary>
            <typeparam name="T">用于比较不等式的通用类型。</typeparam>
            <param name="notExpected">要比较的第一个通用类型数据。为不期望值。</param>
            <param name="actual">要比较的第二个通用类型数据。为是实际值。</param>
            <remarks>声明失败的情况下，会进入调试器。</remarks>
        </member>
        <member name="M:Standard.Assert.Implies(System.Boolean,System.Boolean)">
            <summary>验证如果指定的条件为 true，那么结果也是如此。如果条件为 true 但结果为 false，则声明失败。</summary>
            <param name="condition">如果设置为 <c>true</c> [条件]。</param>
            <param name="result">第二个布尔语句。如果第一个是 true，那么这一定是必须的。如果第一个语句为 false，则忽略该值。</param>
            <remarks>声明失败的情况下，会进入调试器。</remarks>
        </member>
        <member name="M:Standard.Assert.Implies(System.Boolean,Standard.Assert.ImplicationFunction)">
            <summary>延后计算超载。验证如果条件为 true，那么辅助值也是如此。</summary>
            <param name="condition">条件值。</param>
            <param name="result">如果条件参数为 trur，则要对真值求值的函数。</param>
            <remarks>如果第一个条件为 true，则此重载仅评估结果。</remarks>
        </member>
        <member name="M:Standard.Assert.IsNeitherNullNorEmpty(System.String)">
            <summary>验证字符串是否包含内容。即它不是 null 且它也不为空。</summary>
            <param name="value">要验证的字符串。</param>
        </member>
        <member name="M:Standard.Assert.IsNeitherNullNorWhitespace(System.String)">
            <summary>验证字符串是否包含内容。即它不是 null，也不仅仅为空。</summary>
            <param name="value">要验证的字符串。</param>
        </member>
        <member name="M:Standard.Assert.IsNotNull``1(``0)">
            <summary>验证指定的值不为 null。声明如果失败则失败。</summary>
            <typeparam name="T">通用引用类型。</typeparam>
            <param name="value">要检查 nullness 的值。</param>
            <remarks>声明失败的情况下，会进入调试器。</remarks>
        </member>
        <member name="M:Standard.Assert.IsFalse(System.Boolean)">
            <summary>验证指定的条件是否为 false。如果确实如此，声明就会失败。</summary>
            <param name="condition">表达应该是 <c>false</c>。</param>
            <remarks>声明失败的情况下，会进入调试器。</remarks>
        </member>
        <member name="M:Standard.Assert.IsFalse(System.Boolean,System.String)">
            <summary>验证指定的条件是否为 false。如果确实如此，声明就会失败。</summary>
            <param name="condition">表达应该是 <c>false</c>。</param>
            <param name="message">条件是否为<c>true </c>的消息 。</param>
            <remarks>声明失败的情况下，会进入调试器。</remarks>
        </member>
        <member name="M:Standard.Assert.IsTrue(System.Boolean)">
            <summary>验证指定的条件是否为 true。若不是，则声明失败</summary>
            <param name="condition">预期为 <c>true</c> 的条件。</param>
            <remarks>声明失败的情况下，会进入调试器。</remarks>
        </member>
        <member name="M:Standard.Assert.IsTrue(System.Boolean,System.String)">
            <summary>验证指定的条件是否为 true。若不是，则声明失败</summary>
            <param name="condition">预期为 <c>true</c> 的条件。</param>
            <param name="message">在条件为 <c>false</c>时写入的消息。</param>
            <remarks>声明失败的情况下，会进入调试器。</remarks>
        </member>
        <member name="M:Standard.Assert.Fail">
            <summary>不应该执行此行。声明总是失败。</summary>
            <remarks>声明失败的情况下，会进入调试器。</remarks>
        </member>
        <member name="M:Standard.Assert.Fail(System.String)">
            <summary>不应该执行此行。声明总是失败。</summary>
            <param name="message">执行此功能时显示的消息。</param>
            <remarks>声明失败的情况下，会进入调试器。</remarks>
        </member>
        <member name="M:Standard.Assert.IsNull``1(``0)">
            <summary>验证指定对象是否为 null。若不是，则声明失败</summary>
            <param name="item">要验证的项目为 null。</param>
        </member>
        <member name="M:Standard.Assert.BoundedDoubleInc(System.Double,System.Double,System.Double)">
            <summary>验证指定值是否在预期范围内。若不是，则声明失败。</summary>
            <param name="lowerBoundInclusive">下限包含值。</param>
            <param name="value">要验证的值。</param>
            <param name="upperBoundInclusive">上限包含值。</param>
        </member>
        <member name="M:Standard.Assert.BoundedInteger(System.Int32,System.Int32,System.Int32)">
            <summary>验证指定值是否在预期范围内。若不是，则声明失败。</summary>
            <param name="lowerBoundInclusive">下限包含值。</param>
            <param name="value">要验证的值。</param>
            <param name="upperBoundExclusive">上限独占值。</param>
        </member>
        <member name="M:Standard.Assert.IsApartmentState(System.Threading.ApartmentState)">
            <summary>验证当前线程的套间状态是否符合预期。若不是，则声明失败</summary>
            <param name="expectedState">当前线程的预期套间状态。</param>
            <remarks>声明失败的情况下，会进入调试器。</remarks>
        </member>
        <member name="T:Standard.DoubleUtilities">
            <summary>DoubleUtil 使用固定 eps 为双精度字型提供模糊比较功能。请注意，FP 噪声是一个大问题，使用任何这些比较方法都不是一个完整的解决方案，而是减少重复不必要工作可能性的方法。</summary>
        </member>
        <member name="F:Standard.DoubleUtilities.Epsilon">
            <summary>Epsilon  - 随机或多或少，小数字或多或少。</summary>
        </member>
        <member name="M:Standard.DoubleUtilities.AreClose(System.Double,System.Double)">
            <summary>AreClose 返回两个双打是否“关闭”。也就是说，它们是否在彼此的 epsilon 之内。即使对于理论上相同的数字，有很多方法可以返回f alse，因此如果返回 false，则调用此代码的代码将无法工作。</summary>
            <param name="value1">比较的第一个双精度字型。</param>
            <param name="value2">比较的第二个双精度字型。</param>
            <returns>AreClose 比较的结果。</returns>
        </member>
        <member name="M:Standard.DoubleUtilities.IsStrictlyLessThan(System.Double,System.Double)">
            <summary>LessThan 返回第一个双精度字型是否小于第二个双精度字型。也就是说，第一个是否严格小于*和*不在另一个数的 epsilon 之内。即使对于理论上相同的数字，有很多方法可以返回f alse，因此如果返回 false，则调用此代码的代码将无法工作。</summary>
            <param name="value1">比较的第一个双精度字型。</param>
            <param name="value2">比较的第二个双精度字型。</param>
            <returns>LessThan 比较的结果。</returns>
        </member>
        <member name="M:Standard.DoubleUtilities.IsStrictlyGreaterThan(System.Double,System.Double)">
            <summary>GreaterThan 返回第一个双精度字型是否大于第二个双精度字型。也就是说，第一个是否严格大于*和*不在另一个数的 epsilon 之内。即使对于理论上相同的数字，有很多方法可以返回f alse，因此如果返回 false，则调用此代码的代码将无法工作。</summary>
            <param name="value1">比较的第一个双精度字型。</param>
            <param name="value2">比较的第二个双精度字型。</param>
            <returns>GreaterThan 比较的结果。</returns>
        </member>
        <member name="M:Standard.DoubleUtilities.IsLessThanOrCloseTo(System.Double,System.Double)">
            <summary>LessThanOrClose 返回第一个双精度字型是否小于或接近第二个双精度字型。也就是说，第一个是否严格小于另一个数字的 epsilon。即使对于理论上相同的数字，有很多方法可以返回f alse，因此如果返回 false，则调用此代码的代码将无法工作。</summary>
            <param name="value1">比较的第一个双精度字型。</param>
            <param name="value2">比较的第二个双精度字型。</param>
            <returns>LessThanOrClose 比较的结果。</returns>
        </member>
        <member name="M:Standard.DoubleUtilities.IsGreaterThanOrCloseTo(System.Double,System.Double)">
            <summary>GreaterThanOrClose 返回第一个双精度字型是否大于或接近第二个双精度字型。也就是说，第一个是否严格大于另一个数字的 epsilon。即使对于理论上相同的数字，有很多方法可以返回f alse，因此如果返回 false，则调用此代码的代码将无法工作。</summary>
            <param name="value1">比较的第一个双精度字型。</param>
            <param name="value2">比较的第二个双精度字型。</param>
            <returns>GreaterThanOrClose 比较的结果。</returns>
        </member>
        <member name="M:Standard.DoubleUtilities.IsFinite(System.Double)">
            <summary>测试双精度字型是否为有限数（不是 NaN 或无穷大）。</summary>
            <param name='value'>要测试的值。</param>
            <returns>该值是否是有限数。</returns>
        </member>
        <member name="M:Standard.DoubleUtilities.IsValidSize(System.Double)">
            <summary>测试以查看双精度字型是否为有效大小值（有限且&gt; 0）。</summary>
            <param name='value'>要测试的值。</param>
            <returns>该值是否为有效大小值。</returns>
        </member>
        <member name="M:Standard.DpiHelper.LogicalPixelsToDevice(System.Windows.Point)">
            <summary>将设备无关像素（1/96“）中的点转换为系统坐标中的点。</summary>
            <param name="logicalPoint">逻辑坐标系中的一个点。</param>
            <returns>返回转换为系统坐标的参数。</returns>
        </member>
        <member name="M:Standard.DpiHelper.DevicePixelsToLogical(System.Windows.Point)">
            <summary>将系统坐标中的点转换为设备无关像素中的点（1/96“）。</summary>
            <param name="devicePoint">物理坐标系中的一个点。</param>
            <returns>返回转换为设备无关坐标系的参数。</returns>
        </member>
        <member name="T:Standard.Win32Error">
            <summary>常用 Win32 状态代码的包装器。</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_SUCCESS">
            <summary>操作成功完成。</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_INVALID_FUNCTION">
            <summary>功能不正确。</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_FILE_NOT_FOUND">
            <summary>该系统找不到指定文件。</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_PATH_NOT_FOUND">
            <summary>该系统找不到指定路径。</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_TOO_MANY_OPEN_FILES">
            <summary>系统无法打开文件。</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_ACCESS_DENIED">
            <summary>访问被拒绝。</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_INVALID_HANDLE">
            <summary>图柄无效。</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_OUTOFMEMORY">
            <summary>没有足够的存储空间来完成此操作。</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_NO_MORE_FILES">
            <summary>没有更多文件。</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_SHARING_VIOLATION">
            <summary>该进程无法访问该文件，因为该文件正由另一个进程使用。</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_INVALID_PARAMETER">
            <summary>参数不正确。</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_INSUFFICIENT_BUFFER">
            <summary>传递给系统调用的数据区域太小。</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_NESTING_NOT_ALLOWED">
            <summary>无法嵌套对 LoadModule 的调用。</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_KEY_DELETED">
            <summary>尝试对已标记为删除的注册表项执行非法操作。</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_NOT_FOUND">
            <summary>找不到元素。</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_NO_MATCH">
            <summary>索引中的指定键没有匹配项。</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_BAD_DEVICE">
            <summary>指定了无效设备。</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_CANCELLED">
            <summary>该操作被用户取消。</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_CANNOT_FIND_WND_CLASS">
            <summary>找不到窗口类。</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_CLASS_ALREADY_EXISTS">
            <summary>窗口类已经注册。</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_INVALID_DATATYPE">
            <summary>指定的数据类型无效。</summary>
        </member>
        <member name="M:Standard.Win32Error.#ctor(System.Int32)">
            <summary>创建新的 Win32 错误。</summary>
            <param name="i">错误的整数值。</param>
        </member>
        <member name="M:Standard.Win32Error.op_Explicit(Standard.Win32Error)~Standard.HRESULT">
            <summary>执行 HRESULT_FROM_WIN32 转换。</summary>
            <param name="error">Win32 错误转换为 HRESULT。</param>
            <returns>等效的 HRESULT 值。</returns>
        </member>
        <member name="M:Standard.Win32Error.ToHRESULT">
            <summary>执行 HRESULT_FROM_WIN32 转换。</summary>
            <returns>等效的 HRESULT 值。</returns>
        </member>
        <member name="M:Standard.Win32Error.GetLastError">
            <summary>执行等效 Win32 的 GetLastError（）</summary>
            <returns>具有本机 GetLastError 结果的 Win32Error 实例</returns>
        </member>
        <member name="M:Standard.Win32Error.op_Equality(Standard.Win32Error,Standard.Win32Error)">
            <summary>比较两个 Win32 错误代码是否相等。</summary>
            <param name="errLeft">要比较的第一个错误代码。</param>
            <param name="errRight">要比较的第二个错误代码。</param>
            <returns>两个错误代码是否相同。</returns>
        </member>
        <member name="M:Standard.Win32Error.op_Inequality(Standard.Win32Error,Standard.Win32Error)">
            <summary>比较两个 Win32 错误代码的不等式。</summary>
            <param name="errLeft">要比较的第一个错误代码。</param>
            <param name="errRight">要比较的第二个错误代码。</param>
            <returns>两个错误代码是否不相同。</returns>
        </member>
        <member name="F:Standard.Facility.Null">
            <summary>FACILITY_NULL</summary>
        </member>
        <member name="F:Standard.Facility.Rpc">
            <summary>FACILITY_RPC</summary>
        </member>
        <member name="F:Standard.Facility.Dispatch">
            <summary>FACILITY_DISPATCH</summary>
        </member>
        <member name="F:Standard.Facility.Storage">
            <summary>FACILITY_STORAGE</summary>
        </member>
        <member name="F:Standard.Facility.Itf">
            <summary>FACILITY_ITF</summary>
        </member>
        <member name="F:Standard.Facility.Win32">
            <summary>FACILITY_WIN32</summary>
        </member>
        <member name="F:Standard.Facility.Windows">
            <summary>FACILITY_WINDOWS</summary>
        </member>
        <member name="F:Standard.Facility.Control">
            <summary>FACILITY_CONTROL</summary>
        </member>
        <member name="F:Standard.Facility.Ese">
            <summary>MSDN doced ESE 错误的设施代码。</summary>
        </member>
        <member name="F:Standard.Facility.WinCodec">
            <summary>FACILITY_WINCODEC（WIC）</summary>
        </member>
        <member name="T:Standard.HRESULT">
            <summary>HRESULT 状态代码的包装器。</summary>
        </member>
        <member name="F:Standard.HRESULT.S_OK">
            <summary>S_OK</summary>
        </member>
        <member name="F:Standard.HRESULT.S_FALSE">
            <summary>S_FALSE</summary>
        </member>
        <member name="F:Standard.HRESULT.E_PENDING">
            <summary>E_PENDING</summary>
        </member>
        <member name="F:Standard.HRESULT.E_NOTIMPL">
            <summary>E_NOTIMPL</summary>
        </member>
        <member name="F:Standard.HRESULT.E_NOINTERFACE">
            <summary>E_NOINTERFACE</summary>
        </member>
        <member name="F:Standard.HRESULT.E_POINTER">
            <summary>E_POINTER</summary>
        </member>
        <member name="F:Standard.HRESULT.E_ABORT">
            <summary>E_ABORT</summary>
        </member>
        <member name="F:Standard.HRESULT.E_FAIL">
            <summary>E_FAIL</summary>
        </member>
        <member name="F:Standard.HRESULT.E_UNEXPECTED">
            <summary>E_UNEXPECTED</summary>
        </member>
        <member name="F:Standard.HRESULT.STG_E_INVALIDFUNCTION">
            <summary>STG_E_INVALIDFUNCTION</summary>
        </member>
        <member name="F:Standard.HRESULT.REGDB_E_CLASSNOTREG">
            <summary>REGDB_E_CLASSNOTREG</summary>
        </member>
        <member name="F:Standard.HRESULT.DESTS_E_NO_MATCHING_ASSOC_HANDLER">
            <summary>DESTS_E_NO_MATCHING_ASSOC_HANDLER。跳转列表的 Win7 内部错误代码。</summary>
            <remarks>对于指定应用程序注册的给定项目，没有 Assoc Handler。</remarks>
        </member>
        <member name="F:Standard.HRESULT.DESTS_E_NORECDOCS">
            <summary>DESTS_E_NORECDOCS。跳转列表的 Win7 内部错误代码。</summary>
            <remarks>给定项目在其注册时由 NoRecDocs 位从最近的 docs 文件夹中排除。</remarks>
        </member>
        <member name="F:Standard.HRESULT.DESTS_E_NOTALLCLEARED">
            <summary>DESTS_E_NOTALLCLEARED。跳转列表的 Win7 内部错误代码。</summary>
            <remarks>并非所有项目都已成功清除</remarks>
        </member>
        <member name="F:Standard.HRESULT.E_ACCESSDENIED">
            <summary>E_ACCESSDENIED</summary>
            <remarks>Win32Error ERROR_ACCESS_DENIED。</remarks>
        </member>
        <member name="F:Standard.HRESULT.E_OUTOFMEMORY">
            <summary>E_OUTOFMEMORY</summary>
            <remarks>Win32Error ERROR_OUTOFMEMORY。</remarks>
        </member>
        <member name="F:Standard.HRESULT.E_INVALIDARG">
            <summary>E_INVALIDARG</summary>
            <remarks>Win32Error ERROR_INVALID_PARAMETER。</remarks>
        </member>
        <member name="F:Standard.HRESULT.INTSAFE_E_ARITHMETIC_OVERFLOW">
            <summary>INTSAFE_E_ARITHMETIC_OVERFLOW</summary>
        </member>
        <member name="F:Standard.HRESULT.COR_E_OBJECTDISPOSED">
            <summary>COR_E_OBJECTDISPOSED</summary>
        </member>
        <member name="F:Standard.HRESULT.WC_E_GREATERTHAN">
            <summary>WC_E_GREATERTHAN</summary>
        </member>
        <member name="F:Standard.HRESULT.WC_E_SYNTAX">
            <summary>WC_E_SYNTAX</summary>
        </member>
        <member name="M:Standard.HRESULT.#ctor(System.UInt32)">
            <summary>从整数值创建 HRESULT。</summary>
            <param name="i"></param>
        </member>
        <member name="M:Standard.HRESULT.op_Explicit(Standard.HRESULT)~System.Int32">
            <summary>将 HRESULT 转换为 int。用于我们无法控制的 COM 接口声明。</summary>
        </member>
        <member name="P:Standard.HRESULT.Facility">
            <summary>检索 HRESULT_FACILITY</summary>
        </member>
        <member name="P:Standard.HRESULT.Code">
            <summary>检索 HRESULT_CODE</summary>
        </member>
        <member name="M:Standard.HRESULT.ToString">
            <summary>获取此 HRESULT 的字符串表示形式。</summary>
            <returns></returns>
        </member>
        <member name="M:Standard.HRESULT.ThrowLastError">
            <summary>将 Win32 GetLastError（） 的结果转换为引发的异常。</summary>
        </member>
        <member name="T:Standard.HCF">
            <summary>HIGHCONTRAST 标志</summary>
        </member>
        <member name="T:Standard.DROPIMAGETYPE">
            <summary>DROPIMAGE_ *</summary>
        </member>
        <member name="T:Standard.BI">
            <summary>BITMAPINFOHEADER 压缩类型。BI_*.</summary>
        </member>
        <member name="T:Standard.RGN">
            <summary>CombingRgn 标志。RGN_ *</summary>
        </member>
        <member name="F:Standard.RGN.AND">
            <summary>创建两个组合区域的交集。</summary>
        </member>
        <member name="F:Standard.RGN.OR">
            <summary>创建两个组合区域的并集。</summary>
        </member>
        <member name="F:Standard.RGN.XOR">
            <summary>除了任何重叠区域外，创建两个组合区域的并集。</summary>
        </member>
        <member name="F:Standard.RGN.DIFF">
            <summary>合并 hrgnSrc1 中不属于 hrgnSrc2 的部分。</summary>
        </member>
        <member name="F:Standard.RGN.COPY">
            <summary>创建 hrgnSrc1 标识区域的副本。</summary>
        </member>
        <member name="T:Standard.OLECMDEXECOPT">
            <summary>对于 IWebBrowser2。OLECMDEXECOPT_ *</summary>
        </member>
        <member name="T:Standard.OLECMDF">
            <summary>对于 IWebBrowser2。OLECMDF_ *</summary>
        </member>
        <member name="T:Standard.OLECMDID">
            <summary>对于 IWebBrowser2。OLECMDID_ *</summary>
        </member>
        <member name="T:Standard.READYSTATE">
            <summary>对于 IWebBrowser2。READYSTATE_ *</summary>
        </member>
        <member name="T:Standard.DOGIF">
            <summary>DATAOBJ_GET_ITEM_FLAGS。DOGIF_ *。</summary>
        </member>
        <member name="F:Standard.ErrorModes.Default">
            <summary>使用系统默认值，即显示所有错误对话框。</summary>
        </member>
        <member name="F:Standard.ErrorModes.FailCriticalErrors">
            <summary>系统不显示 critical-error-handler 消息框。相反，系统将错误发送到调用进程。</summary>
        </member>
        <member name="F:Standard.ErrorModes.NoGpFaultErrorBox">
            <summary>64 位Windows：系统会自动修复内存对齐错误，并使其对应用程序不可见。它为调用进程和任何后代进程执行此操作。为进程设置此值后，将忽略后续清除该值的尝试。</summary>
        </member>
        <member name="F:Standard.ErrorModes.NoAlignmentFaultExcept">
            <summary>系统不显示 general-protection-fault 消息框。只应通过使用异常处理程序调试处理一般保护 （GP） 错误的应用程序来设置此标志。</summary>
        </member>
        <member name="F:Standard.ErrorModes.NoOpenFileErrorBox">
            <summary>当找不到文件时，系统不会显示消息框。而是将错误返回给调用进程。</summary>
        </member>
        <member name="T:Standard.HT">
            <summary>非客户命中测试值，HT *</summary>
        </member>
        <member name="T:Standard.GCLP">
            <summary>GetClassLongPtr 值，GCLP_ *</summary>
        </member>
        <member name="T:Standard.GWL">
            <summary>GetWindowLongPtr 值，GWL_ *</summary>
        </member>
        <member name="T:Standard.SM">
            <summary>SystemMetrics。SM_*</summary>
        </member>
        <member name="T:Standard.SPI">
            <summary>SystemParameterInfo 值，SPI_ *</summary>
        </member>
        <member name="T:Standard.SPIF">
            <summary>SystemParameterInfo 标志值，SPIF_ *</summary>
        </member>
        <member name="T:Standard.CS">
            <summary>CS_*</summary>
        </member>
        <member name="T:Standard.WS">
            <summary>WindowStyle 值，WS_ *</summary>
        </member>
        <member name="T:Standard.WM">
            <summary>窗口消息值，WM_ *</summary>
        </member>
        <member name="T:Standard.WS_EX">
            <summary>窗口样式扩展值，WS_EX_ *</summary>
        </member>
        <member name="T:Standard.DeviceCap">
            <summary>GetDeviceCaps nIndex 值。</summary>
        </member>
        <member name="F:Standard.DeviceCap.BITSPIXEL">
            <summary>每像素的位数</summary>
        </member>
        <member name="F:Standard.DeviceCap.PLANES">
            <summary>平面数量</summary>
        </member>
        <member name="F:Standard.DeviceCap.LOGPIXELSX">
            <summary>X 中的逻辑像素英寸</summary>
        </member>
        <member name="F:Standard.DeviceCap.LOGPIXELSY">
            <summary>Y 中的逻辑像素英寸</summary>
        </member>
        <member name="T:Standard.FOF">
            <summary>“FILEOP_FLAGS&quot;, FOF_*.</summary>
        </member>
        <member name="T:Standard.MF">
            <summary>EnableMenuItem uEnable 值，MF_ *</summary>
        </member>
        <member name="F:Standard.MF.DOES_NOT_EXIST">
            <summary>EnableMenuItem 的可能返回值</summary>
        </member>
        <member name="T:Standard.WINDOWTHEMEATTRIBUTETYPE">
            <summary>指定要在窗口上设置的视觉样式属性的类型。</summary>
        </member>
        <member name="F:Standard.WINDOWTHEMEATTRIBUTETYPE.WTA_NONCLIENT">
            <summary>将设置非工作区窗口属性。</summary>
        </member>
        <member name="T:Standard.DWMFLIP3D">
            <summary>DWMFLIP3DWINDOWPOLICY.DWMFLIP3D_*</summary>
        </member>
        <member name="T:Standard.DWMNCRP">
            <summary>DWMNCRENDERINGPOLICY.DWMNCRP_*</summary>
        </member>
        <member name="T:Standard.DWMWA">
            <summary>DWMWINDOWATTRIBUTE.DWMWA_*</summary>
        </member>
        <member name="T:Standard.WTNCA">
            <summary>WindowThemeNonClientAttributes</summary>
        </member>
        <member name="F:Standard.WTNCA.NODRAWCAPTION">
            <summary>防止绘制窗口标题。</summary>
        </member>
        <member name="F:Standard.WTNCA.NODRAWICON">
            <summary>阻止绘制系统图标。</summary>
        </member>
        <member name="F:Standard.WTNCA.NOSYSMENU">
            <summary>防止出现系统图标菜单。</summary>
        </member>
        <member name="F:Standard.WTNCA.NOMIRRORHELP">
            <summary>即使在从右到左（RTL）布局中，也可以防止问号镜像。</summary>
        </member>
        <member name="F:Standard.WTNCA.VALIDBITS">
            <summary>包含所有有效位的掩码。</summary>
        </member>
        <member name="T:Standard.SWP">
            <summary>SetWindowPos 选项</summary>
        </member>
        <member name="T:Standard.SW">
            <summary>ShowWindow 选项</summary>
        </member>
        <member name="F:Standard.SC.F_ISSECURE">
            <summary>SCF_ISSECURE</summary>
        </member>
        <member name="T:Standard.Status">
            <summary>GDI 状态代码</summary>
        </member>
        <member name="T:Standard.MSGFLT">
            <summary>MSGFLT_*.Vista 中的新功能。在 Windows 7 中实现。</summary>
        </member>
        <member name="T:Standard.NIM">
            <summary>Shell_NotifyIcon 消息。NIM_ *</summary>
        </member>
        <member name="T:Standard.SHARD">
            <summary>SHAddToRecentDocuments 标志。SHARD_ *</summary>
        </member>
        <member name="T:Standard.NIF">
            <summary>Shell_NotifyIcon 标志。NIF_ *</summary>
        </member>
        <member name="F:Standard.NIF.REALTIME">
            <summary>只有 Vista。</summary>
        </member>
        <member name="F:Standard.NIF.SHOWTIP">
            <summary>只有 Vista。</summary>
        </member>
        <member name="T:Standard.NIIF">
            <summary>Shell_NotifyIcon 信息标志。NIIF_ *</summary>
        </member>
        <member name="F:Standard.NIIF.USER">
            <summary>XP SP2 及更高版本。</summary>
        </member>
        <member name="F:Standard.NIIF.NOSOUND">
            <summary>XP 及更高版本。</summary>
        </member>
        <member name="F:Standard.NIIF.LARGE_ICON">
            <summary>Vista 及更高版本。</summary>
        </member>
        <member name="F:Standard.NIIF.NIIF_RESPECT_QUIET_TIME">
            <summary>Windows 7 及更高版本</summary>
        </member>
        <member name="F:Standard.NIIF.XP_ICON_MASK">
            <summary>XP 及更高版本。本机版本称为 NIIF_ICON_MASK。</summary>
        </member>
        <member name="T:Standard.AC">
            <summary>AC_*</summary>
        </member>
        <member name="F:Standard.NOTIFYICONDATA.dwState">
            <summary>图标状态。有两个标志可以独立设置。NIS_HIDDEN = 1.图标被隐藏。NIS_SHAREDICON = 2。图标是共享的。</summary>
        </member>
        <member name="F:Standard.SHARDAPPIDINFOIDLIST.pidl">
            <summary>应添加到最近 docs 文件夹的 shell 项的 idlist。</summary>
        </member>
        <member name="F:Standard.SHARDAPPIDINFOIDLIST.pszAppID">
            <summary>应与此最新文档关联的应用程序的 ID。</summary>
        </member>
        <member name="T:Standard.WTA_OPTIONS">
            <summary>定义用于设置窗口视觉样式属性的选项。</summary>
        </member>
        <member name="F:Standard.WTA_OPTIONS.dwFlags">
            <summary>修改窗口视觉样式属性的标志组合。可以是 WTNCA 常数的组合。</summary>
        </member>
        <member name="F:Standard.WTA_OPTIONS.dwMask">
            <summary>一个位掩码，描述如何应用 dwFlags 中指定的值。如果对应于 dwFlags 中的值的位为 0，则将删除该标志。如果该位为 1，则将添加该标志。</summary>
        </member>
        <member name="F:Standard.MARGINS.cxLeftWidth">
            <summary>保留其大小的左边框宽度。</summary>
        </member>
        <member name="F:Standard.MARGINS.cxRightWidth">
            <summary>保留其大小的右边框宽度。</summary>
        </member>
        <member name="F:Standard.MARGINS.cyTopHeight">
            <summary>保持其大小的顶部边框的高度。</summary>
        </member>
        <member name="F:Standard.MARGINS.cyBottomHeight">
            <summary>底部边框的高度保持其大小。</summary>
        </member>
        <member name="F:Standard.APPBARDATA.cbSize">
            <summary>使用以下方法初始化此字段Marshal.SizeOf（typeof运算（APPBARDATA））;</summary>
        </member>
        <member name="T:Standard.WndProc">
            <summary>委托与本机 WndProc 签名匹配的声明。</summary>
        </member>
        <member name="T:Standard.MessageHandler">
            <summary>委托与托管 WndProc 签名匹配的声明。</summary>
        </member>
        <member name="M:Standard.NativeMethods.SetWindowThemeAttribute(System.IntPtr,Standard.WINDOWTHEMEATTRIBUTETYPE,Standard.WTA_OPTIONS@,System.UInt32)">
            <summary>设置属性以控制视觉样式如何应用于指定窗口。</summary>
            <param name="hwnd">处理窗口以应用更改。</param>
            <param name="eAttribute">WINDOWTHEMEATTRIBUTETYPE 类型的值，指定要设置的属性类型。此参数的值确定应在 pvAttribute 参数中传递的数据类型。可以是以下值：<list>WTA_NONCLIENT（指定与客户端无关的属性）。</list> pvAttribute 必须是 WTA_OPTIONS 类型的指针。</param>
            <param name="pvAttribute">指定要设置属性的指针。类型由 eAttribute 值的值确定。</param>
            <param name="cbAttribute">指定 pvAttribute 指向的数据大小（以字节为单位）。</param>
        </member>
        <member name="M:Standard.NativeMethods._SystemParametersInfo_NONCLIENTMETRICS(Standard.SPI,System.Int32,Standard.NONCLIENTMETRICS@,Standard.SPIF)">
            <summary>超载 SystemParametersInfo 以获取和设置 NONCLIENTMETRICS。</summary>
        </member>
        <member name="M:Standard.NativeMethods._SystemParametersInfo_HIGHCONTRAST(Standard.SPI,System.Int32,Standard.HIGHCONTRAST@,Standard.SPIF)">
            <summary>用于获取和设置 HIGHCONTRAST 的 SystemParametersInfo 的重载。</summary>
        </member>
        <member name="M:Standard.NativeMethods.SetCurrentProcessExplicitAppUserModelID(System.String)">
            <summary>设置当前进程的用户模型 AppID，使 Windows 能够检索此 ID</summary>
            <param name="AppID"></param>
        </member>
        <member name="M:Standard.NativeMethods.GetCurrentProcessExplicitAppUserModelID(System.String@)">
            <summary>通过 SetCurrentProcessExplicitAppUserModelID 检索已为当前进程显式设置的用户模型 AppID</summary>
            <param name="AppID"></param>
        </member>
        <member name="T:Standard.AL">
            <summary>ASSOCIATIONLEVEL, AL_*</summary>
        </member>
        <member name="T:Standard.AT">
            <summary>ASSOCIATIONTYPE, AT_*</summary>
        </member>
        <member name="T:Standard.FDAP">
            <summary>FileDialog AddPlace 选项。FDAP_*</summary>
        </member>
        <member name="T:Standard.FOS">
            <summary>IFileDialog 选项。FOS_ *</summary>
        </member>
        <member name="T:Standard.FDEOR">
            <summary>FDE_OVERWRITE_RESPONSE。FDEOR_ *</summary>
        </member>
        <member name="T:Standard.FDESVR">
            <summary>FDE_SHAREVIOLATION_RESPONSE。FDESVR_ *</summary>
        </member>
        <member name="T:Standard.SIATTRIBFLAGS">
            <summary>ShellItem 属性标志。SIATTRIBFLAGS_ *</summary>
        </member>
        <member name="T:Standard.STPF">
            <summary>SetTabProperties 的标志。STPF_ *</summary>
            <remarks>本机枚举称为 STPFLAG。</remarks>
        </member>
        <member name="T:Standard.TBPF">
            <summary>用于设置任务栏进度状态的标志。TBPF_ *</summary>
            <remarks>本地枚举称为 TBPFLAG。</remarks>
        </member>
        <member name="T:Standard.THB">
            <summary>THUMBBUTTON 面具。THB_ *</summary>
        </member>
        <member name="T:Standard.THBF">
            <summary>THUMBBUTTON 标志。THBF_ *</summary>
        </member>
        <member name="T:Standard.GPS">
            <summary>GetPropertyStoreFlags。全球定位系统_*。</summary>
            <remarks>这些是 Vista 的新功能，但用于下层组件</remarks>
        </member>
        <member name="T:Standard.KDC">
            <summary>KNOWNDESTCATEGORY。KDC_*</summary>
        </member>
        <member name="F:Standard.SFGAO.CANCOPY">
            <summary>可以复制对象</summary>
            <remarks>DROPEFFECT_COPY</remarks>
        </member>
        <member name="F:Standard.SFGAO.CANMOVE">
            <summary>对象可以移动</summary>
            <remarks>DROPEFFECT_MOVE</remarks>
        </member>
        <member name="F:Standard.SFGAO.CANLINK">
            <summary>对象可以链接</summary>
            <remarks>DROPEFFECT_LINK。如果在 shell 文件夹中的项目上设置了此位，则“创建快捷方式”菜单项将添加到项目的“文件”菜单和上下文菜单中。如果用户选择该命令，则将使用“link”调用 IContextMenu :: InvokeCommand（）。该标志还将用于确定当文件夹中的项目被拖动到另一个文件夹时是否应添加“创建快捷方式”。</remarks>
        </member>
        <member name="F:Standard.SFGAO.STORAGE">
            <summary>支持 BindToObject（IID_IStorage）</summary>
        </member>
        <member name="F:Standard.SFGAO.CANRENAME">
            <summary>可以重命名对象</summary>
        </member>
        <member name="F:Standard.SFGAO.CANDELETE">
            <summary>可以删除对象</summary>
        </member>
        <member name="F:Standard.SFGAO.HASPROPSHEET">
            <summary>对象有属性表</summary>
        </member>
        <member name="F:Standard.SFGAO.DROPTARGET">
            <summary>对象是放下目标</summary>
        </member>
        <member name="F:Standard.SFGAO.ENCRYPTED">
            <summary>对象已加密（使用alt颜色）</summary>
        </member>
        <member name="F:Standard.SFGAO.ISSLOW">
            <summary>‘慢’对象</summary>
        </member>
        <member name="F:Standard.SFGAO.GHOSTED">
            <summary>幻影图标</summary>
        </member>
        <member name="F:Standard.SFGAO.LINK">
            <summary>快捷方式（链接）</summary>
        </member>
        <member name="F:Standard.SFGAO.SHARE">
            <summary>共享</summary>
        </member>
        <member name="F:Standard.SFGAO.READONLY">
            <summary>只读</summary>
        </member>
        <member name="F:Standard.SFGAO.HIDDEN">
            <summary>隐藏的对象</summary>
        </member>
        <member name="F:Standard.SFGAO.FILESYSANCESTOR">
            <summary>可能包含具有 SFGAO_FILESYSTEM 的子项</summary>
        </member>
        <member name="F:Standard.SFGAO.FOLDER">
            <summary>支持 BindToObject（IID_IShellFolder）</summary>
        </member>
        <member name="F:Standard.SFGAO.FILESYSTEM">
            <summary>是 win32 文件系统对象（文件/文件夹/根）</summary>
        </member>
        <member name="F:Standard.SFGAO.HASSUBFOLDER">
            <summary>可能包含 SFGAO_FOLDER 的子项（可能很慢）</summary>
        </member>
        <member name="F:Standard.SFGAO.VALIDATE">
            <summary>使缓存的信息无效（可能很慢）</summary>
        </member>
        <member name="F:Standard.SFGAO.REMOVABLE">
            <summary>这是可移动媒体吗？</summary>
        </member>
        <member name="F:Standard.SFGAO.COMPRESSED">
            <summary>对象被压缩（使用alt颜色）</summary>
        </member>
        <member name="F:Standard.SFGAO.BROWSABLE">
            <summary>支持 IShellFolder，但只实现 CreateViewObject（）（非文件夹视图）</summary>
        </member>
        <member name="F:Standard.SFGAO.NONENUMERATED">
            <summary>为非枚举对象（应隐藏）</summary>
        </member>
        <member name="F:Standard.SFGAO.NEWCONTENT">
            <summary>应该在资源管理器树中显示粗体</summary>
        </member>
        <member name="F:Standard.SFGAO.CANMONIKER">
            <summary>过时的</summary>
        </member>
        <member name="F:Standard.SFGAO.HASSTORAGE">
            <summary>过时的</summary>
        </member>
        <member name="F:Standard.SFGAO.STREAM">
            <summary>支持 BindToObject（IID_IStream）</summary>
        </member>
        <member name="F:Standard.SFGAO.STORAGEANCESTOR">
            <summary>可能包含 SFGAO_STORAGE 或 SFGAO_STREAM 的子项</summary>
        </member>
        <member name="F:Standard.SFGAO.STORAGECAPMASK">
            <summary>用于确定存储功能，即用于打开/保存语义</summary>
        </member>
        <member name="F:Standard.SFGAO.PKEYSFGAOMASK">
            <summary>为 PKEY_SFGAOFlags 屏蔽的属性，因为它们被认为导致计算速度慢或缺少上下文（SFGAO_VALIDATE | SFGAO_ISSLOW | SFGAO_HASSUBFOLDER 等）</summary>
        </member>
        <member name="T:Standard.SHCONTF">
            <summary>IShellFolder :: EnumObjects grfFlags 位。也称为 SHCONT</summary>
        </member>
        <member name="T:Standard.SHGDN">
            <summary>IShellFolder :: GetDisplayNameOf / SetNameOf uFlags。也称为 SHGDNF。</summary>
            <remarks>为了与 SIGDN 兼容，这些位必须全部位于 LOW 字中。</remarks>
        </member>
        <member name="T:Standard.SICHINT">
            <summary>SHELLITEMCOMPAREHINTF。SICHINT_*.</summary>
        </member>
        <member name="F:Standard.SICHINT.DISPLAY">
            <summary>iOrder 基于文件夹视图中的显示</summary>
        </member>
        <member name="F:Standard.SICHINT.ALLFIELDS">
            <summary>确切的实例比较</summary>
        </member>
        <member name="F:Standard.SICHINT.CANONICAL">
            <summary>iOrder 基于规范名称（更好的性能）</summary>
        </member>
        <member name="T:Standard.SIGDN">
            <summary>ShellItem 枚举。SIGDN_*.</summary>
        </member>
        <member name="T:Standard.STR_GPS">
             <summary>STR_GPS_*</summary>
             <remarks>通过 IShellFolder 请求属性存储时，可以通过传入空 IBindCtx 参数来指定 GPS_DEFAULT 的等效项。您可以通过传递 STGM_READWRITE |模式指定 GPS_READWRITE 的等效值绑定上下文中的 STGM_EXCLUSIVE 以下是 GPS_标志 的字符串版本，通过 IBindCtx :: RegisterObjectParam（）传递给 IShellFolder :: BindToObject（）这些标志在请求 IPropertySetStorage 或 IPropertyStore 处理程序时有效这些标志的含义如上所述。GPS_TEMPORARY 没有STR_等价物，因为临时属性存储仅由 IShellItem2 提供 - 而不是由底层 IShellFolder 提供。</remarks>
        </member>
        <member name="F:Standard.THUMBBUTTON.THBN_CLICKED">
            <summary>单击 THUMBBUTTON 的 WPARAM 值。</summary>
        </member>
        <member name="F:Standard.PKEY._fmtid">
            <summary>fmtid</summary>
        </member>
        <member name="F:Standard.PKEY._pid">
            <summary>PID</summary>
        </member>
        <member name="F:Standard.PKEY.Title">
            <summary>PKEY_Title</summary>
        </member>
        <member name="F:Standard.PKEY.AppUserModel_ID">
            <summary>PKEY_AppUserModel_ID</summary>
        </member>
        <member name="F:Standard.PKEY.AppUserModel_IsDestListSeparator">
            <summary>PKEY_AppUserModel_IsDestListSeparat 或 </summary>
        </member>
        <member name="F:Standard.PKEY.AppUserModel_RelaunchCommand">
            <summary>PKEY_AppUserModel_RelaunchCommand</summary>
        </member>
        <member name="F:Standard.PKEY.AppUserModel_RelaunchDisplayNameResource">
            <summary>PKEY_AppUserModel_RelaunchDisplayNameResource</summary>
        </member>
        <member name="F:Standard.PKEY.AppUserModel_RelaunchIconResource">
            <summary>PKEY_AppUserModel_RelaunchIconResource</summary>
        </member>
        <member name="T:Standard.IObjectArray">
            <summary>未知的对象数组</summary>
        </member>
        <member name="T:Standard.IShellItem">
            <summary>Shell 命名空间助手</summary>
        </member>
        <member name="T:Standard.IShellItem2">
            <summary>Shell 命名空间助手 2</summary>
        </member>
        <member name="M:Standard.ITaskbarList.HrInit">
            <summary>必须首先调用此函数以验证其他成员的使用。</summary>
        </member>
        <member name="M:Standard.ITaskbarList.AddTab(System.IntPtr)">
            <summary>此函数将 hwnd 的选项卡添加到任务栏。</summary>
            <param name="hwnd">要为其添加选项卡的 HWND。</param>
        </member>
        <member name="M:Standard.ITaskbarList.DeleteTab(System.IntPtr)">
            <summary>此函数从任务栏中删除 hwnd 的选项卡。</summary>
            <param name="hwnd">要删除选项卡的 HWND。</param>
        </member>
        <member name="M:Standard.ITaskbarList.ActivateTab(System.IntPtr)">
            <summary>此函数激活与任务栏上 hwnd 关联的选项卡。</summary>
            <param name="hwnd">要激活制表符的 HWND。</param>
        </member>
        <member name="M:Standard.ITaskbarList.SetActiveAlt(System.IntPtr)">
            <summary>此函数将任务栏中的 hwnd 标记为活动选项卡。</summary>
            <param name="hwnd">要激活的 HWND。</param>
        </member>
        <member name="M:Standard.ITaskbarList2.MarkFullscreenWindow(System.IntPtr,System.Boolean)">
            <summary>将窗口标记为全屏。</summary>
            <param name="hwnd">要标记窗口的图柄。</param>
            <param name="fFullscreen">一个布尔值，用于标记窗口所需的全屏状态。</param>
            <remarks>将 fFullscreen 的值设置为 true，Shell 将此窗口视为全屏窗口，并且当此窗口处于活动状态时，任务栏将移动到z顺序的底部。将 fFullscreen 的值设置为 false 会删除全屏标记，但是 <i>才不是</i> 导致 Shell 将窗口视为绝对不是全屏。使用错误的 fFullscreen 值，Shell 依赖于其自动检测功能来指定应如何处理窗口，可能仍然将窗口标记为全屏。</remarks>
        </member>
        <member name="T:Standard.IApplicationDocumentLists">
            <summary>允许应用程序检索在该应用程序中打开的最新且频繁的文档，如通过 SHAddToRecentDocs 报告那样</summary>
        </member>
        <member name="M:Standard.IApplicationDocumentLists.SetAppID(System.String)">
            <summary>为检索此列表的应用程序设置应用程序用户模型 ID。如果未通过此方法提供 AppID，系统将使用启发式确定的 ID。必须在 GetList 之前调用此方法。</summary>
            <param name="pszAppID">App Id.</param>
        </member>
        <member name="M:Standard.IApplicationDocumentLists.GetList(Standard.APPDOCLISTTYPE,System.UInt32,System.Guid@)">
            <summary>检索 IShellItems 和/或 IShellLinks 的 IEnumObjects 或 IObjectArray。项目可能出现在常用列表和最近列表中。</summary>
            <returns></returns>
        </member>
        <member name="T:Standard.IObjectWithAppUserModelId">
            <summary>提供对支持此值对象的 App User Model ID 的访问。</summary>
        </member>
        <member name="T:Standard.IObjectWithProgId">
            <summary>提供对与对象关联的 ProgID 的访问</summary>
        </member>
        <member name="T:Standard.ComStream">
            <summary>将来自 COM 的 Istream 接口指针包装到 .Net 可以使用的表单中。</summary>
            <remarks>此实现不可变，但可以在另一个上下文中更改基础流。</remarks>
        </member>
        <member name="M:Standard.ComStream.#ctor(System.Runtime.InteropServices.ComTypes.IStream@)">
            <summary>将本机 Istream 接口包装到 CLR Stream 子类中。</summary>
            <param name="stream">此对象包装的流。</param>
            <remarks>请注意，参数由 ref 传递。成功创建后，它将被调零到调用者。此对象负责包装 Stream 的寿命周期管理。</remarks>
        </member>
        <member name="T:Standard.ManagedIStream">
            <summary>将托管流实例包装到 COM 可以使用的接口指针中。</summary>
        </member>
        <member name="M:Standard.ManagedIStream.#ctor(System.IO.Stream)">
            <summary>使用指定的托管 Stream 对象初始化 ManagedIStream 类的新实例。</summary>
            <param name="source">此 Istream 引用包含的流。</param>
        </member>
        <member name="M:Standard.ManagedIStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
            <summary>使用自己的搜索指针创建一个新的流对象，该指针引用与原始流相同的字节。</summary>
            <param name="ppstm">此方法返回时，包含新的流对象。此参数未初始化传递。</param>
            <remarks>有关更多信息，请参阅 MSDN 库中 IStream :: Clone 的现有文档。这个类没有实现 Clone。如果使用它，则抛出 COMException。</remarks>
        </member>
        <member name="M:Standard.ManagedIStream.Commit(System.Int32)">
            <summary>确保对以事务处理模式打开的流对象所做的任何更改都会反映在父级存储中。</summary>
            <param name="grfCommitFlags">用于控制如何提交流对象更改的值。</param>
            <remarks>有关更多信息，请参阅 MSDN 库中 IStream :: Commit 的现有文档。</remarks>
        </member>
        <member name="M:Standard.ManagedIStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
            <summary>将指定数量的字节从流中的当前搜索指针复制到另一个流中的当前搜索指针。</summary>
            <param name="pstm">对目标流的引用。</param>
            <param name="cb">要从源流复制的字节数。</param>
            <param name="pcbRead">成功返回时，包含从源读取的实际字节数。（注意本机签名是 ULARGE_INTEGER *，因此成功时会将 64 位写入此参数。）</param>
            <param name="pcbWritten">成功返回时，包含写入目标的实际字节数。（注意本机签名是 ULARGE_INTEGER *，因此成功时会将 64 位写入此参数。）</param>
        </member>
        <member name="M:Standard.ManagedIStream.LockRegion(System.Int64,System.Int64,System.Int32)">
            <summary>限制对流中指定字节范围的访问。</summary>
            <param name="libOffset">范围开头的字节偏移量。</param>
            <param name="cb">限制的范围长度（以字节为单位）。</param>
            <param name="dwLockType">访问范围的请求限制。</param>
            <remarks>有关更多信息，请参阅 MSDN 库中 IStream :: LockRegion 的现有文档。该类未实现 LockRegion。如果使用它，则抛出 COMException。</remarks>
        </member>
        <member name="M:Standard.ManagedIStream.Read(System.Byte[],System.Int32,System.IntPtr)">
            <summary>从当前搜索指针开始，从流对象读取指定数量的字节至内存中。</summary>
            <param name="pv">此方法返回时，包含从流中读取的数据。此参数未初始化传递。</param>
            <param name="cb">从流对象读取的字节数。</param>
            <param name="pcbRead">指向 ULONG 变量的指针，该变量接收从流对象读取的实际字节数。</param>
            <remarks>有关更多信息，请参阅 MSDN 库中 ISequentialStream :: Read 的现有文档。</remarks>
        </member>
        <member name="M:Standard.ManagedIStream.Revert">
            <summary>放弃自上次 Commit 调用以来对事务流所做的所有更改。</summary>
            <remarks>该类未实现 Revert。如果使用它，则抛出 COMException。</remarks>
        </member>
        <member name="M:Standard.ManagedIStream.Seek(System.Int64,System.Int32,System.IntPtr)">
            <summary>将搜索指针更改为相对于流的开头、流的末尾或当前搜索指针的新位置。</summary>
            <param name="dlibMove">要添加到 dwOrigin 的位移。</param>
            <param name="dwOrigin">寻求文件源。原点可以是文件的开头、当前的搜索指针或文件的结尾。</param>
            <param name="plibNewPosition">成功返回时，包含从流的开头搜索指针的偏移量。（注意本机签名是 ULARGE_INTEGER *，因此成功时会将 64 位写入此参数。）</param>
            <remarks>有关更多信息，请参阅 MSDN 库中 IStream :: Seek 的现有文档。</remarks>
        </member>
        <member name="M:Standard.ManagedIStream.SetSize(System.Int64)">
            <summary>更改流对象的大小。</summary>
            <param name="libNewSize">流的新大小为多个字节。</param>
            <remarks>有关更多信息，请参阅 MSDN 库中 IStream :: SetSize 的现有文档。</remarks>
        </member>
        <member name="M:Standard.ManagedIStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
            <summary>检索此流的 STATSTG 结构。</summary>
            <param name="pstatstg">此方法返回时，包含描述此流对象的 STATSTG 结构。此参数未初始化传递。</param>
            <param name="grfStatFlag">STATSTG 结构中的成员认为此方法不返回，从而节省了一些内存分配操作。</param>
        </member>
        <member name="M:Standard.ManagedIStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
            <summary>删除先前使用 LockRegion 方法限制的字节范围的访问限制。</summary>
            <param name="libOffset">范围开头的字节偏移量。</param>
            <param name="cb">限制范围的长度（以字节为单位）。</param>
            <param name="dwLockType">以前放在该范围内的访问限制。</param>
            <remarks>有关更多信息，请参阅 MSDN 库中 IStream :: UnlockRegion 的现有文档。此类未实现 UnlockRegion。如果使用它，则抛出 COMException。</remarks>
        </member>
        <member name="M:Standard.ManagedIStream.Write(System.Byte[],System.Int32,System.IntPtr)">
            <summary>从当前搜索指针开始，将指定数量的字节写入流对象。</summary>
            <param name="pv">将此流写入的缓冲区。</param>
            <param name="cb">要写入流的字节数。</param>
            <param name="pcbWritten">成功返回时，包含写入流对象的实际字节数。如果调用者将此指针设置为 null，则此方法不提供写入的实际字节数。</param>
        </member>
        <member name="M:Standard.ManagedIStream.Dispose">
            <summary>释放此对象控制的资源。</summary>
            <remarks>可以多次调用 Dispose，但是在处理完对象后尝试使用该对象通常会抛出 ObjectDisposedExceptions。</remarks>
        </member>
        <member name="M:Standard.Utility.SafeCopyFile(System.String,System.String,Standard.SafeCopyFileOptions)">
            <summary>File.Copy 周围的包装器提供关于文件是否未被复制的反馈，因为它不存在。</summary>
            <returns></returns>
        </member>
        <member name="M:Standard.Utility.SafeDeleteFile(System.String)">
            <summary>简单防范 File.Delete 抛出 null 和空字符串的异常。</summary>
            <param name="path">要删除的路径。与 File.Delete 不同，它可以为 null 或为空。</param>
            <remarks>请注意，如果文件不存在，File.Delete 和扩展名 SafeDeleteFile 不会引发异常。</remarks>
        </member>
        <member name="M:Standard.Utility.GeneratePropertyString(System.Text.StringBuilder,System.String,System.String)">
            <summary>用于帮助类安装其属性以实现 ToString（）的实用程序。</summary>
            <param name="source">StringBuilder 将结果连接到。</param>
            <param name="propertyName">要连接的属性名称。</param>
            <param name="value">要连接的属性值。</param>
        </member>
        <member name="M:Standard.Utility.GenerateToString``1(``0)">
            <summary>为结构生成 ToString 功能。这是一种昂贵的方法，它是为了调试而存在，而类不断变化。最终应该被删除，且类没有反射。</summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:Standard.Utility.UrlEncode(System.String)">
            <summary>对 URL 字符串进行编码。System.Web.HttpUtility.UrlEncode 的重复功能。</summary>
            <param name="url"></param>
            <returns></returns>
            <remarks>从 System.Web.HttpUtility 复制，因为 System.Web 不是客户端配置文件的一部分。URL 编码用’％XX’替换’’with’’和不安全的 ASCII 字符。在 RFC2396（http://www.ietf.org/rfc/rfc2396.txt） 中定义安全字符。它们是 7 位 ASCII 字母数字和标记字符“-_。！〜*&apos;（）”。此实现不会将’〜’视为与 System.Web 版本一致的安全字符。</remarks>
        </member>
        <member name="M:Standard.Utility.SafeDeleteObject(System.IntPtr@)">
            <summary>GDI 的 DeleteObject</summary>
        </member>
        <member name="M:Standard.Utility.SafeDisposeImage(System.IntPtr@)">
            <summary>GDI 的 DisposeImage</summary>
            <param name="gdipImage"></param>
        </member>
        <member name="M:Standard.Utility._GetBestMatch(System.Collections.Generic.IList{System.Windows.Media.Imaging.BitmapFrame},System.Int32,System.Int32,System.Int32)">从 BitmapFrame 列表中找到最符合请求维度的列表。此处使用的方法是从 Win32 源复制。我们希望与系统行为保持一致。</member>
        <member name="M:Standard.Utility.ColorFromArgbDword(System.UInt32)">
            <summary>将表示具有 Alpha 通道的颜色的本机整数转换为 Color 结构。</summary>
            <param name="color">表示颜色的整数。其位的格式为 0xAARRGGBB。</param>
            <returns>参数的颜色表示。</returns>
        </member>
        <member name="T:Standard.Verify">
            <summary>零售验证声明的静态类。抛出异常而不是闯入调试器。</summary>
        </member>
        <member name="M:Standard.Verify.IsApartmentState(System.Threading.ApartmentState,System.String)">
            <summary>确保当前线程的套间状态符合预期。</summary>
            <param name="requiredState">当前线程所需的单元状态。</param>
            <param name="message">如果状态无效，则抛出异常的消息字符串。</param>
            <exception cref="T:System.InvalidOperationException">如果调用线程的单元状态与 requiredState 不同，则抛出该异常。</exception>
        </member>
        <member name="M:Standard.Verify.IsNeitherNullNorEmpty(System.String,System.String)">
            <summary>确保参数既不为 null 也不为空。</summary>
            <param name="value">要验证的字符串。</param>
            <param name="name">抛出异常时将显示的参数名称。</param>
        </member>
        <member name="M:Standard.Verify.IsNeitherNullNorWhitespace(System.String,System.String)">
            <summary>确保参数既不为 null 也不仅包含空格。</summary>
            <param name="value">要验证的字符串。</param>
            <param name="name">抛出异常时将显示的参数名称。</param>
        </member>
        <member name="M:Standard.Verify.IsNotDefault``1(``0,System.String)">
            <summary>验证参数不为 null。</summary>
            <typeparam name="T">要验证的对象类型。必须是一个类。</typeparam>
            <param name="obj">要验证的对象。</param>
            <param name="name">抛出异常时将显示的参数名称。</param>
        </member>
        <member name="M:Standard.Verify.IsNotNull``1(``0,System.String)">
            <summary>验证参数不为 null。</summary>
            <typeparam name="T">要验证的对象类型。必须是一个类。</typeparam>
            <param name="obj">要验证的对象。</param>
            <param name="name">抛出异常时将显示的参数名称。</param>
        </member>
        <member name="M:Standard.Verify.IsNull``1(``0,System.String)">
            <summary>验证参数是否为 null。</summary>
            <typeparam name="T">要验证的对象类型。必须是一个类。</typeparam>
            <param name="obj">要验证的对象。</param>
            <param name="name">抛出异常时将显示的参数名称。</param>
        </member>
        <member name="M:Standard.Verify.IsTrue(System.Boolean,System.String,System.String)">
            <summary>验证指定的语句是否为 true。如果不是，则抛出 ArgumentException。</summary>
            <param name="statement">声明要验证为 true。</param>
            <param name="name">包含在 ArgumentException 中参数的名称。</param>
            <param name="message">包含在 ArgumentException中 的消息。</param>
        </member>
        <member name="M:Standard.Verify.BoundedInteger(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>验证指定值是否在预期范围内。若不是，则声明失败。</summary>
            <param name="lowerBoundInclusive">下限包含值。</param>
            <param name="value">要验证的值。</param>
            <param name="upperBoundExclusive">上限独占值。</param>
            <param name="parameterName">导致当前异常的参数名称。</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.SystemCommands.ShowSystemMenu(System.Windows.Window,System.Windows.Point)">
            <summary>在指定位置显示系统菜单。</summary>
            <param name="window">MetroWindow</param>
            <param name="screenLocation">在逻辑屏幕坐标中显示系统菜单的位置。</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.SystemParameters2.#ctor">
            <summary>私用构造函数。访问此类的公共方法是通过静态 Current 属性。</summary>
        </member>
        <member name="P:Microsoft.Windows.Shell.WindowChrome.CaptionHeight">
            <summary>窗口顶部的范围被视为标题。</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.WindowChrome.IgnoreTaskbarOnMaximizeProperty">
            <summary>IgnoreTaskbarOnMaximize 的依赖属性</summary>
        </member>
        <member name="P:Microsoft.Windows.Shell.WindowChrome.IgnoreTaskbarOnMaximize">
            <summary>如果此属性为 true 且附加窗口的 WindowStyle = None，那么当窗口最大化时，它将覆盖整个监视器，包括任务栏。</summary>
        </member>
        <member name="P:Microsoft.Windows.Shell.WindowChromeWorker.IsPresentationFrameworkVersionLessThan4">
            <summary>这是使用 WPF4 吗？</summary>
            <remarks>在 3.5SP1 及更低版本的 Window 中有一些特定的错误，在 HWND 上处理 WM_NCCALCSIZE 时需要解决方法。</remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.WindowChromeWorker._window">
            <summary>正在修改 Chrome 窗口。</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.WindowChromeWorker._hwnd">
            <summary>_Window 的 底层 HWND。</summary>
            <SecurityNote>关键：关键成员</SecurityNote>
        </member>
        <member name="F:Microsoft.Windows.Shell.WindowChromeWorker._hwndSource">
            <summary>_Window 的 底层 HWND。</summary>
            <SecurityNote>关键：关键成员可以访问 HWND 的窗口消息，这些消息至关重要</SecurityNote>
        </member>
        <member name="F:Microsoft.Windows.Shell.WindowChromeWorker._chromeInfo">
            <summary>描述对 chrome 进行当前修改的对象。</summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker.#ctor">
            <SecurityNote>关键：将关键方法存储在关键回调表安全：需要完全信任权限</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker.SetWindowChrome(Microsoft.Windows.Shell.WindowChrome)">
            <SecurityNote>关键：调用关键方法安全：需要完全信任权限</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._OnChromePropertyChangedThatRequiresRepaint(System.Object,System.EventArgs)">
            <SecurityNote>关键：调用关键方法安全：需要完全信任权限</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._OnChromeWorkerChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <SecurityNote>关键：调用关键方法安全：需要完全信任权限</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._SetWindow(System.Windows.Window)">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._WindowSourceInitialized(System.Object,System.EventArgs)">
            <SecurityNote>关键：将关键方法存储在关键回调表安全：需要完全信任权限</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker.UnsubscribeWindowEvents">
            <SecurityNote>关键：参考关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._UnsetWindow(System.Object,System.EventArgs)">
            <SecurityNote>关键：将关键方法存储在关键回调表安全：需要完全信任权限</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._OnWindowPropertyChangedThatRequiresTemplateFixup(System.Object,System.EventArgs)">
            <SecurityNote>关键：访问关键 _hwnd 字段安全：需要完全信任权限</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._ApplyNewCustomChrome">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._FixupTemplateIssues">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._FixupRestoreBounds(System.Object,System.EventArgs)">
            <SecurityNote>关键：将关键方法存储在关键回调表安全：需要完全信任权限</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._GetAdjustedWindowRect(Standard.RECT)">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="P:Microsoft.Windows.Shell.WindowChromeWorker._IsWindowDocked">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="P:Microsoft.Windows.Shell.WindowChromeWorker._MinimizeAnimation">无边框的窗口无法使用动画，我们将其找回。</member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <SecurityNote>关键：访问关键 _hwnd</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._HandleNCUAHDrawCaption(Standard.WM,System.IntPtr,System.IntPtr,System.Boolean@)">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._HandleRestoreWindow(Standard.WM,System.IntPtr,System.IntPtr,System.Boolean@)">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._HandleNCActivate(Standard.WM,System.IntPtr,System.IntPtr,System.Boolean@)">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker.AdjustWorkingAreaForAutoHide(System.IntPtr,Standard.RECT)">
            <summary>如果任务栏设置为自动隐藏，则此方法处理窗口大小。</summary>
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._HandleNCCalcSize(Standard.WM,System.IntPtr,System.IntPtr,System.Boolean@)">
            <SecurityNote>关键：调用关键的 Marshal.PtrToStructure</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._HandleNCHitTest(Standard.WM,System.IntPtr,System.IntPtr,System.Boolean@)">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._HandleNCRButtonUp(Standard.WM,System.IntPtr,System.IntPtr,System.Boolean@)">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._HandleSize(Standard.WM,System.IntPtr,System.IntPtr,System.Boolean@)">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._HandleWindowPosChanging(Standard.WM,System.IntPtr,System.IntPtr,System.Boolean@)">
            <SecurityNote>关键：调用关键的 Marshal.PtrToStructure</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._HandleWindowPosChanged(Standard.WM,System.IntPtr,System.IntPtr,System.Boolean@)">
            <SecurityNote>关键：调用关键的 Marshal.PtrToStructure</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._HandleGetMinMaxInfo(Standard.WM,System.IntPtr,System.IntPtr,System.Boolean@)">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._HandleDwmCompositionChanged(Standard.WM,System.IntPtr,System.IntPtr,System.Boolean@)">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._HandleSettingChange(Standard.WM,System.IntPtr,System.IntPtr,System.Boolean@)">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._HandleEnterSizeMove(Standard.WM,System.IntPtr,System.IntPtr,System.Boolean@)">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._HandleEnterSizeMoveForAnimation(Standard.WM,System.IntPtr,System.IntPtr,System.Boolean@)">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._HandleMoveForRealSize(Standard.WM,System.IntPtr,System.IntPtr,System.Boolean@)">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._HandleExitSizeMoveForAnimation(Standard.WM,System.IntPtr,System.IntPtr,System.Boolean@)">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._ModifyStyle(Standard.WS,Standard.WS)">
            <summary>从 HWND 中添加和删除本机 WindowStyle。</summary>
            <param name="removeStyle">要删除的样式。可以逐位组合。</param>
            <param name="addStyle">要添加的样式。可以逐位组合。</param>
            <returns>是否通过此调用修改了 HWND 样式。</returns>
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._GetHwndState">
            <summary>获取 WindowState 作为本机 HWND 了解。这与 Window 的想法不一定相同。</summary>
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._GetWindowRect">
            <summary>通过物理坐标获取窗口的边界矩形。</summary>
            <returns>窗口的边界矩形。</returns>
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._UpdateSystemMenu(System.Nullable{System.Windows.WindowState})">
            <summary>根据当前或假定的 WindowState 更新系统菜单中的项目。</summary>
            <param name="assumeState">假设 Window 所在的状态。查询 Window 的状态可以为 null。</param>
            <remarks>我们想要更新菜单，同时我们可以控制是否重新绘制标题。</remarks>
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._UpdateFrameState(System.Boolean)">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._ClearRoundingRegion">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._GetClientRectRelativeToWindowRect(System.IntPtr)">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._SetRoundingRegion(System.Nullable{Standard.WINDOWPOS})">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._CreateRoundRectRgn(System.Windows.Rect,System.Double)">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._CreateAndCombineRoundRectRgn(System.IntPtr,System.Windows.Rect,System.Double)">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._ExtendGlassFrame">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="F:Microsoft.Windows.Shell.WindowChromeWorker._HitTestBorders">
            <summary>响应 NC 窗口消息时返回的 HT 值矩阵。</summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._RestoreStandardChromeState(System.Boolean)">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._UnhookCustomChrome">
            <SecurityNote>关键：取消订阅关键 _hwndSource 的事件处理程序</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._RestoreFrameworkIssueFixups">
            <SecurityNote>关键：取消订阅关键事件处理程序</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._RestoreGlassFrame">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._RestoreHrgn">
            <SecurityNote>关键：调用关键方法</SecurityNote>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>GeneratedInternalTypeHelper</summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>的 CreateInstance</summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>GetPropertyValue</summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>SetPropertyValue</summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>createDelegate 方法</summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>的 addEventHandler</summary>
        </member>
    </members>
</doc>