<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>GalaSoft.MvvmLight.Extras</name>
    </assembly>
    <members>
        <member name="T:GalaSoft.MvvmLight.Ioc.ISimpleIoc">
            <summary>具有注册和解析实例所需的基本功能的非常简单的 IOC 容器。如果需要，可以用实现 IServiceLocator 接口的另一个更精细的 IOC 容器替换此类。此类的灵感来自 https://gist.github.com/716137，但它已经扩展了其他功能。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.ContainsCreated``1">
            <summary>检查容器中是否已创建至少一个给定类的实例。</summary>
            <typeparam name="TClass">已查询的类。</typeparam>
            <returns>如果已创建至少一个类的实例，则为 true，否则为 false。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.ContainsCreated``1(System.String)">
            <summary>检查是否已为容器中的给定类创建具有给定密钥的实例。</summary>
            <typeparam name="TClass">已查询的类。</typeparam>
            <param name="key">已查询的密钥。</param>
            <returns>如果已为给定类注册具有给定密钥的实例，则为 true，否则为 false。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.IsRegistered``1">
            <summary>获取一个值，该值指示是否已注册给定类型 T。</summary>
            <typeparam name="T">此方法检查的类型。</typeparam>
            <returns>如果类型已注册，则为 true，否则为 false。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.IsRegistered``1(System.String)">
            <summary>获取一个值，该值指示是否已注册给定类型 T 和给定密钥。</summary>
            <typeparam name="T">此方法检查的类型。</typeparam>
            <param name="key">此方法检查的密钥。</param>
            <returns>如果类型和密钥已注册，则为 true，否则为 false。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``2">
            <summary>为给定接口注册给定类型。</summary>
            <typeparam name="TInterface">将为其解析实例的接口。</typeparam>
            <typeparam name="TClass">必须用于创建实例的类型。</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``2(System.Boolean)">
            <summary>为给定接口注册给定类型，可以立即创建实例。</summary>
            <typeparam name="TInterface">将为其解析实例的接口。</typeparam>
            <typeparam name="TClass">必须用于创建实例的类型。</typeparam>
            <param name="createInstanceImmediately">如果为 true，则强制创建所提供类的默认实例。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``1">
            <summary>注册给定类型。</summary>
            <typeparam name="TClass">必须用于创建实例的类型。</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``1(System.Boolean)">
            <summary>注册给定类型，可以立即创建实例。</summary>
            <typeparam name="TClass">必须用于创建实例的类型。</typeparam>
            <param name="createInstanceImmediately">如果为 true，则强制创建所提供类的默认实例。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``1(System.Func{``0})">
            <summary>为给定类型注册给定实例。</summary>
            <typeparam name="TClass">正在注册的类型。</typeparam>
            <param name="factory">工厂方法能够创建在解析给定类型时必须返回的实例。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``1(System.Func{``0},System.Boolean)">
            <summary>为给定类型注册给定实例，可以立即创建实例。</summary>
            <typeparam name="TClass">正在注册的类型。</typeparam>
            <param name="factory">工厂方法能够创建在解析给定类型时必须返回的实例。</param>
            <param name="createInstanceImmediately">如果为 true，则强制创建所提供类的默认实例。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``1(System.Func{``0},System.String)">
            <summary>为给定类型和给定密钥注册给定实例。</summary>
            <typeparam name="TClass">正在注册的类型。</typeparam>
            <param name="factory">工厂方法能够创建在解析给定类型时必须返回的实例。</param>
            <param name="key">为其注册给定实例的密钥。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``1(System.Func{``0},System.String,System.Boolean)">
            <summary>为给定类型和给定密钥注册给定实例，可以立即创建实例。</summary>
            <typeparam name="TClass">正在注册的类型。</typeparam>
            <param name="factory">工厂方法能够创建在解析给定类型时必须返回的实例。</param>
            <param name="key">为其注册给定实例的密钥。</param>
            <param name="createInstanceImmediately">如果为 true，则强制创建所提供类的默认实例。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Reset">
            <summary>将实例重置为其原始状态。这会删除所有注册。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Unregister``1">
            <summary>从缓存中取消注册一个类，并删除之前创建的所有实例。</summary>
            <typeparam name="TClass">必须删除的类。</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Unregister``1(``0)">
            <summary>从缓存中删除给定实例。类本身仍保持注册状态，可用于创建其他实例。</summary>
            <typeparam name="TClass">要删除的实例的类型。</typeparam>
            <param name="instance">必须删除的实例。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Unregister``1(System.String)">
            <summary>从缓存中删除与给定密钥对应的实例。类本身仍保持注册状态，可用于创建其他实例。</summary>
            <typeparam name="TClass">要删除的实例的类型。</typeparam>
            <param name="key">与必须删除的实例对应的密钥。</param>
        </member>
        <member name="T:GalaSoft.MvvmLight.Ioc.PreferredConstructorAttribute">
            <summary>与 SimpleIoc 容器一起使用时，指定在调用 GetInstance 时应使用哪个构造函数来实例化。如果类中只有一个构造函数，则不需要此属性。</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Ioc.SimpleIoc">
            <summary>一个非常简单的 IOC 容器，具有注册和解析实例所需的基本功能。如果需要，可以用实现 IServiceLocator 接口的另一个更精细的 IOC 容器替换此类。此类的灵感来自 https://gist.github.com/716137，但它已经扩展了其他功能。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Ioc.SimpleIoc.Default">
            <summary>此类的默认实例。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.ContainsCreated``1">
            <summary>检查容器中是否已创建至少一个给定类的实例。</summary>
            <typeparam name="TClass">已查询的类。</typeparam>
            <returns>如果已创建至少一个类的实例，则为 true，否则为 false。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.ContainsCreated``1(System.String)">
            <summary>检查是否已为容器中的给定类创建具有给定密钥的实例。</summary>
            <typeparam name="TClass">已查询的类。</typeparam>
            <param name="key">已查询的密钥。</param>
            <returns>如果已为给定类注册具有给定密钥的实例，则为 true，否则为 false。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.IsRegistered``1">
            <summary>获取一个值，该值指示是否已注册给定类型 T。</summary>
            <typeparam name="T">此方法检查的类型。</typeparam>
            <returns>如果类型已注册，则为 true，否则为 false。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.IsRegistered``1(System.String)">
            <summary>获取一个值，该值指示是否已注册给定类型 T 和给定密钥。</summary>
            <typeparam name="T">此方法检查的类型。</typeparam>
            <param name="key">此方法检查的密钥。</param>
            <returns>如果类型和密钥已注册，则为 true，否则为 false。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``2">
            <summary>为给定接口注册给定类型。</summary>
            <typeparam name="TInterface">将为其解析实例的接口。</typeparam>
            <typeparam name="TClass">必须用于创建实例的类型。</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``2(System.Boolean)">
            <summary>为给定接口注册给定类型，可以立即创建实例。</summary>
            <typeparam name="TInterface">将为其解析实例的接口。</typeparam>
            <typeparam name="TClass">必须用于创建实例的类型。</typeparam>
            <param name="createInstanceImmediately">如果为 true，则强制创建所提供类的默认实例。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1">
            <summary>注册给定类型。</summary>
            <typeparam name="TClass">必须用于创建实例的类型。</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1(System.Boolean)">
            <summary>注册给定类型，可以立即创建实例。</summary>
            <typeparam name="TClass">必须用于创建实例的类型。</typeparam>
            <param name="createInstanceImmediately">如果为 true，则强制创建所提供类的默认实例。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1(System.Func{``0})">
            <summary>为给定类型注册给定实例。</summary>
            <typeparam name="TClass">正在注册的类型。</typeparam>
            <param name="factory">工厂方法能够创建在解析给定类型时必须返回的实例。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1(System.Func{``0},System.Boolean)">
            <summary>为给定类型注册给定实例，可以立即创建实例。</summary>
            <typeparam name="TClass">正在注册的类型。</typeparam>
            <param name="factory">工厂方法能够创建在解析给定类型时必须返回的实例。</param>
            <param name="createInstanceImmediately">如果为 true，则强制创建所提供类的默认实例。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1(System.Func{``0},System.String)">
            <summary>为给定类型和给定密钥注册给定实例。</summary>
            <typeparam name="TClass">正在注册的类型。</typeparam>
            <param name="factory">工厂方法能够创建在解析给定类型时必须返回的实例。</param>
            <param name="key">为其注册给定实例的密钥。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1(System.Func{``0},System.String,System.Boolean)">
            <summary>为给定类型和给定密钥注册给定实例，可以立即创建实例。</summary>
            <typeparam name="TClass">正在注册的类型。</typeparam>
            <param name="factory">工厂方法能够创建在解析给定类型时必须返回的实例。</param>
            <param name="key">为其注册给定实例的密钥。</param>
            <param name="createInstanceImmediately">如果为 true，则强制创建所提供类的默认实例。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Reset">
            <summary>将实例重置为其原始状态。这会删除所有注册。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Unregister``1">
            <summary>从缓存中取消注册一个类，并删除之前创建的所有实例。</summary>
            <typeparam name="TClass">必须删除的类。</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Unregister``1(``0)">
            <summary>从缓存中删除给定实例。类本身仍保持注册状态，可用于创建其他实例。</summary>
            <typeparam name="TClass">要删除的实例的类型。</typeparam>
            <param name="instance">必须删除的实例。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Unregister``1(System.String)">
            <summary>从缓存中删除与给定密钥对应的实例。类本身仍保持注册状态，可用于创建其他实例。</summary>
            <typeparam name="TClass">要删除的实例的类型。</typeparam>
            <param name="key">与必须删除的实例对应的密钥。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetAllCreatedInstances(System.Type)">
            <summary>提供一种方法来获取缓存中可用的给定类型的所有创建的实例。注册类或工厂不会自动创建相应的实例！要创建实例，可以通过将 createInstanceImmediately 设置为 true 来注册类或工厂，也可以在调用 GetAllCreatedInstances 之前调用 GetInstance 方法。或者，使用 GetAllInstances 方法，该方法为所有已注册的类自动创建默认实例。</summary>
            <param name="serviceType">必须返回所有实例的类。</param>
            <returns>给定类型的所有已创建的实例。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetAllCreatedInstances``1">
            <summary>提供一种方法来获取缓存中可用的给定类型的所有创建的实例。注册类或工厂不会自动创建相应的实例！要创建实例，可以通过将 createInstanceImmediately 设置为 true 来注册类或工厂，也可以在调用 GetAllCreatedInstances 之前调用 GetInstance 方法。或者，使用 GetAllInstances 方法，该方法为所有已注册的类自动创建默认实例。</summary>
            <typeparam name="TService">必须返回所有实例的类。</typeparam>
            <returns>给定类型的所有已创建的实例。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetService(System.Type)">
            <summary>获取指定类型的服务对象。</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">如果在调用此方法之前尚未注册类型 serviceType。</exception>
            <returns>类型 <paramref name="serviceType" /> 的服务对象。</returns>
            <param name="serviceType">指定要获取的服务对象的类型的对象。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetAllInstances(System.Type)">
            <summary>提供一种方法来获取缓存中可用的给定类型的所有创建的实例。调用此方法会自动为所有已注册的类创建默认实例。</summary>
            <param name="serviceType">必须返回所有实例的类。</param>
            <returns>给定类型的所有实例。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetAllInstances``1">
            <summary>提供一种方法来获取缓存中可用的给定类型的所有创建的实例。调用此方法会自动为所有已注册的类创建默认实例。</summary>
            <typeparam name="TService">必须返回所有实例的类。</typeparam>
            <returns>给定类型的所有实例。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstance(System.Type)">
            <summary>提供获取给定类型的实例的方法。如果之前没有实例化任何实例，则将创建一个新实例。如果已创建实例，则将返回相同的实例。</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">如果在调用此方法之前尚未注册类型 serviceType。</exception>
            <param name="serviceType">必须返回实例的类。</param>
            <returns>给定类型的实例。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstanceWithoutCaching(System.Type)">
            <summary>提供获取给定类型的实例的方法。此方法始终返回新实例，并且不会将其缓存在 IOC 容器中。</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">如果在调用此方法之前尚未注册类型 serviceType。</exception>
            <param name="serviceType">必须返回实例的类。</param>
            <returns>给定类型的实例。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstance(System.Type,System.String)">
            <summary>提供一种方法来获取与给定密钥对应的给定类型的实例。如果之前没有使用此密钥实例化任何实例，则将创建一个新实例。如果已使用相同的密钥创建实例，则将返回相同的实例。</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">如果在调用此方法之前尚未注册类型 serviceType。</exception>
            <param name="serviceType">必须返回实例的类。</param>
            <param name="key">唯一标识此实例的密钥。</param>
            <returns>与给定类型和密钥对应的实例。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstanceWithoutCaching(System.Type,System.String)">
            <summary>提供获取给定类型的实例的方法。此方法始终返回新实例，并且不会将其缓存在 IOC 容器中。</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">如果在调用此方法之前尚未注册类型 serviceType。</exception>
            <param name="serviceType">必须返回实例的类。</param>
            <param name="key">唯一标识此实例的密钥。</param>
            <returns>与给定类型和密钥对应的实例。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstance``1">
            <summary>提供获取给定类型的实例的方法。如果之前没有实例化任何实例，则将创建一个新实例。如果已创建实例，则将返回相同的实例。</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">如果在调用此方法之前尚未注册类型 TService。</exception>
            <typeparam name="TService">必须返回实例的类。</typeparam>
            <returns>给定类型的实例。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstanceWithoutCaching``1">
            <summary>提供获取给定类型的实例的方法。此方法始终返回新实例，并且不会将其缓存在 IOC 容器中。</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">如果在调用此方法之前尚未注册类型 TService。</exception>
            <typeparam name="TService">必须返回实例的类。</typeparam>
            <returns>给定类型的实例。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstance``1(System.String)">
            <summary>提供一种方法来获取与给定密钥对应的给定类型的实例。如果之前没有使用此密钥实例化任何实例，则将创建一个新实例。如果已使用相同的密钥创建实例，则将返回相同的实例。</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">如果在调用此方法之前尚未注册类型 TService。</exception>
            <typeparam name="TService">必须返回实例的类。</typeparam>
            <param name="key">唯一标识此实例的密钥。</param>
            <returns>与给定类型和密钥对应的实例。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstanceWithoutCaching``1(System.String)">
            <summary>提供获取给定类型的实例的方法。此方法始终返回新实例，并且不会将其缓存在 IOC 容器中。</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">如果在调用此方法之前尚未注册类型 TService。</exception>
            <typeparam name="TService">必须返回实例的类。</typeparam>
            <param name="key">唯一标识此实例的密钥。</param>
            <returns>与给定类型和密钥对应的实例。</returns>
        </member>
    </members>
</doc>