<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Newtonsoft.Json</name>
    </assembly>
    <members>
        <member name="T:Newtonsoft.Json.Bson.BsonObjectId">
            <summary>表示 BSON Oid（对象 ID）。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonObjectId.Value">
            <summary>获取或设置 Oid 的值。</summary>
            <value>Oid 的值。</value>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Bson.BsonObjectId"/> 类的新实例。</summary>
            <param name="value">Oid 值。</param>
        </member>
        <member name="T:Newtonsoft.Json.Bson.BsonReader">
            <summary>表示读取器，其提供对串行化 JSON 数据的快速、非缓存、仅向前访问。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
            <summary>获取或设置值，该值指示二进制数据读取是否应与不正确的 Json.NET 3.5 写入二进制兼容。</summary>
            <value>如果二进制数据读取将与不正确的 Json.NET 3.5 写入二进制兼容，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
            <summary>获取或设置值，该值指示是否将根对象读取为 JSON 数组。</summary>
            <value>如果将根对象读取为 JSON 数组，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
            <summary>获取或设置从 BSON 读取 <see cref="T:System.DateTime"/> 值时使用的 <see cref="T:System.DateTimeKind" />。</summary>
            <value>从 BSON 读取 <see cref="T:System.DateTime"/> 值时使用的 <see cref="T:System.DateTimeKind" />。</value>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Bson.BsonReader"/> 类的新实例。</summary>
            <param name="stream">数据流。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
            <summary>初始化<see cref="T:Newtonsoft.Json.Bson.BsonReader"/>类的新实例。</summary>
            <param name="reader">读取器。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
            <summary>初始化<see cref="T:Newtonsoft.Json.Bson.BsonReader"/>类的新实例。</summary>
            <param name="stream">数据流。</param>
            <param name="readRootValueAsArray">如果设置为 <c>true</c>，则将根对象读取为 JSON 数组。</param>
            <param name="dateTimeKindHandling">从 BSON 读取 <see cref="T:System.DateTime"/> 值时使用的 <see cref="T:System.DateTimeKind" />。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
            <summary>初始化<see cref="T:Newtonsoft.Json.Bson.BsonReader"/>类的新实例。</summary>
            <param name="reader">读取器。</param>
            <param name="readRootValueAsArray">如果设置为 <c>true</c>，则将根对象读取为 JSON 数组。</param>
            <param name="dateTimeKindHandling">从 BSON 读取 <see cref="T:System.DateTime"/> 值时使用的 <see cref="T:System.DateTimeKind" />。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.Read">
            <summary>从数据流中读取下一个 JSON 令牌。</summary>
            <returns>如果成功读取下一个令牌，为 <c>true</c>；如果没有更多的令牌可供读取，则为 <c>false</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.Close">
            <summary>将 <see cref="T:Newtonsoft.Json.JsonReader.State"/> 更改为关闭。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Bson.BsonWriter">
            <summary>表示编写器，其提供一种快速、非缓存、仅向前的方式来生成 JSON 数据。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
            <summary>获取或设置向 BSON 写入 <see cref="T:System.DateTime"/> 值时使用的 <see cref="T:System.DateTimeKind" />。设置为 <see cref="F:System.DateTimeKind.Unspecified" /> 时，不会发生转换。</summary>
            <value>向 BSON 写入 <see cref="T:System.DateTime"/> 值时使用的 <see cref="T:System.DateTimeKind" />。</value>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Bson.BsonWriter"/> 类的新实例。</summary>
            <param name="stream">数据流。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
            <summary>初始化<see cref="T:Newtonsoft.Json.Bson.BsonWriter"/>类的新实例。</summary>
            <param name="writer">编写器。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.Flush">
            <summary>将缓冲区中的任何内容刷新到底层数据流，并刷新底层数据流。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>写入到结束。</summary>
            <param name="token">令牌。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
            <summary>写出包含指定文本的注释 <code>/*...*/</code>。</summary>
            <param name="text">放置在注释中的文本。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
            <summary>使用给定名称写入构造函数的开头。</summary>
            <param name="name">构造函数的名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
            <summary>写入原始 JSON。</summary>
            <param name="json">要写入的原始 JSON。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
            <summary>将原始 JSON 写入预期值并更新编写器的状态。</summary>
            <param name="json">要写入的原始 JSON。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
            <summary>写入 JSON 数组的开头。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
            <summary>写入 JSON 对象的开头。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
            <summary>在 JSON 对象上写入名称/值对的属性名称。</summary>
            <param name="name">属性的名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.Close">
            <summary>关闭此数据流和底层数据流。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Object)">
            <summary>写入 <see cref="T:System.Object"/> 值。如果无法将值写为单个 JSON 令牌，则会引发错误。</summary>
            <param name="value">要写入的 <see cref="T:System.Object"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteNull">
            <summary>写入 NULL 值。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
            <summary>写入未定义的值。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
            <summary>写入 <see cref="T:System.String"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.String"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
            <summary>写入 <see cref="T:System.Int32"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Int32"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
            <summary>写入 <see cref="T:System.UInt32"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.UInt32"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
            <summary>写入 <see cref="T:System.Int64"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Int64"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
            <summary>写入 <see cref="T:System.UInt64"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.UInt64"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
            <summary>写入 <see cref="T:System.Single"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Single"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
            <summary>写入 <see cref="T:System.Double"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Double"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
            <summary>写入 <see cref="T:System.Boolean"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Boolean"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
            <summary>写入 <see cref="T:System.Int16"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Int16"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
            <summary>写入 <see cref="T:System.UInt16"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.UInt16"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
            <summary>写入 <see cref="T:System.Char"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Char"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
            <summary>写入 <see cref="T:System.Byte"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Byte"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
            <summary>写入 <see cref="T:System.SByte"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.SByte"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
            <summary>写入 <see cref="T:System.Decimal"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Decimal"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
            <summary>写入 <see cref="T:System.DateTime"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.DateTime"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>写入 <see cref="T:System.DateTimeOffset"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.DateTimeOffset"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
            <summary>写入 <see cref="T:System.Byte"/>[] 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Byte"/>[] 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)">
            <summary>写入 <see cref="T:System.Guid"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Guid"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
            <summary>写入 <see cref="T:System.TimeSpan"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.TimeSpan"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)">
            <summary>写入 <see cref="T:System.Uri"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Uri"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
            <summary>写入表示 BSON 对象 ID 的 <see cref="T:System.Byte"/>[] 值。</summary>
            <param name="value">要写入的对象 ID 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
            <summary>写入 BSON 正则表达式。</summary>
            <param name="pattern">正则表达式模式。</param>
            <param name="options">正则表达式选项。</param>
        </member>
        <member name="T:Newtonsoft.Json.ConstructorHandling">
            <summary>指定在反序列化期间通过 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 初始化对象时如何使用构造函数。</summary>
        </member>
        <member name="F:Newtonsoft.Json.ConstructorHandling.Default">
            <summary>首先尝试使用公共默认构造函数，然后回退到单个参数化构造函数，然后是非公共默认构造函数。</summary>
        </member>
        <member name="F:Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
            <summary>在回退到参数化构造函数之前，Json.NET 将使用非公共默认构造函数。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.BinaryConverter">
            <summary>将二进制值转换为基数为 64 的字符串值以及从基数为 64 的字符串值转换二进制值。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>写入对象的 JSON 表示。</summary>
            <param name="writer">要写入到的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用串行化器。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>读取对象的 JSON 表示。</summary>
            <param name="reader">从 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">所读取的对象的现有值。</param>
            <param name="serializer">调用串行化器。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)">
            <summary>确定此实例是否可以转换指定的对象类型。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>如果此实例可以转换指定的对象类型，则为 <c>true</c>；否则，为<c>false</c>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.BsonObjectIdConverter">
            <summary>将 <see cref="T:Newtonsoft.Json.Bson.BsonObjectId"/> 转换为 JSON 和 BSON 以及从 JSON 和 BSON 转换。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>写入对象的 JSON 表示。</summary>
            <param name="writer">要写入到的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用串行化器。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>读取对象的 JSON 表示。</summary>
            <param name="reader">从 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">所读取的对象的现有值。</param>
            <param name="serializer">调用串行化器。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
            <summary>确定此实例是否可以转换指定的对象类型。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>如果此实例可以转换指定的对象类型，则为 <c>true</c>；否则，为<c>false</c>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.CustomCreationConverter`1">
            <summary>创建自定义对象</summary>
            <typeparam name="T">要转换的对象类型。</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>写入对象的 JSON 表示。</summary>
            <param name="writer">要写入到的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用串行化器。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>读取对象的 JSON 表示。</summary>
            <param name="reader">从 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">所读取的对象的现有值。</param>
            <param name="serializer">调用串行化器。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
            <summary>创建一个对象，然后由串行化器填充。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>创建的对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
            <summary>确定此实例是否可以转换指定的对象类型。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>如果此实例可以转换指定的对象类型，则为 <c>true</c>；否则，为<c>false</c>。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
            <summary>获取一个值，指示该 <see cref="T:Newtonsoft.Json.JsonConverter"/> 是否可以写入 JSON。</summary>
            <value>如果该 <see cref="T:Newtonsoft.Json.JsonConverter"/> 可以写入 JSON，则为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DataSetConverter">
            <summary>将 <see cref="T:System.Data.DataSet"/> 转换为 JSON 以及从 JSON 转换。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>写入对象的 JSON 表示。</summary>
            <param name="writer">要写入到的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用串行化器。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>读取对象的 JSON 表示。</summary>
            <param name="reader">从 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">所读取的对象的现有值。</param>
            <param name="serializer">调用串行化器。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)">
            <summary>确定此实例是否可以转换指定的值类型。</summary>
            <param name="valueType">值类型。</param>
            <returns>如果此实例可以转换指定的值类型，则为 <c>true</c>；否则，为<c>false</c>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DataTableConverter">
            <summary>将 <see cref="T:System.Data.DataTable"/> 转换为 JSON 以及从 JSON 转换。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>写入对象的 JSON 表示。</summary>
            <param name="writer">要写入到的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用串行化器。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>读取对象的 JSON 表示。</summary>
            <param name="reader">从 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">所读取的对象的现有值。</param>
            <param name="serializer">调用串行化器。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)">
            <summary>确定此实例是否可以转换指定的值类型。</summary>
            <param name="valueType">值类型。</param>
            <returns>如果此实例可以转换指定的值类型，则为 <c>true</c>；否则，为<c>false</c>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DateTimeConverterBase">
            <summary>提供将 <see cref="T:System.DateTime"/> 转换为 JSON 以及从 JSON 转换的基数类。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
            <summary>确定此实例是否可以转换指定的对象类型。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>如果此实例可以转换指定的对象类型，则为 <c>true</c>；否则，为<c>false</c>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DiscriminatedUnionConverter">
            <summary>将 F# 区别联合类型转换为 JSON 以及从 JSON 转换 F# 区别联合类型。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>写入对象的 JSON 表示。</summary>
            <param name="writer">要写入到的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用串行化器。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>读取对象的 JSON 表示。</summary>
            <param name="reader">从 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">所读取的对象的现有值。</param>
            <param name="serializer">调用串行化器。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)">
            <summary>确定此实例是否可以转换指定的对象类型。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>如果此实例可以转换指定的对象类型，则为 <c>true</c>；否则，为<c>false</c>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.EntityKeyMemberConverter">
            <summary>将实体框架 EntityKey 转换为 JSON 以及从 JSON 转换实体框架 EntityKey。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>写入对象的 JSON 表示。</summary>
            <param name="writer">要写入到的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用串行化器。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>读取对象的 JSON 表示。</summary>
            <param name="reader">从 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">所读取的对象的现有值。</param>
            <param name="serializer">调用串行化器。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
            <summary>确定此实例是否可以转换指定的对象类型。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>如果此实例可以转换指定的对象类型，则为 <c>true</c>；否则，为<c>false</c>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.ExpandoObjectConverter">
            <summary>将 ExpandoObject 转换为 JSON 以及从 JSON 转换 ExpandoObject。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>写入对象的 JSON 表示。</summary>
            <param name="writer">要写入到的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用串行化器。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>读取对象的 JSON 表示。</summary>
            <param name="reader">从 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">所读取的对象的现有值。</param>
            <param name="serializer">调用串行化器。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
            <summary>确定此实例是否可以转换指定的对象类型。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>如果此实例可以转换指定的对象类型，则为 <c>true</c>；否则，为<c>false</c>。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanWrite">
            <summary>获取一个值，指示该 <see cref="T:Newtonsoft.Json.JsonConverter"/> 是否可以写入 JSON。</summary>
            <value>如果该 <see cref="T:Newtonsoft.Json.JsonConverter"/> 可以写入 JSON，则为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="T:Newtonsoft.Json.Converters.IsoDateTimeConverter">
            <summary>将 <see cref="T:System.DateTime"/> 转换为 ISO 8601 日期格式以及从 ISO 8601 日期格式转换（例如 2008-04-12T12:53Z）。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
            <summary>获取或设置将日期转换到 JSON 以及从 JSON 转换日期时使用的日期时间样式。</summary>
            <value>将日期转换到 JSON 以及从 JSON 转换日期时使用的日期时间样式。</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
            <summary>获取或设置将日期转换到 JSON 以及从 JSON 转换日期时使用的日期时间格式。</summary>
            <value>将日期转换到 JSON 以及从 JSON 转换日期时使用的日期时间格式。</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
            <summary>获取或设置将日期转换到 JSON 以及从 JSON 转换日期时使用的区域性。</summary>
            <value>将日期转换到 JSON 以及从 JSON 转换日期时使用的区域性。</value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>写入对象的 JSON 表示。</summary>
            <param name="writer">要写入到的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用串行化器。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>读取对象的 JSON 表示。</summary>
            <param name="reader">从 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">所读取的对象的现有值。</param>
            <param name="serializer">调用串行化器。</param>
            <returns>对象值。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
            <summary>将 <see cref="T:System.DateTime"/> 转换为 JavaScript 日期构造函数以及从 JavaScript 日期构造函数转换（例如，新日期 (52231943)）。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>写入对象的 JSON 表示。</summary>
            <param name="writer">要写入到的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用串行化器。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>读取对象的 JSON 表示。</summary>
            <param name="reader">从 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">在转换的 JSON 的现有属性值。</param>
            <param name="serializer">调用串行化器。</param>
            <returns>对象值。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.KeyValuePairConverter">
            <summary>将 <see cref="T:System.Collections.Generic.KeyValuePair`2"/> 转换为 JSON 以及从 JSON 转换。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>写入对象的 JSON 表示。</summary>
            <param name="writer">要写入到的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用串行化器。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>读取对象的 JSON 表示。</summary>
            <param name="reader">从 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">所读取的对象的现有值。</param>
            <param name="serializer">调用串行化器。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
            <summary>确定此实例是否可以转换指定的对象类型。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>如果此实例可以转换指定的对象类型，则为 <c>true</c>；否则，为<c>false</c>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.RegexConverter">
            <summary>将 <see cref="T:System.Text.RegularExpressions.Regex"/> 转换为 JSON 和 BSON 以及从 JSON 和 BSON 转换。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>写入对象的 JSON 表示。</summary>
            <param name="writer">要写入到的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用串行化器。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>读取对象的 JSON 表示。</summary>
            <param name="reader">从 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">所读取的对象的现有值。</param>
            <param name="serializer">调用串行化器。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
            <summary>确定此实例是否可以转换指定的对象类型。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>如果此实例可以转换指定的对象类型，则为 <c>true</c>；否则，为<c>false</c>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.StringEnumConverter">
            <summary>将 <see cref="T:System.Enum"/> 转换为其名称字符串值以及从其名称字符串值转换。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
            <summary>获取或设置一个值，该值指示写入的枚举文本是否应为驼峰大小写。</summary>
            <value>如果写入的枚举文本是骆驼大小写，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.AllowIntegerValues">
            <summary>获取或设置一个值，该值指示是否允许整数值。</summary>
            <value>如果允许整数，为 <c>true</c>，否则，为 <c>false</c>。</value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter"/> 类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor(System.Boolean)">
            <summary>初始化<see cref="T:Newtonsoft.Json.Converters.StringEnumConverter"/>类的新实例。</summary>
            <param name="camelCaseText">如果写入的枚举文本是骆驼大小写，为 <c>true</c>；否则，为 <c>false</c>。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>写入对象的 JSON 表示。</summary>
            <param name="writer">要写入到的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用串行化器。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>读取对象的 JSON 表示。</summary>
            <param name="reader">从 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">所读取的对象的现有值。</param>
            <param name="serializer">调用串行化器。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
            <summary>确定此实例是否可以转换指定的对象类型。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>如果此实例可以转换指定的对象类型，则为 <c>true</c>；否则，为<c>false</c>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.VersionConverter">
            <summary>将 <see cref="T:System.Version"/>转换为字符串以及从字符串转换（例如，“1.2.3.4”）。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.VersionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>写入对象的 JSON 表示。</summary>
            <param name="writer">要写入到的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用串行化器。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.VersionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>读取对象的 JSON 表示。</summary>
            <param name="reader">从 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">在转换的 JSON 的现有属性值。</param>
            <param name="serializer">调用串行化器。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)">
            <summary>确定此实例是否可以转换指定的对象类型。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>如果此实例可以转换指定的对象类型，则为 <c>true</c>；否则，为<c>false</c>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.XmlNodeConverter">
            <summary>将 XML 转换为 JSON 以及从 JSON 转换 XML。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
            <summary>获取或设置在反序列化为 XML 时要插入的根元素的名称（如果 JSON 结构已生成多个根元素）。</summary>
            <value>反序列化根元素的名称。</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
            <summary>获取或设置一个标志，以指示是否编写 Json.NET 数组属性。在将写入的 XML 转换回 JSON 时，此属性有助于保留数组。</summary>
            <value>如果数组属性写入 XML，为 <c>true</c>；否则，则为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.OmitRootObject">
            <summary>获取或设置一个值，该值指示是否写入根 JSON 对象。</summary>
            <value>如果省略 JSON 根对象，为 <c>true</c>；否则，为<c>false</c>。</value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>写入对象的 JSON 表示。</summary>
            <param name="writer">要写入到的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="serializer">调用串行化器。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>读取对象的 JSON 表示。</summary>
            <param name="reader">从 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">所读取的对象的现有值。</param>
            <param name="serializer">调用串行化器。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
            <summary>检查 attributeName 是否为命名空间属性。</summary>
            <param name="attributeName">要测试的属性名称。</param>
            <param name="prefix">属性名称前缀（如果有），否则为空字符串。</param>
            <returns>如果属性名称为命名空间属性，为 <c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
            <summary>确定此实例是否可以转换指定的值类型。</summary>
            <param name="valueType">值类型。</param>
            <returns>如果此实例可以转换指定的值类型，则为 <c>true</c>；否则，为<c>false</c>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.FloatParseHandling">
            <summary>指定在读取 JSON 文本时如何解析浮点数（例如 1.0 和 9.9）。</summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatParseHandling.Double">
            <summary>浮点数被解析为 <see cref="F:Newtonsoft.Json.FloatParseHandling.Double"/>。</summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatParseHandling.Decimal">
            <summary>浮点数被解析为 <see cref="F:Newtonsoft.Json.FloatParseHandling.Decimal"/>。</summary>
        </member>
        <member name="T:Newtonsoft.Json.DateFormatHandling">
            <summary>指定在写入 JSON 文本时日期的格式。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat">
            <summary>日期以 ISO 8601 格式编写，例如 &quot;2012-03-21T05:40Z&quot;。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat">
            <summary>日期以 Microsoft JSON 格式编写，例如 &quot;\/Date(1198908717056)\/&quot;。</summary>
        </member>
        <member name="T:Newtonsoft.Json.DateParseHandling">
            <summary>指定在读取 JSON 文本时如何解析日期格式化字符串，例如 &quot;\/Date(1198908717056)\/&quot; 和 &quot;2012-03-21T05:40Z&quot;。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateParseHandling.None">
            <summary>日期格式化的字符串不会解析为日期类型，而是作为字符串读取。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateParseHandling.DateTime">
            <summary>日期格式化的字符串，例如 &quot;\/Date(1198908717056)\/&quot; 和 &quot;2012-03-21T05:40Z&quot;，被解析为 <see cref="F:Newtonsoft.Json.DateParseHandling.DateTime"/>。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset">
            <summary>日期格式化的字符串，例如 &quot;\/Date(1198908717056)\/&quot; 和 &quot;2012-03-21T05:40Z&quot;，被解析为 <see cref="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset"/>。</summary>
        </member>
        <member name="T:Newtonsoft.Json.DateTimeZoneHandling">
            <summary>指定在字符串和 <see cref="T:System.DateTime"/> 之间进行转换时如何处理时间值。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Local">
            <summary>视为当地时间。如果 <see cref="T:System.DateTime"/> 对象表示协调世界时 (UTC)，则被转换为当地时间。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Utc">
            <summary>视为 UTC。如果 <see cref="T:System.DateTime"/> 对象表示当地时间，则被转换为 UTC。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Unspecified">
            <summary>如果 <see cref="T:System.DateTime"/> 正在转换为字符串，则视为当地时间。如果字符串正在转换为 <see cref="T:System.DateTime"/>，如果指定了时区，则转换为当地时间。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind">
            <summary>转换时应保留时区信息。</summary>
        </member>
        <member name="T:Newtonsoft.Json.DefaultValueHandling">
            <summary>指定 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 的默认值处理选项。</summary>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" /> <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" /></example>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Include">
            <summary>在序列化对象时包括成员值与成员的默认值相同的成员。包含的成员将写入 JSON。反序列化时没有效果。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Ignore">
            <summary>在序列化对象时忽略成员值与成员的默认值相同的成员，这样就不会写入 JSON。此选项将忽略所有默认值（例如对象和可空类型的<c>NULL</c>；整数、小数和浮点数的 <c>0</c>；以及布尔的 <c>false</c>）。忽略的默认值可以通过将 <see cref="T:System.ComponentModel.DefaultValueAttribute"/> 放置在属性上来更改。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Populate">
            <summary>在反序列化时，具有默认值但没有 JSON 的成员将设置为其默认值。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate">
            <summary>在序列化对象时忽略成员值与成员的默认值相同的成员，并在反序列化时将成员设置为其默认值。</summary>
        </member>
        <member name="T:Newtonsoft.Json.FloatFormatHandling">
            <summary>在写入特殊浮点数时指定浮点格式处理选项，例如 <see cref="F:System.Double.NaN"/>、<see cref="F:System.Double.PositiveInfinity"/> 以及 <see cref="F:System.Double.NegativeInfinity"/> 和 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatFormatHandling.String">
            <summary>将特殊浮点值写为 JSON 中的字符串，例如 &quot;NaN&quot;、&quot;Infinity&quot;、&quot;-Infinity&quot;。</summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatFormatHandling.Symbol">
            <summary>将特殊浮点值写为 JSON 中的符号，例如 NaN、Infinity、-Infinity。请注意，这将产生无效的 JSON。</summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatFormatHandling.DefaultValue">
            <summary>将特殊浮点值写为 JSON 中属性的默认值，例如 <see cref="T:System.Double"/> 属性的 0.0 ，<see cref="T:System.Nullable`1"/> 属性的 NULL。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Formatting">
            <summary>指定 <see cref="T:Newtonsoft.Json.JsonTextWriter"/> 的格式选项。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.None">
            <summary>没有应用特殊格式。这是默认值。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.Indented">
            <summary>导致子对象按照  <see cref="P:Newtonsoft.Json.JsonTextWriter.Indentation"/> 和 <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar"/> 设置缩进。</summary>
        </member>
        <member name="T:Newtonsoft.Json.IArrayPool`1">
            <summary>提供使用池阵列的接口。</summary>
            <typeparam name="T">数组类型内容。</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.IArrayPool`1.Rent(System.Int32)">
            <summary>从池租一个数组。不再需要时，必须返回此数组。</summary>
            <param name="minimumLength">数组所需的最小长度。返回的数组可能更长。</param>
            <returns>来自池的租用数组。不再需要时，必须返回此数组。</returns>
        </member>
        <member name="M:Newtonsoft.Json.IArrayPool`1.Return(`0[])">
            <summary>将数组返回池中。</summary>
            <param name="array">在返回的数组。</param>
        </member>
        <member name="T:Newtonsoft.Json.IJsonLineInfo">
            <summary>提供一个接口，使类能够返回行和位置信息。</summary>
        </member>
        <member name="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
            <summary>获取一个值，该值指示类是否可以返回行信息。</summary>
            <returns>如果可以提供 LineNumber 和 LinePosition，为 <c>true</c>；否则，为 <c>false</c>。</returns>
        </member>
        <member name="P:Newtonsoft.Json.IJsonLineInfo.LineNumber">
            <summary>获取当前行数。</summary>
            <value>当前行数，如果没有可用的行信息，则为 0（例如，HasLineInfo 返回 false）。</value>
        </member>
        <member name="P:Newtonsoft.Json.IJsonLineInfo.LinePosition">
            <summary>获取当前行位置。</summary>
            <value>当前行位置，如果没有可用的行信息，则为 0（例如，HasLineInfo 返回 false）。</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonArrayAttribute">
            <summary>指示 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 如何串行化集合。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
            <summary>获取或设置一个值，该值指示集合中是否允许使用 NULL 项。</summary>
            <value>如果集合中允许 NULL 项，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonArrayAttribute"/> 类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonObjectAttribute"/> 类的新实例，其具有指示数组是否可以包含 NULL 项的标志</summary>
            <param name="allowNullItems">指示数组是否可以包含 NULL 项的标志。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonArrayAttribute"/> 类的新实例，其具有指定的容器 ID。</summary>
            <param name="id">容器 ID。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonConstructorAttribute">
            <summary>指示 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 在反序列化该对象时使用指定的构造函数。</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonContainerAttribute">
            <summary>指示 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 如何串行化对象。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Id">
            <summary>获取或设置 ID。</summary>
            <value>ID。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Title">
            <summary>获取或设置标题。</summary>
            <value>标题。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Description">
            <summary>获取或设置描述。</summary>
            <value>描述。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterType">
            <summary>获取或设置集合的项目转换器。</summary>
            <value>集合的项目转换器。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterParameters">
            <summary>构造 ItemConverterType 描述的 <see cref="T:Newtonsoft.Json.JsonConverter"/> 时使用的参数列表。如果为 NULL，则使用默认构造函数。当非 NULL 时，必须在 <see cref="T:Newtonsoft.Json.JsonConverter"/> 中定义与这些参数的数量、顺序和类型完全匹配的构造函数。</summary>
            <example>[JsonContainer(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, &quot;Four&quot; })]</example>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.NamingStrategyType">
            <summary>获取或设置 <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/> 的 <see cref="T:System.Type"/>。</summary>
            <value><see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/> 的 <see cref="T:System.Type"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.NamingStrategyParameters">
            <summary>构造 NamingStrategyType 描述的 <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/> 时使用的参数列表。如果为 NULL，则使用默认构造函数。当非 NULL 时，必须在 <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/> 中定义与这些参数的数量、顺序和类型完全匹配的构造函数。</summary>
            <example>[JsonContainer(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, &quot;Four&quot; })]</example>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.IsReference">
            <summary>获取或设置一个值，该值指示是否保留对象引用。</summary>
            <value><c>true</c> 为保持对象引用；否则为 <c>false</c>。默认为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemIsReference">
            <summary>获取或设置一个值，该值指示是否保留集合项引用。</summary>
            <value><c>true</c> 为保持集合项引用；否则为 <c>false</c>。默认为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
            <summary>获取或设置串行化集合项时使用的引用循环处理。</summary>
            <value>参考循环处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemTypeNameHandling">
            <summary>获取或设置串行化集合项时使用的类型名处理。</summary>
            <value>类型名处理。</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonContainerAttribute"/> 类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonContainerAttribute"/> 类的新实例，其具有指定的容器 ID。</summary>
            <param name="id">容器 ID。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonConvert">
            <summary>提供在公用语言运行时类型和 JSON 类型之间进行转换的方法。</summary>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" /></example>
        </member>
        <member name="P:Newtonsoft.Json.JsonConvert.DefaultSettings">
            <summary>获取或设置一个创建默认 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> 的函数。序列化方法自动在 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 上的 <see cref="T:Newtonsoft.Json.JsonConvert"/>、<see cref="M:Newtonsoft.Json.Linq.JToken.ToObject``1"/> 和 <see cref="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)"/> 上使用默认设置。要不使用任何默认设置进行串行化，请创建一个具有 <see cref="M:Newtonsoft.Json.JsonSerializer.Create"/> 的 <see cref="T:Newtonsoft.Json.JsonSerializer"/>。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.True">
            <summary>将 JavaScript 的布尔值 true 表示为字符串。此字段为只读。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.False">
            <summary>将 JavaScript 的布尔值 false 表示为字符串。此字段为只读。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.Null">
            <summary>将 JavaScript 的 NULL 表示为字符串。此字段为只读。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.Undefined">
            <summary>将 JavaScript 的未定义值表示为字符串。此字段为只读。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.PositiveInfinity">
            <summary>将 JavaScript 的正无穷大表示为字符串。此字段为只读。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.NegativeInfinity">
            <summary>将 JavaScript 的负无穷大表示为字符串。此字段为只读。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.NaN">
            <summary>将 JavaScript 的 NaN 表示为字符串。此字段为只读。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
            <summary>将 <see cref="T:System.DateTime"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.DateTime"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime,Newtonsoft.Json.DateFormatHandling,Newtonsoft.Json.DateTimeZoneHandling)">
            <summary>使用指定的 <see cref="T:Newtonsoft.Json.DateFormatHandling"/> 将 <see cref="T:System.DateTime"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <param name="format">日期将转换为的格式。</param>
            <param name="timeZoneHandling">将日期转换为字符串时的时区处理。</param>
            <returns><see cref="T:System.DateTime"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
            <summary>将 <see cref="T:System.DateTimeOffset"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.DateTimeOffset"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset,Newtonsoft.Json.DateFormatHandling)">
            <summary>使用指定的 <see cref="T:Newtonsoft.Json.DateFormatHandling"/> 将 <see cref="T:System.DateTimeOffset"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <param name="format">日期将转换为的格式。</param>
            <returns><see cref="T:System.DateTimeOffset"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
            <summary>将 <see cref="T:System.Boolean"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Boolean"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Char)">
            <summary>将 <see cref="T:System.Char"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Char"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
            <summary>将 <see cref="T:System.Enum"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Enum"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
            <summary>将 <see cref="T:System.Int32"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Int32"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
            <summary>将 <see cref="T:System.Int16"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Int16"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
            <summary>将 <see cref="T:System.UInt16"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.UInt16"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
            <summary>将 <see cref="T:System.UInt32"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.UInt32"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
            <summary>将 <see cref="T:System.Int64"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Int64"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
            <summary>将 <see cref="T:System.UInt64"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.UInt64"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Single)">
            <summary>将 <see cref="T:System.Single"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Single"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Double)">
            <summary>将 <see cref="T:System.Double"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Double"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
            <summary>将 <see cref="T:System.Byte"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Byte"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
            <summary>将 <see cref="T:System.SByte"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.SByte"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
            <summary>将 <see cref="T:System.Decimal"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.SByte"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
            <summary>将 <see cref="T:System.Guid"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Guid"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)">
            <summary>将 <see cref="T:System.TimeSpan"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.TimeSpan"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Uri)">
            <summary>将 <see cref="T:System.Uri"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Uri"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String)">
            <summary>将 <see cref="T:System.String"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.String"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
            <summary>将 <see cref="T:System.String"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <param name="delimiter">字符串分隔符。</param>
            <returns><see cref="T:System.String"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char,Newtonsoft.Json.StringEscapeHandling)">
            <summary>将 <see cref="T:System.String"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <param name="delimiter">字符串分隔符。</param>
            <param name="stringEscapeHandling">字符串转义处理。</param>
            <returns><see cref="T:System.String"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Object)">
            <summary>将 <see cref="T:System.Object"/> 转换为其 JSON 字符串表示。</summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Object"/> 的 JSON 字符串表示。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
            <summary>将指定的对象串行化为 JSON 字符串。</summary>
            <param name="value">要串行化的对象。</param>
            <returns>对象的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting)">
            <summary>使用格式将指定对象串行化为 JSON 字符串。</summary>
            <param name="value">要串行化的对象。</param>
            <param name="formatting">指示输出的格式。</param>
            <returns>对象的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonConverter[])">
            <summary>使用 <see cref="T:Newtonsoft.Json.JsonConverter"/> 的集合将指定对象串行化为 JSON 字符串。</summary>
            <param name="value">要串行化的对象。</param>
            <param name="converters">串行化时使用的集合转换器。</param>
            <returns>对象的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
            <summary>使用格式和 <see cref="T:Newtonsoft.Json.JsonConverter"/> 的集合将指定对象串行化为 JSON 字符串。</summary>
            <param name="value">要串行化的对象。</param>
            <param name="formatting">指示输出的格式。</param>
            <param name="converters">串行化时使用的集合转换器。</param>
            <returns>对象的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>使用 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> 将指定对象串行化为 JSON 字符串。</summary>
            <param name="value">要串行化的对象。</param>
            <param name="settings">用于串行化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。如果为 NULL，则将使用默认序列化设置。</param>
            <returns>对象的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>使用类型、格式和 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> 将指定对象串行化为 JSON 字符串。</summary>
            <param name="value">要串行化的对象。</param>
            <param name="settings">用于串行化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。如果为 NULL，则将使用默认序列化设置。</param>
            <param name="type">在串行化的值的类型。当 <see cref="T:Newtonsoft.Json.TypeNameHandling"/> 为 Auto 时，如果值的类型不匹配，则使用此参数写出类型名称。指定类型是可选的。</param>
            <returns>对象的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>使用格式和 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> 将指定对象串行化为 JSON 字符串。</summary>
            <param name="value">要串行化的对象。</param>
            <param name="formatting">指示输出的格式。</param>
            <param name="settings">用于串行化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。如果为 NULL，则将使用默认序列化设置。</param>
            <returns>对象的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>使用类型、格式和 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> 将指定对象串行化为 JSON 字符串。</summary>
            <param name="value">要串行化的对象。</param>
            <param name="formatting">指示输出的格式。</param>
            <param name="settings">用于串行化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。如果为 NULL，则将使用默认序列化设置。</param>
            <param name="type">在串行化的值的类型。当 <see cref="T:Newtonsoft.Json.TypeNameHandling"/> 为 Auto 时，如果值的类型不匹配，则使用此参数写出类型名称。指定类型是可选的。</param>
            <returns>对象的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object)">
            <summary>将指定对象异步串行化为 JSON 字符串。序列化将在新会话上发生。</summary>
            <param name="value">要串行化的对象。</param>
            <returns>表示异步串行化操作的任务。<c>TResult</c> 参数的值包含对象的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting)">
            <summary>使用格式将指定对象异步串行化为 JSON 字符串。序列化将在新会话上发生。</summary>
            <param name="value">要串行化的对象。</param>
            <param name="formatting">指示输出的格式。</param>
            <returns>表示异步串行化操作的任务。<c>TResult</c> 参数的值包含对象的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>使用格式和 <see cref="T:Newtonsoft.Json.JsonConverter"/> 的集合将指定对象异步串行化为 JSON 字符串。序列化将在新会话上发生。</summary>
            <param name="value">要串行化的对象。</param>
            <param name="formatting">指示输出的格式。</param>
            <param name="settings">用于串行化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。如果为 NULL，则将使用默认序列化设置。</param>
            <returns>表示异步串行化操作的任务。<c>TResult</c> 参数的值包含对象的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
            <summary>将 JSON 反序列化为 .NET 对象。</summary>
            <param name="value">要反序列化的 JSON。</param>
            <returns>来自 JSON 字符串的反序列化对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>使用 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> 将 JSON 反序列化为 .NET 对象。</summary>
            <param name="value">要反序列化的 JSON。</param>
            <param name="settings">用于反序列化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。如果为 NULL，则将使用默认序列化设置。</param>
            <returns>来自 JSON 字符串的反序列化对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>将 JSON 反序列化为指定的 .NET 类型。</summary>
            <param name="value">要反序列化的 JSON。</param>
            <param name="type">被反序列化的对象的 <see cref="T:System.Type"/>。</param>
            <returns>来自 JSON 字符串的反序列化对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
            <summary>将 JSON 反序列化为指定的 .NET 类型。</summary>
            <typeparam name="T">要反序列化的对象类型。</typeparam>
            <param name="value">要反序列化的 JSON。</param>
            <returns>来自 JSON 字符串的反序列化对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
            <summary>将 JSON 反序列化为给定的匿名类型。</summary>
            <typeparam name="T">要反序列化的匿名类型。这不能通过传统方式指定，必须从作为参数传递的匿名类型中提取。</typeparam>
            <param name="value">要反序列化的 JSON。</param>
            <param name="anonymousTypeObject">匿名类型对象。</param>
            <returns>来自 JSON 字符串的反序列化匿名类型。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>使用 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> 将 JSON 反序列化为给定的匿名类型。</summary>
            <typeparam name="T">要反序列化的匿名类型。这不能通过传统方式指定，必须从作为参数传递的匿名类型中提取。</typeparam>
            <param name="value">要反序列化的 JSON。</param>
            <param name="anonymousTypeObject">匿名类型对象。</param>
            <param name="settings">用于反序列化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。如果为 NULL，则将使用默认序列化设置。</param>
            <returns>来自 JSON 字符串的反序列化匿名类型。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
            <summary>使用 <see cref="T:Newtonsoft.Json.JsonConverter"/> 的集合将 JSON 反序列化为指定的 .NET 类型。</summary>
            <typeparam name="T">要反序列化的对象类型。</typeparam>
            <param name="value">要反序列化的 JSON。</param>
            <param name="converters">反序列化时使用的转换器。</param>
            <returns>来自 JSON 字符串的反序列化对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>使用 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> 将 JSON 反序列化为指定的 .NET 类型。</summary>
            <typeparam name="T">要反序列化的对象类型。</typeparam>
            <param name="value">反序列化的对象。</param>
            <param name="settings">用于反序列化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。如果为 NULL，则将使用默认序列化设置。</param>
            <returns>来自 JSON 字符串的反序列化对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonConverter[])">
            <summary>使用 <see cref="T:Newtonsoft.Json.JsonConverter"/> 的集合将 JSON 反序列化为指定的 .NET 类型。</summary>
            <param name="value">要反序列化的 JSON。</param>
            <param name="type">要反序列化的对象类型。</param>
            <param name="converters">反序列化时使用的转换器。</param>
            <returns>来自 JSON 字符串的反序列化对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>使用 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> 将 JSON 反序列化为指定的 .NET 类型。</summary>
            <param name="value">要反序列化的 JSON。</param>
            <param name="type">要反序列化的对象类型。</param>
            <param name="settings">用于反序列化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。如果为 NULL，则将使用默认序列化设置。</param>
            <returns>来自 JSON 字符串的反序列化对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String)">
            <summary>将 JSON 异步反序列化为指定的 .NET 类型。反序列化将在新会话上发生。</summary>
            <typeparam name="T">要反序列化的对象类型。</typeparam>
            <param name="value">要反序列化的 JSON。</param>
            <returns>表示异步反序列化操作的任务。<c>TResult</c> 参数的值包含 JSON 字符串中的反序列化对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>使用 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> 将 JSON 异步反序列化为指定的 .NET 类型。反序列化将在新会话上发生。</summary>
            <typeparam name="T">要反序列化的对象类型。</typeparam>
            <param name="value">要反序列化的 JSON。</param>
            <param name="settings">用于反序列化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。如果为 NULL，则将使用默认序列化设置。</param>
            <returns>表示异步反序列化操作的任务。<c>TResult</c> 参数的值包含 JSON 字符串中的反序列化对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String)">
            <summary>将 JSON 异步反序列化为指定的 .NET 类型。反序列化将在新会话上发生。</summary>
            <param name="value">要反序列化的 JSON。</param>
            <returns>表示异步反序列化操作的任务。<c>TResult</c> 参数的值包含 JSON 字符串中的反序列化对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>使用 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> 将 JSON 异步反序列化为指定的 .NET 类型。反序列化将在新会话上发生。</summary>
            <param name="value">要反序列化的 JSON。</param>
            <param name="type">要反序列化的对象类型。</param>
            <param name="settings">用于反序列化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。如果为 NULL，则将使用默认序列化设置。</param>
            <returns>表示异步反序列化操作的任务。<c>TResult</c> 参数的值包含 JSON 字符串中的反序列化对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
            <summary>使用 JSON 字符串中的值填充对象。</summary>
            <param name="value">填充值的 JSON。</param>
            <param name="target">要将值填充到的目标对象。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>使用 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> 用 JSON 字符串中的值填充对象。</summary>
            <param name="value">填充值的 JSON。</param>
            <param name="target">要将值填充到的目标对象。</param>
            <param name="settings">用于反序列化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。如果为 NULL，则将使用默认序列化设置。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.PopulateObjectAsync(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>使用 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> 用 JSON 字符串中的值异步填充对象。</summary>
            <param name="value">填充值的 JSON。</param>
            <param name="target">要将值填充到的目标对象。</param>
            <param name="settings">用于反序列化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。如果为 NULL，则将使用默认序列化设置。</param>
            <returns>表示异步填充操作的任务。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
            <summary>将 XML 节点串行化为 JSON 字符串。</summary>
            <param name="node">要串行化的节点。</param>
            <returns>XmlNode 的 JSON 字符串。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting)">
            <summary>使用格式将 XML 节点串行化为 JSON 字符串。</summary>
            <param name="node">要串行化的节点。</param>
            <param name="formatting">指示输出的格式。</param>
            <returns>XmlNode 的 JSON 字符串。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting,System.Boolean)">
            <summary>使用格式将 XML 节点串行化为 JSON 字符串，如果 <paramref name="omitRootObject"/> 为 <c>true</c>，则忽略根对象。</summary>
            <param name="node">要串行化的节点。</param>
            <param name="formatting">指示输出的格式。</param>
            <param name="omitRootObject">省略写入根对象。</param>
            <returns>XmlNode 的 JSON 字符串。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String)">
            <summary>从 JSON 字符串反序列化 XmlNode。</summary>
            <param name="value">JSON 字符串。</param>
            <returns>反序列化的 XmlNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
            <summary>从由 <paramref name="deserializeRootElementName"/> 指定的根元素中嵌套的 JSON 字符串反序列化 XmlNode。</summary>
            <param name="value">JSON 字符串。</param>
            <param name="deserializeRootElementName">反序列化时要追加的根元素的名称。</param>
            <returns>反序列化的 XmlNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
            <summary>从由 <paramref name="deserializeRootElementName"/> 指定的根元素中嵌套的 JSON 字符串反序列化 XmlNode，并且写入集合的 .NET 数组属性。</summary>
            <param name="value">JSON 字符串。</param>
            <param name="deserializeRootElementName">反序列化时要追加的根元素的名称。</param>
            <param name="writeArrayAttribute">指示是否写入 Json.NET 数组属性的标志。在将写入的 XML 转换回 JSON 时，此属性有助于保留数组。</param>
            <returns>反序列化的 XmlNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)">
            <summary>将 <see cref="T:System.Xml.Linq.XNode"/> 串行化为 JSON 字符串。</summary>
            <param name="node">要转换为 JSON 的节点。</param>
            <returns>XNode 的 JSON 字符串。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting)">
            <summary>使用格式将 <see cref="T:System.Xml.Linq.XNode"/> 串行化为 JSON 字符串。</summary>
            <param name="node">要转换为 JSON 的节点。</param>
            <param name="formatting">指示输出的格式。</param>
            <returns>XNode 的 JSON 字符串。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting,System.Boolean)">
            <summary>使用格式将 <see cref="T:System.Xml.Linq.XNode"/> 串行化为 JSON 字符串，如果 <paramref name="omitRootObject"/> 为 <c>true</c>，则忽略根对象。</summary>
            <param name="node">要串行化的节点。</param>
            <param name="formatting">指示输出的格式。</param>
            <param name="omitRootObject">省略写入根对象。</param>
            <returns>XNode 的 JSON 字符串。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String)">
            <summary>从 JSON 字符串反序列化 <see cref="T:System.Xml.Linq.XNode"/>。</summary>
            <param name="value">JSON 字符串。</param>
            <returns>反序列化的 XNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String)">
            <summary>从由 <paramref name="deserializeRootElementName"/> 指定的根元素中嵌套的 JSON 字符串反序列化 <see cref="T:System.Xml.Linq.XNode"/>。</summary>
            <param name="value">JSON 字符串。</param>
            <param name="deserializeRootElementName">反序列化时要追加的根元素的名称。</param>
            <returns>反序列化的 XNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)">
            <summary>从由 <paramref name="deserializeRootElementName"/> 指定的根元素中嵌套的 JSON 字符串反序列化 <see cref="T:System.Xml.Linq.XNode"/>，并且写入集合的 .NET 数组属性。</summary>
            <param name="value">JSON 字符串。</param>
            <param name="deserializeRootElementName">反序列化时要追加的根元素的名称。</param>
            <param name="writeArrayAttribute">指示是否写入 Json.NET 数组属性的标志。在将写入的 XML 转换回 JSON 时，此属性有助于保留数组。</param>
            <returns>反序列化的 XNode</returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverter">
            <summary>将对象转换为 JSON 以及从 JSON 转换对象。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>写入对象的 JSON 表示。</summary>
            <param name="writer">要写入到的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用串行化器。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>读取对象的 JSON 表示。</summary>
            <param name="reader">从 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">所读取的对象的现有值。</param>
            <param name="serializer">调用串行化器。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
            <summary>确定此实例是否可以转换指定的对象类型。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>如果此实例可以转换指定的对象类型，则为 <c>true</c>；否则，为<c>false</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.GetSchema">
            <summary>
            <para>获取 JsonConverter 生成的 JSON 的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</para>
            <note type="caution">JSON 架构验证已移至其自己的包中。有关详细信息，请登录 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。</note>
            </summary>
            <returns>JsonConverter 生成的 JSON 的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverter.CanRead">
            <summary>获取一个值，指示该 <see cref="T:Newtonsoft.Json.JsonConverter"/> 是否可以读取 JSON。</summary>
            <value>如果该 <see cref="T:Newtonsoft.Json.JsonConverter"/> 可以读取 JSON，则为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverter.CanWrite">
            <summary>获取一个值，指示该 <see cref="T:Newtonsoft.Json.JsonConverter"/> 是否可以写入 JSON。</summary>
            <value>如果该 <see cref="T:Newtonsoft.Json.JsonConverter"/> 可以写入 JSON，则为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverterAttribute">
            <summary>指示 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 在序列化成员或类时使用指定的 <see cref="T:Newtonsoft.Json.JsonConverter"/>。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType">
            <summary>获取 <see cref="T:Newtonsoft.Json.JsonConverter"/> 的 <see cref="T:System.Type"/>。</summary>
            <value><see cref="T:Newtonsoft.Json.JsonConverter"/> 的 <see cref="T:System.Type"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterParameters">
            <summary>构造 ConverterType 描述的 <see cref="T:Newtonsoft.Json.JsonConverter"/> 时使用的参数列表。如果为 NULL，则使用默认构造函数。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonConverterAttribute"/> 类的新实例。</summary>
            <param name="converterType"><see cref="T:Newtonsoft.Json.JsonConverter"/> 的类型。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type,System.Object[])">
            <summary>初始化<see cref="T:Newtonsoft.Json.JsonConverterAttribute"/>类的新实例。</summary>
            <param name="converterType"><see cref="T:Newtonsoft.Json.JsonConverter"/> 的类型。</param>
            <param name="converterParameters">构造 <see cref="T:Newtonsoft.Json.JsonConverter"/> 时使用的参数列表。可为 NULL。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverterCollection">
            <summary>表示 <see cref="T:Newtonsoft.Json.JsonConverter"/> 的集合。</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonDictionaryAttribute">
            <summary>指示 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 如何串行化集合。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute"/> 类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor(System.String)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute"/> 类的新实例，其具有指定的容器 ID。</summary>
            <param name="id">容器 ID。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonException">
            <summary>在 JSON 序列化或反序列化期间发生错误时引发的异常。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonException"/> 类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonException"/> 类的新实例，其具有指定的错误消息。</summary>
            <param name="message">解释异常原因的错误消息。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonException"/> 类的新实例，其具有指定的错误消息以及对作为此异常原因的内部异常的引用。</summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">如果未指定内部异常，则导致当前异常的异常或 NULL 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化<see cref="T:Newtonsoft.Json.JsonException"/>类的新实例。</summary>
            <param name="info">包含有关引发异常的串行化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">包含有关源或目标的上下文信息的 <see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> 参数为 NULL。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">类名为 NULL 或 <see cref="P:System.Exception.HResult"/> 为零 (0)。</exception>
        </member>
        <member name="T:Newtonsoft.Json.JsonExtensionDataAttribute">
            <summary>指示 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 将没有匹配的类成员的属性反序列化到指定的集合中，并在序列化期间写入值。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.WriteData">
            <summary>获取或设置一个值，该值指示在串行化对象时是否写入扩展数据。</summary>
            <value><c>true</c> 为在串行化对象时写入扩展数据；否则，为<c>false</c>。默认为 <c>true</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.ReadData">
            <summary>获取或设置一个值，该值指示在反序列化对象时是否读取扩展数据。</summary>
            <value><c>true</c> 为在反序列化对象时读取扩展数据；否则，为<c>false</c>。默认为 <c>true</c>。</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonExtensionDataAttribute.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonExtensionDataAttribute"/> 类的新实例。</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonIgnoreAttribute">
            <summary>指示 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 不要串行化公共字段或公开读取/写入属性值。</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonObjectAttribute">
            <summary>指示 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 如何串行化对象。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
            <summary>获取或设置成员序列化。</summary>
            <value>成员序列化。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonObjectAttribute.ItemRequired">
            <summary>获取或设置一个值，该值指示是否需要对象的属性。</summary>
            <value>指示是否需要对象属性的值。</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonObjectAttribute"/> 类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonObjectAttribute"/> 类的新实例，其具有指定的成员序列化。</summary>
            <param name="memberSerialization">成员序列化。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonObjectAttribute"/> 类的新实例，其具有指定的容器 ID。</summary>
            <param name="id">容器 ID。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonPropertyAttribute">
            <summary>指示 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 始终串行化具有指定名称的成员。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType">
            <summary>获取或设置序列化属性的集合项时使用的 <see cref="T:Newtonsoft.Json.JsonConverter"/>。</summary>
            <value>集合项 <see cref="T:Newtonsoft.Json.JsonConverter"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterParameters">
            <summary>构造 ItemConverterType 描述的 <see cref="T:Newtonsoft.Json.JsonConverter"/> 时使用的参数列表。如果为 NULL，则使用默认构造函数。当非 NULL 时，必须在 <see cref="T:Newtonsoft.Json.JsonConverter"/> 中定义与这些参数的数量、顺序和类型完全匹配的构造函数。</summary>
            <example>[JsonProperty(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, &quot;Four&quot; })]</example>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyType">
            <summary>获取或设置 <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/> 的 <see cref="T:System.Type"/>。</summary>
            <value><see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/> 的 <see cref="T:System.Type"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyParameters">
            <summary>构造 NamingStrategyType 描述的 <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/> 时使用的参数列表。如果为 NULL，则使用默认构造函数。当非 NULL 时，必须在 <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/> 中定义与这些参数的数量、顺序和类型完全匹配的构造函数。</summary>
            <example>[JsonProperty(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, &quot;Four&quot; })]</example>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
            <summary>获取或设置串行化此属性时使用的 NULL 值处理。</summary>
            <value>NULL 值处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
            <summary>获取或设置串行化此属性时使用的默认值处理。</summary>
            <value>默认值处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
            <summary>获取或设置串行化此属性时使用的引用循环处理。</summary>
            <value>参考循环处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
            <summary>获取或设置反序列化此属性时使用的对象创建处理。</summary>
            <value>对象创建处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
            <summary>获取或设置串行化此属性时使用的类型名称处理。</summary>
            <value>类型名处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.IsReference">
            <summary>获取或设置此属性的值是否已串行化为引用。</summary>
            <value>是否将此属性的值串行化为引用。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Order">
            <summary>获取或设置成员的序列化顺序。</summary>
            <value>序列化的数字顺序。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Required">
            <summary>获取或设置一个值，该值指示是否需要此属性。</summary>
            <value>指示是否需要此属性的值。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
            <summary>获取或设置属性的名称。</summary>
            <value>属性的名称。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
            <summary>获取或设置串行化属性的集合项时使用的引用循环处理。</summary>
            <value>集合项引用循环处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemTypeNameHandling">
            <summary>获取或设置串行化属性的集合项时使用的类型名称处理。</summary>
            <value>集合项类型名称处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemIsReference">
            <summary>获取或设置此属性的集合项是否已串行化为引用。</summary>
            <value>此属性的集合项是否已串行化为引用。</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> 类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> 类的新实例，其具有指定名称。</summary>
            <param name="propertyName">属性名称。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonReader">
            <summary>表示读取器，其提供对串行化 JSON 数据的快速、非缓存、仅向前访问。</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonReader.State">
            <summary>指定读取器的状态。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Start">
            <summary>尚未调用 Read 方法。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Complete">
            <summary>已成功到达文件末尾。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Property">
            <summary>读取器处于属性。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ObjectStart">
            <summary>读取器是一个对象的开始。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Object">
            <summary>读取器在对象中。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ArrayStart">
            <summary>读取器是一个数组的开始。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Array">
            <summary>读取器在数组中。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Closed">
            <summary>已调用 Close 方法。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.PostValue">
            <summary>读取器刚读取了一个值。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ConstructorStart">
            <summary>读取器是一个构造函数的开始。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Constructor">
            <summary>读取器在构造函数中。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Error">
            <summary>发生阻止读取操作继续的错误。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Finished">
            <summary>已成功到达文件末尾。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.CurrentState">
            <summary>获取当前读取器状态。</summary>
            <value>当前读取器状态。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.CloseInput">
            <summary>获取或设置一个值，该值指示底层数据流或 <see cref="T:System.IO.TextReader"/> 是否应该在读取器关闭时关闭。</summary>
            <value>true 为读取器关闭时关闭底层数据流或 <see cref="T:System.IO.TextReader"/>；否则，为 false。默认为 true。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.SupportMultipleContent">
            <summary>获取或设置一个值，该值指示是否可以从连续数据流中读取多个 JSON 内容而不会出错。</summary>
            <value>如果支持读取多个 JSON 内容，则为 true；否则为 false。默认为 false。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
            <summary>获取用于括起字符串值的引号字符。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.DateTimeZoneHandling">
            <summary>获取或设置读取 JSON 时处理 <see cref="T:System.DateTime"/> 时区的方式。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.DateParseHandling">
            <summary>获取或设置在读取 JSON 时如何解析日期格式化字符串，例如 &quot;\/Date(1198908717056)\/&quot; 和 &quot;2012-03-21T05:40Z&quot;。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.FloatParseHandling">
            <summary>获取或设置在读取 JSON 文本时如何解析浮点数（例如 1.0 和 9.9）。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.DateFormatString">
            <summary>获取或设置读取 JSON 时如何解析自定义日期格式化字符串。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.MaxDepth">
            <summary>获取或设置读取 JSON 时允许的最大深度。读过这个深度会引发 <see cref="T:Newtonsoft.Json.JsonReaderException"/>。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.TokenType">
            <summary>获取当前 JSON 令牌的类型。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Value">
            <summary>获取当前 JSON 令牌的文本值。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.ValueType">
            <summary>获取当前 JSON 令牌的公共语言运行时 (CLR) 类型。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Depth">
            <summary>获取 JSON 文档中当前令牌的深度。</summary>
            <value>JSON 文档中当前令牌的深度。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Path">
            <summary>获取当前 JSON 令牌的路径。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Culture">
            <summary>获取或设置读取 JSON 时使用的区域性。默认为 <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonReader"/> 类的新实例，其具有指定 <see cref="T:System.IO.TextReader"/>。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Read">
            <summary>从数据流中读取下一个 JSON 令牌。</summary>
            <returns>如果成功读取下一个令牌，为 <c>true</c>；如果没有更多的令牌可供读取，则为 <c>false</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsInt32">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.Nullable`1"/>。</summary>
            <returns><see cref="T:System.Nullable`1"/>。这个方法会在数组的末尾返回 <c>NULL</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsString">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.String"/>。</summary>
            <returns><see cref="T:System.String"/>。这个方法会在数组的末尾返回 <c>NULL</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytes">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.Byte"/>[]。</summary>
            <returns>如果下一个 JSON 令牌为 NULL，则为 <see cref="T:System.Byte"/>[] 或 NULL 引用。这个方法会在数组的末尾返回 <c>NULL</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDouble">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.Nullable`1"/>。</summary>
            <returns><see cref="T:System.Nullable`1"/>。这个方法会在数组的末尾返回 <c>NULL</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsBoolean">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.Nullable`1"/>。</summary>
            <returns><see cref="T:System.Nullable`1"/>。这个方法会在数组的末尾返回 <c>NULL</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDecimal">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.Nullable`1"/>。</summary>
            <returns><see cref="T:System.Nullable`1"/>。这个方法会在数组的末尾返回 <c>NULL</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTime">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.Nullable`1"/>。</summary>
            <returns><see cref="T:System.Nullable`1"/>。这个方法会在数组的末尾返回 <c>NULL</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.Nullable`1"/>。</summary>
            <returns><see cref="T:System.Nullable`1"/>。这个方法会在数组的末尾返回 <c>NULL</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Skip">
            <summary>跳过当前令牌的子节点。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken)">
            <summary>设置当前令牌。</summary>
            <param name="newToken">新令牌。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object)">
            <summary>设置当前令牌和值。</summary>
            <param name="newToken">新令牌。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
            <summary>根据当前令牌类型设置状态。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.System#IDisposable#Dispose">
            <summary>执行与解除、释放或重置非托管资源相关的应用程序定义的任务。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
            <summary>发布非托管和 - 可选 - 托管资源</summary>
            <param name="disposing"><c>true</c> 为发布托管和非托管资源；<c>false</c> 为仅发布非托管资源。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Close">
            <summary>将 <see cref="T:Newtonsoft.Json.JsonReader.State"/> 更改为关闭。</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonReaderException">
            <summary>读取 JSON 文本发生错误时引发的异常。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.LineNumber">
            <summary>获取指示错误发生位置的行号。</summary>
            <value>指示错误发生位置的行号。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.LinePosition">
            <summary>获取指示错误发生位置的行位置。</summary>
            <value>指示错误发生位置的行位置。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.Path">
            <summary>获取发生错误的 JSON 的路径。</summary>
            <value>发生错误的 JSON 路径。</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonReaderException"/> 类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonReaderException"/> 类的新实例，其具有指定的错误消息。</summary>
            <param name="message">解释异常原因的错误消息。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonReaderException"/> 类的新实例，其具有指定的错误消息以及对作为此异常原因的内部异常的引用。</summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">如果未指定内部异常，则导致当前异常的异常或 NULL 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化<see cref="T:Newtonsoft.Json.JsonReaderException"/>类的新实例。</summary>
            <param name="info">包含有关引发异常的串行化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">包含有关源或目标的上下文信息的 <see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> 参数为 NULL。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">类名为 NULL 或 <see cref="P:System.Exception.HResult"/> 为零 (0)。</exception>
        </member>
        <member name="T:Newtonsoft.Json.JsonRequiredAttribute">
            <summary>指示 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 始终串行化成员，并要求成员具有值。</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializationException">
            <summary>在 JSON 序列化或反序列化期间发生错误时引发的异常。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonSerializationException"/> 类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonSerializationException"/> 类的新实例，其具有指定的错误消息。</summary>
            <param name="message">解释异常原因的错误消息。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonSerializationException"/> 类的新实例，其具有指定的错误消息以及对作为此异常原因的内部异常的引用。</summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">如果未指定内部异常，则导致当前异常的异常或 NULL 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化<see cref="T:Newtonsoft.Json.JsonSerializationException"/>类的新实例。</summary>
            <param name="info">包含有关引发异常的串行化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">包含有关源或目标的上下文信息的 <see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> 参数为 NULL。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">类名为 NULL 或 <see cref="P:System.Exception.HResult"/> 为零 (0)。</exception>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializer">
            <summary>将对象序列化和反序列化为 JSON 格式以及从 JSON 格式序列化和反序列化对象。<see cref="T:Newtonsoft.Json.JsonSerializer"/> 使你能够控制对象编码为 JSON 的方式。</summary>
        </member>
        <member name="E:Newtonsoft.Json.JsonSerializer.Error">
            <summary>序列化和反序列化过程中出现 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 时发生。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceResolver">
            <summary>获取或设置解析引用时串行化器使用的 <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/>。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Binder">
            <summary>获取或设置解析类型名称时串行化器使用的 <see cref="T:System.Runtime.Serialization.SerializationBinder"/>。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TraceWriter">
            <summary>获取或设置写入跟踪消息时串行化器使用的 <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter"/>。</summary>
            <value>跟踪编写器。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.EqualityComparer">
            <summary>获取或设置比较引用时串行化器使用的相等比较器。</summary>
            <value>相等比较器。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling">
            <summary>获取或设置串行化器如何处理类型名称写入和读取。</summary>
            <remarks><see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> 当你的应用程序从外部源反序列化 JSON 时，应谨慎使用。使用除 <c>TypeNameHandling.None</c> 以外的值反序列化时，应使用自定义 <see cref="T:System.Runtime.Serialization.SerializationBinder"/> 验证传入类型。</remarks>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
            <summary>获取或设置串行化器如何编写和解析类型名称程序集。</summary>
            <value>类型名称程序集格式。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
            <summary>获取或设置串行化器如何保留对象引用。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>获取或设置如何处理引用循环（例如，引用其自身的类）。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
            <summary>获取或设置在反序列化期间处理缺少成员（例如，JSON 包含不是对象成员的属性）的方式。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.NullValueHandling">
            <summary>获取或设置序列化和反序列化期间处理 NULL 值的方式。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
            <summary>获取或设置序列化和反序列化期间处理 NULL 默认值的方式。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
            <summary>获取或设置反序列化期间如何创建对象。</summary>
            <value>对象创建处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ConstructorHandling">
            <summary>获取或设置反序列化期间构造函数的使用方式。</summary>
            <value>构造函数处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MetadataPropertyHandling">
            <summary>获取或设置反序列化期间元数据属性的使用方式。</summary>
            <value>元数据属性处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Converters">
            <summary>获取一个将在序列化期间使用的集合 <see cref="T:Newtonsoft.Json.JsonConverter"/>。</summary>
            <value>将在序列化期间使用的集合 <see cref="T:Newtonsoft.Json.JsonConverter"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ContractResolver">
            <summary>获取或设置将 .NET 对象串行化为 JSON 时（反之亦然）串行化器使用的合约解析程序。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Context">
            <summary>获取或设置调用序列化回调方法时串行化器使用的 <see cref="T:System.Runtime.Serialization.StreamingContext"/>。</summary>
            <value>上下文。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Formatting">
            <summary>指示如何格式化 JSON 文本输出。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatHandling">
            <summary>获取或设置日期写入 JSON 文本的方式。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateTimeZoneHandling">
            <summary>获取或设置在序列化和反序列化期间处理 <see cref="T:System.DateTime"/> 时区的方式。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateParseHandling">
            <summary>获取或设置在读取 JSON 时如何解析日期格式化字符串，例如 &quot;\/Date(1198908717056)\/&quot; 和 &quot;2012-03-21T05:40Z&quot;。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.FloatParseHandling">
            <summary>获取或设置在读取 JSON 文本时如何解析浮点数（例如 1.0 和 9.9）。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.FloatFormatHandling">
            <summary>获取或设置特殊浮点数（例如 <see cref="F:System.Double.NaN"/>、<see cref="F:System.Double.PositiveInfinity"/> 和 <see cref="F:System.Double.NegativeInfinity"/>）写入为 JSON 文本的方式。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.StringEscapeHandling">
            <summary>获取或设置在编写 JSON 文本时如何转义字符串。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatString">
            <summary>获取或设置在编写 JSON 文本时 <see cref="T:System.DateTime"/> 和 <see cref="T:System.DateTimeOffset"/> 的格式化方式，以及在读取 JSON 文本时预期日期格式的格式化方式。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Culture">
            <summary>获取或设置读取 JSON 时使用的区域性。默认为 <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MaxDepth">
            <summary>获取或设置读取 JSON 时允许的最大深度。读过这个深度会引发 <see cref="T:Newtonsoft.Json.JsonReaderException"/>。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.CheckAdditionalContent">
            <summary>获取一个值，该值指示在反序列化对象后是否检查其他 JSON 内容。</summary>
            <value>如果在反序列化对象后将检查其他 JSON 内容，为<c>true</c>；否则，则为<c>false</c>。</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Create">
            <summary>创建新的 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 实例。<see cref="T:Newtonsoft.Json.JsonSerializer"/> 不会使用 <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/> 的默认设置。</summary>
            <returns>新的 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 实例。<see cref="T:Newtonsoft.Json.JsonSerializer"/> 不会使用 <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/> 的默认设置。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>使用指定的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> 创建新的 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 实例。<see cref="T:Newtonsoft.Json.JsonSerializer"/> 不会使用 <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/> 的默认设置。</summary>
            <param name="settings">要应用于 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 的设置。</param>
            <returns>使用指定的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> 的新 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 实例。<see cref="T:Newtonsoft.Json.JsonSerializer"/> 不会使用 <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/> 的默认设置。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault">
            <summary>创建新的 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 实例。<see cref="T:Newtonsoft.Json.JsonSerializer"/> 将使用 <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/> 的默认设置。</summary>
            <returns>新的 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 实例。<see cref="T:Newtonsoft.Json.JsonSerializer"/> 将使用 <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/> 的默认设置。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>使用指定的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> 创建新的 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 实例。<see cref="T:Newtonsoft.Json.JsonSerializer"/> 将使用 <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/> 的默认设置以及指定的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。</summary>
            <param name="settings">要应用于 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 的设置。</param>
            <returns>使用指定的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> 的新 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 实例。<see cref="T:Newtonsoft.Json.JsonSerializer"/> 将使用 <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/> 的默认设置以及指定的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
            <summary>将 JSON 值填充到目标对象上。</summary>
            <param name="reader">包含 JSON 结构的 <see cref="T:System.IO.TextReader"/>，其中包含读取器值。</param>
            <param name="target">要将值填充到的目标对象。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader,System.Object)">
            <summary>将 JSON 值填充到目标对象上。</summary>
            <param name="reader">包含 JSON 结构的 <see cref="T:Newtonsoft.Json.JsonReader"/>，其中包含读取器值。</param>
            <param name="target">要将值填充到的目标对象。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
            <summary>反序列化指定 <see cref="T:Newtonsoft.Json.JsonReader"/> 包含的 JSON 结构。</summary>
            <param name="reader">包含要反序列化的 JSON 结构的 <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <returns>被反序列化的 <see cref="T:System.Object"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>将指定 <see cref="T:System.IO.StringReader"/> 包含的 JSON 结构反序列化到特定类型的实例。</summary>
            <param name="reader"><see cref="T:System.IO.TextReader"/> 包含对象。</param>
            <param name="objectType">被反序列化的对象的 <see cref="T:System.Type"/>。</param>
            <returns>被反序列化的 <paramref name="objectType"/> 的实例。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize``1(Newtonsoft.Json.JsonReader)">
            <summary>将指定 <see cref="T:Newtonsoft.Json.JsonReader"/> 包含的 JSON 结构反序列化到特定类型的实例。</summary>
            <param name="reader"><see cref="T:Newtonsoft.Json.JsonReader"/> 包含对象。</param>
            <typeparam name="T">要反序列化的对象类型。</typeparam>
            <returns>被反序列化的 <typeparamref name="T"/> 的实例。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
            <summary>将指定 <see cref="T:Newtonsoft.Json.JsonReader"/> 包含的 JSON 结构反序列化到特定类型的实例。</summary>
            <param name="reader"><see cref="T:Newtonsoft.Json.JsonReader"/> 包含对象。</param>
            <param name="objectType">被反序列化的对象的 <see cref="T:System.Type"/>。</param>
            <returns>被反序列化的 <paramref name="objectType"/> 的实例。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>序列化指定的 <see cref="T:System.Object"/> 并使用指定的 <see cref="T:System.IO.TextWriter"/> 将 JSON 结构写入<c>数据流</c>。</summary>
            <param name="textWriter">用于写入 JSON 结构的 <see cref="T:System.IO.TextWriter"/>。</param>
            <param name="value">要串行化的 <see cref="T:System.Object"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object,System.Type)">
            <summary>序列化指定的 <see cref="T:System.Object"/> 并使用指定的 <see cref="T:System.IO.TextWriter"/> 将 JSON 结构写入<c>数据流</c>。</summary>
            <param name="jsonWriter">用于写入 JSON 结构的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">要串行化的 <see cref="T:System.Object"/>。</param>
            <param name="objectType">在串行化的值的类型。当 <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> 为 Auto 时，如果值的类型不匹配，则使用此参数写出类型名称。指定类型是可选的。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
            <summary>序列化指定的 <see cref="T:System.Object"/> 并使用指定的 <see cref="T:System.IO.TextWriter"/> 将 JSON 结构写入<c>数据流</c>。</summary>
            <param name="textWriter">用于写入 JSON 结构的 <see cref="T:System.IO.TextWriter"/>。</param>
            <param name="value">要串行化的 <see cref="T:System.Object"/>。</param>
            <param name="objectType">在串行化的值的类型。当 <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> 为 Auto 时，如果值的类型不匹配，则使用此参数写出类型名称。指定类型是可选的。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>序列化指定的 <see cref="T:System.Object"/> 并使用指定的 <see cref="T:Newtonsoft.Json.JsonWriter"/> 将 JSON 结构写入<c>数据流</c>。</summary>
            <param name="jsonWriter">用于写入 JSON 结构的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">要串行化的 <see cref="T:System.Object"/>。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializerSettings">
            <summary>指定 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 对象上的设置。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
            <summary>获取或设置如何处理引用循环（例如，引用其自身的类）。</summary>
            <value>引用循环处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
            <summary>获取或设置在反序列化期间处理缺少成员（例如，JSON 包含不是对象成员的属性）的方式。</summary>
            <value>缺少成员处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
            <summary>获取或设置反序列化期间如何创建对象。</summary>
            <value>对象创建处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
            <summary>获取或设置序列化和反序列化期间处理 NULL 值的方式。</summary>
            <value>NULL 值处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
            <summary>获取或设置序列化和反序列化期间处理 NULL 默认值的方式。</summary>
            <value>默认值处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Converters">
            <summary>获取或设置一个将在序列化期间使用的 <see cref="T:Newtonsoft.Json.JsonConverter"/> 集合。</summary>
            <value>转换器。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
            <summary>获取或设置串行化器如何保留对象引用。</summary>
            <value>保留引用处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
            <summary>获取或设置串行化器如何处理类型名称写入和读取。</summary>
            <remarks><see cref="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling"/> 当你的应用程序从外部源反序列化 JSON 时，应谨慎使用。使用除 <c>TypeNameHandling.None</c> 以外的值反序列化时，应使用自定义 <see cref="T:System.Runtime.Serialization.SerializationBinder"/> 验证传入类型。</remarks>
            <value>类型名处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MetadataPropertyHandling">
            <summary>获取或设置反序列化期间元数据属性的使用方式。</summary>
            <value>元数据属性处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
            <summary>获取或设置串行化器如何编写和解析类型名称程序集。</summary>
            <value>类型名称程序集格式。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
            <summary>获取或设置反序列化期间构造函数的使用方式。</summary>
            <value>构造函数处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
            <summary>获取或设置将 .NET 对象串行化为 JSON 时（反之亦然）串行化器使用的合约解析程序。</summary>
            <value>合约解析程序。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.EqualityComparer">
            <summary>获取或设置比较引用时串行化器使用的相等比较器。</summary>
            <value>相等比较器。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
            <summary>获取或设置解析引用时串行化器使用的 <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/>。</summary>
            <value>引用解析器。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolverProvider">
            <summary>获取或设置一个函数，该函数创建解析引用时串行化器使用的 <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/>。</summary>
            <value>创建解析引用时串行化器使用的 <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/> 的函数。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TraceWriter">
            <summary>获取或设置写入跟踪消息时串行化器使用的 <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter"/>。</summary>
            <value>跟踪编写器。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Binder">
            <summary>获取或设置解析类型名称时串行化器使用的 <see cref="T:System.Runtime.Serialization.SerializationBinder"/>。</summary>
            <value>绑定程序。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Error">
            <summary>获取或设置序列化和反序列化期间调用的错误处理程序。</summary>
            <value>序列化和反序列化期间调用的错误处理程序。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Context">
            <summary>获取或设置调用序列化回调方法时串行化器使用的 <see cref="T:System.Runtime.Serialization.StreamingContext"/>。</summary>
            <value>上下文。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatString">
            <summary>获取或设置在编写 JSON 文本时 <see cref="T:System.DateTime"/> 和 <see cref="T:System.DateTimeOffset"/> 的格式化方式，以及在读取 JSON 文本时预期日期格式的格式化方式。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MaxDepth">
            <summary>获取或设置读取 JSON 时允许的最大深度。读过这个深度会引发 <see cref="T:Newtonsoft.Json.JsonReaderException"/>。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Formatting">
            <summary>指示如何格式化 JSON 文本输出。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling">
            <summary>获取或设置日期写入 JSON 文本的方式。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling">
            <summary>获取或设置在序列化和反序列化期间处理<see cref="T:System.DateTime"/>时区的方式。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateParseHandling">
            <summary>获取或设置在读取 JSON 时如何解析日期格式化字符串，例如 &quot;\/Date(1198908717056)\/&quot; 和 &quot;2012-03-21T05:40Z&quot;。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatFormatHandling">
            <summary>获取或设置特殊浮点数（例如 <see cref="F:System.Double.NaN"/>、<see cref="F:System.Double.PositiveInfinity"/> 和 <see cref="F:System.Double.NegativeInfinity"/>）写入为 JSON 的方式。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatParseHandling">
            <summary>获取或设置在读取 JSON 文本时如何解析浮点数（例如 1.0 和 9.9）。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.StringEscapeHandling">
            <summary>获取或设置在编写 JSON 文本时如何转义字符串。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Culture">
            <summary>获取或设置读取 JSON 时使用的区域性。默认为 <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent">
            <summary>获取一个值，该值指示在反序列化对象后是否检查其他内容。</summary>
            <value>如果在反序列化对象后将检查其他内容，为<c>true</c>；否则，则为<c>false</c>。</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializerSettings.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> 类的新实例。</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonTextReader">
            <summary>表示读取器，其提供对 JSON 文本数据的快速、非缓存、仅向前访问。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonReader"/> 类的新实例，其具有指定 <see cref="T:System.IO.TextReader"/>。</summary>
            <param name="reader"><c>TextReader</c> 包含要读取的 XML 数据。</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.ArrayPool">
            <summary>获取或设置读取器的字符缓冲池。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.Read">
            <summary>从数据流中读取下一个 JSON 令牌。</summary>
            <returns>如果成功读取下一个令牌，为 <c>true</c>；如果没有更多的令牌可供读取，则为 <c>false</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsInt32">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.Nullable`1"/>。</summary>
            <returns><see cref="T:System.Nullable`1"/>。这个方法会在数组的末尾返回 <c>NULL</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTime">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.Nullable`1"/>。</summary>
            <returns><see cref="T:System.Nullable`1"/>。这个方法会在数组的末尾返回 <c>NULL</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsString">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.String"/>。</summary>
            <returns><see cref="T:System.String"/>。这个方法会在数组的末尾返回 <c>NULL</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytes">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.Byte"/>[]。</summary>
            <returns>如果下一个 JSON 令牌为 NULL，则为 <see cref="T:System.Byte"/>[] 或 NULL 引用。这个方法会在数组的末尾返回 <c>NULL</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBoolean">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.Nullable`1"/>。</summary>
            <returns><see cref="T:System.Nullable`1"/>。这个方法会在数组的末尾返回 <c>NULL</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.Nullable`1"/>。</summary>
            <returns><see cref="T:System.Nullable`1"/>。这个方法会在数组的末尾返回 <c>NULL</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.Nullable`1"/>。</summary>
            <returns><see cref="T:System.Nullable`1"/>。这个方法会在数组的末尾返回 <c>NULL</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDouble">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.Nullable`1"/>。</summary>
            <returns><see cref="T:System.Nullable`1"/>。这个方法会在数组的末尾返回 <c>NULL</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.Close">
            <summary>将状态更改为已关闭。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.HasLineInfo">
            <summary>获取一个值，该值指示类是否可以返回行信息。</summary>
            <returns>如果可以提供 LineNumber 和 LinePosition，为 <c>true</c>；否则，为 <c>false</c>。</returns>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.LineNumber">
            <summary>获取当前行数。</summary>
            <value>当前行数，如果没有可用的行信息，则为 0（例如，HasLineInfo 返回 false）。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.LinePosition">
            <summary>获取当前行位置。</summary>
            <value>当前行位置，如果没有可用的行信息，则为 0（例如，HasLineInfo 返回 false）。</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonTextWriter">
            <summary>表示编写器，其提供一种快速、非缓存、仅向前的方式来生成 JSON 数据。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.ArrayPool">
            <summary>获取或设置编写器的字符数组池。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.Indentation">
            <summary>获取或设置当 <see cref="T:Newtonsoft.Json.Formatting"/> 设置为 <c>Formatting.Indented</c> 时，层次结构中每个级别要写入的 IndentChars 的数量。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteChar">
            <summary>获取或设置用于引用属性值的字符。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.IndentChar">
            <summary>获取或设置 <see cref="T:Newtonsoft.Json.Formatting"/> 设置为 <c>Formatting.Indented</c> 时，用于缩进的字符。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteName">
            <summary>获取或设置一个值，该值指示对象名称是否将用引号括起来。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>使用指定的 <see cref="T:System.IO.TextWriter"/> 创建 <c>JsonWriter</c> 类的实例。</summary>
            <param name="textWriter">要写入的 <c>TextWriter</c>。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.Flush">
            <summary>将缓冲区中的任何内容刷新到底层数据流，并刷新底层数据流。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.Close">
            <summary>关闭此数据流和底层数据流。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObject">
            <summary>写入 JSON 对象的开头。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArray">
            <summary>写入 JSON 数组的开头。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
            <summary>使用给定名称写入构造函数的开头。</summary>
            <param name="name">构造函数的名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>写入指定的结束令牌。</summary>
            <param name="token">要写入的结束令牌。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
            <summary>在 JSON 对象上写入名称/值对的属性名称。</summary>
            <param name="name">属性的名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>在 JSON 对象上写入名称/值对的属性名称。</summary>
            <param name="name">属性的名称。</param>
            <param name="escape">指示在将文本写为 JSON 属性名称时是否应对其进行转义的标志。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndent">
            <summary>写入缩进字符。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
            <summary>写入 JSON 值分隔符。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
            <summary>写入缩进空间。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Object)">
            <summary>写入 <see cref="T:System.Object"/> 值。如果无法将值写为单个 JSON 令牌，则会引发错误。</summary>
            <param name="value">要写入的 <see cref="T:System.Object"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNull">
            <summary>写入 NULL 值。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefined">
            <summary>写入未定义的值。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
            <summary>写入原始 JSON。</summary>
            <param name="json">要写入的原始 JSON。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
            <summary>写入 <see cref="T:System.String"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.String"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
            <summary>写入 <see cref="T:System.Int32"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Int32"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
            <summary>写入 <see cref="T:System.UInt32"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.UInt32"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
            <summary>写入 <see cref="T:System.Int64"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Int64"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
            <summary>写入 <see cref="T:System.UInt64"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.UInt64"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
            <summary>写入 <see cref="T:System.Single"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Single"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
            <summary>写入 <see cref="T:System.Nullable`1"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Nullable`1"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
            <summary>写入 <see cref="T:System.Double"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Double"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
            <summary>写入 <see cref="T:System.Nullable`1"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Nullable`1"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
            <summary>写入 <see cref="T:System.Boolean"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Boolean"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
            <summary>写入 <see cref="T:System.Int16"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Int16"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
            <summary>写入 <see cref="T:System.UInt16"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.UInt16"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
            <summary>写入 <see cref="T:System.Char"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Char"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
            <summary>写入 <see cref="T:System.Byte"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Byte"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
            <summary>写入 <see cref="T:System.SByte"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.SByte"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
            <summary>写入 <see cref="T:System.Decimal"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Decimal"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
            <summary>写入 <see cref="T:System.DateTime"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.DateTime"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
            <summary>写入 <see cref="T:System.Byte"/>[] 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Byte"/>[] 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
            <summary>写入 <see cref="T:System.DateTimeOffset"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.DateTimeOffset"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)">
            <summary>写入 <see cref="T:System.Guid"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Guid"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
            <summary>写入 <see cref="T:System.TimeSpan"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.TimeSpan"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)">
            <summary>写入 <see cref="T:System.Uri"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Uri"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
            <summary>写出包含指定文本的注释 <code>/*...*/</code>。</summary>
            <param name="text">放置在注释中的文本。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
            <summary>写出给定的空格。</summary>
            <param name="ws">空格字符的字符串。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonToken">
            <summary>指定 JSON 令牌的类型。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.None">
            <summary>如果尚未调用 <see cref="M:Newtonsoft.Json.JsonReader.Read"/> 方法，则由 <see cref="T:Newtonsoft.Json.JsonReader"/> 返回。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartObject">
            <summary>对象开始令牌。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartArray">
            <summary>数组开始令牌。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartConstructor">
            <summary>构造函数开始令牌。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
            <summary>对象属性名称。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Comment">
            <summary>注释。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Raw">
            <summary>原始 JSON。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Integer">
            <summary>整数。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Float">
            <summary>浮动。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.String">
            <summary>字符串。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Boolean">
            <summary>布尔值。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Null">
            <summary>NULL 令牌。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Undefined">
            <summary>未定义的令牌。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndObject">
            <summary>对象结束令牌。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndArray">
            <summary>数组结束令牌。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndConstructor">
            <summary>构造函数结束令牌。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Date">
            <summary>日期。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Bytes">
            <summary>字节数据。</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonValidatingReader">
            <summary>
            <para>代表提供的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> 验证的读取器。</para>
            <note type="caution">JSON 架构验证已移至其自己的包中。有关详细信息，请登录 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。</note>
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
            <summary>设置用于接收架构验证错误的事件处理程序。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Value">
            <summary>获取当前 JSON 令牌的文本值。</summary>
            <value></value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Depth">
            <summary>获取 JSON 文档中当前令牌的深度。</summary>
            <value>JSON 文档中当前令牌的深度。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Path">
            <summary>获取当前 JSON 令牌的路径。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.QuoteChar">
            <summary>获取用于括起字符串值的引号字符。</summary>
            <value></value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.TokenType">
            <summary>获取当前 JSON 令牌的类型。</summary>
            <value></value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.ValueType">
            <summary>获取当前 JSON 令牌的公共语言运行时 (CLR) 类型。</summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.#ctor(Newtonsoft.Json.JsonReader)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonValidatingReader"/> 类的新实例，其会验证给定 <see cref="T:Newtonsoft.Json.JsonReader"/> 返回的内容。</summary>
            <param name="reader">在验证时从其中读取的 <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Schema">
            <summary>获取或设置架构。</summary>
            <value>架构。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Reader">
            <summary>获取用来构建此 <see cref="T:Newtonsoft.Json.JsonValidatingReader"/> 的 <see cref="T:Newtonsoft.Json.JsonReader"/>。</summary>
            <value>在构造函数中指定的 <see cref="T:Newtonsoft.Json.JsonReader"/>。</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsInt32">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.Nullable`1"/>。</summary>
            <returns><see cref="T:System.Nullable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.Byte"/>[]。</summary>
            <returns>如果下一个 JSON 令牌为 NULL，则为 <see cref="T:System.Byte"/>[] 或 NULL 引用。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.Nullable`1"/>。</summary>
            <returns><see cref="T:System.Nullable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDouble">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.Nullable`1"/>。</summary>
            <returns><see cref="T:System.Nullable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBoolean">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.Nullable`1"/>。</summary>
            <returns><see cref="T:System.Nullable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsString">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.String"/>。</summary>
            <returns><see cref="T:System.String"/>。这个方法会在数组的末尾返回 <c>NULL</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTime">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.Nullable`1"/>。</summary>
            <returns><see cref="T:System.Nullable`1"/>。这个方法会在数组的末尾返回 <c>NULL</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
            <summary>从数据流中将下一个 JSON 令牌读取为 <see cref="T:System.Nullable`1"/>。</summary>
            <returns><see cref="T:System.Nullable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.Read">
            <summary>从数据流中读取下一个 JSON 令牌。</summary>
            <returns>如果成功读取下一个令牌，为 <c>true</c>；如果没有更多的令牌可供读取，则为 <c>false</c>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriter">
            <summary>表示编写器，其提供一种快速、非缓存、仅向前的方式来生成 JSON 数据。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.CloseOutput">
            <summary>获取或设置一个值，该值指示底层数据流或 <see cref="T:System.IO.TextReader"/> 是否应该在编写器关闭时关闭。</summary>
            <value>true 为编写器关闭时关闭底层数据流或 <see cref="T:System.IO.TextReader"/>；否则，为 false。默认为 true。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Top">
            <summary>获得顶端。</summary>
            <value>顶端。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
            <summary>获取编写器的状态。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Path">
            <summary>获取编写器的路径。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
            <summary>指示如何格式化 JSON 文本输出。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.DateFormatHandling">
            <summary>获取或设置日期写入 JSON 文本的方式。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.DateTimeZoneHandling">
            <summary>获取或设置写入 JSON 文本时处理 <see cref="T:System.DateTime"/> 时区的方式。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.StringEscapeHandling">
            <summary>获取或设置在编写 JSON 文本时如何转义字符串。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.FloatFormatHandling">
            <summary>获取或设置特殊浮点数（例如 <see cref="F:System.Double.NaN"/>、<see cref="F:System.Double.PositiveInfinity"/> 和 <see cref="F:System.Double.NegativeInfinity"/>）写入 JSON 文本的方式。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.DateFormatString">
            <summary>获取或设置写入 JSON 文本时格式化 <see cref="T:System.DateTime"/> 和 <see cref="T:System.DateTimeOffset"/> 值的方式。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Culture">
            <summary>获取或设置编写 JSON 时使用的区域性。默认为 <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.#ctor">
            <summary>创建 <c>JsonWriter</c> 类的实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Flush">
            <summary>将缓冲区中的任何内容刷新到底层数据流，并刷新底层数据流。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Close">
            <summary>关闭此数据流和底层数据流。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
            <summary>写入 JSON 对象的开头。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
            <summary>写入 JSON 对象的结尾。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
            <summary>写入 JSON 数组的开头。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
            <summary>写入数组的结尾。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
            <summary>使用给定名称写入构造函数的开头。</summary>
            <param name="name">构造函数的名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructor">
            <summary>写入结束构造函数。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>在 JSON 对象上写入名称/值对的属性名称。</summary>
            <param name="name">属性的名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>在 JSON 对象上写入名称/值对的属性名称。</summary>
            <param name="name">属性的名称。</param>
            <param name="escape">指示在将文本写为 JSON 属性名称时是否应对其进行转义的标志。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
            <summary>写入当前 JSON 对象或数组的结尾。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader)">
            <summary>写入当前 <see cref="T:Newtonsoft.Json.JsonReader"/> 令牌及其子项。</summary>
            <param name="reader">从中读取令牌的 <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader,System.Boolean)">
            <summary>写入当前 <see cref="T:Newtonsoft.Json.JsonReader"/> 令牌。</summary>
            <param name="reader">从中读取令牌的 <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="writeChildren">指示是否应写入当前令牌子项的标志。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonToken,System.Object)">
            <summary>写入 <see cref="T:Newtonsoft.Json.JsonToken"/> 令牌及其值。</summary>
            <param name="token">要写入的 <see cref="T:Newtonsoft.Json.JsonToken"/>。</param>
            <param name="value">要写入的值。只有具有关联值的令牌才需要值，例如 <see cref="F:Newtonsoft.Json.JsonToken.PropertyName"/> 的 <see cref="T:System.String"/> 属性名称。可以将 NULL 值传递给没有值的令牌的方法，例如 <see cref="F:Newtonsoft.Json.JsonToken.StartObject"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonToken)">
            <summary>写入 <see cref="T:Newtonsoft.Json.JsonToken"/> 令牌。</summary>
            <param name="token">要写入的 <see cref="T:Newtonsoft.Json.JsonToken"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>写入指定的结束令牌。</summary>
            <param name="token">要写入的结束令牌。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteIndent">
            <summary>写入缩进字符。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
            <summary>写入 JSON 值分隔符。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpace">
            <summary>写入缩进空间。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
            <summary>写入 NULL 值。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
            <summary>写入未定义的值。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
            <summary>在不改变编写器状态的情况下写入原始 JSON。</summary>
            <param name="json">要写入的原始 JSON。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
            <summary>将原始 JSON 写入预期值并更新编写器的状态。</summary>
            <param name="json">要写入的原始 JSON。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
            <summary>写入 <see cref="T:System.String"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.String"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>写入 <see cref="T:System.Int32"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Int32"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>写入 <see cref="T:System.UInt32"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.UInt32"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>写入 <see cref="T:System.Int64"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Int64"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>写入 <see cref="T:System.UInt64"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.UInt64"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
            <summary>写入 <see cref="T:System.Single"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Single"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
            <summary>写入 <see cref="T:System.Double"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Double"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>写入 <see cref="T:System.Boolean"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Boolean"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>写入 <see cref="T:System.Int16"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Int16"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>写入 <see cref="T:System.UInt16"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.UInt16"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
            <summary>写入 <see cref="T:System.Char"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Char"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>写入 <see cref="T:System.Byte"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Byte"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>写入 <see cref="T:System.SByte"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.SByte"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>写入 <see cref="T:System.Decimal"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Decimal"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>写入 <see cref="T:System.DateTime"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.DateTime"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>写入 <see cref="T:System.DateTimeOffset"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.DateTimeOffset"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)">
            <summary>写入 <see cref="T:System.Guid"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Guid"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)">
            <summary>写入 <see cref="T:System.TimeSpan"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.TimeSpan"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
            <summary>写入 <see cref="T:System.Nullable`1"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Nullable`1"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
            <summary>写入 <see cref="T:System.Nullable`1"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Nullable`1"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
            <summary>写入 <see cref="T:System.Nullable`1"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Nullable`1"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
            <summary>写入 <see cref="T:System.Nullable`1"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Nullable`1"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
            <summary>写入 <see cref="T:System.Nullable`1"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Nullable`1"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
            <summary>写入 <see cref="T:System.Nullable`1"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Nullable`1"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
            <summary>写入 <see cref="T:System.Nullable`1"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Nullable`1"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
            <summary>写入 <see cref="T:System.Nullable`1"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Nullable`1"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
            <summary>写入 <see cref="T:System.Nullable`1"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Nullable`1"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
            <summary>写入 <see cref="T:System.Nullable`1"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Nullable`1"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
            <summary>写入 <see cref="T:System.Nullable`1"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Nullable`1"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
            <summary>写入 <see cref="T:System.Nullable`1"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Nullable`1"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
            <summary>写入 <see cref="T:System.Nullable`1"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Nullable`1"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
            <summary>写入 <see cref="T:System.Nullable`1"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Nullable`1"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
            <summary>写入 <see cref="T:System.Nullable`1"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Nullable`1"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
            <summary>写入 <see cref="T:System.Nullable`1"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Nullable`1"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
            <summary>写入 <see cref="T:System.Nullable`1"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Nullable`1"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
            <summary>写入 <see cref="T:System.Byte"/>[] 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Byte"/>[] 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)">
            <summary>写入 <see cref="T:System.Uri"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Uri"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
            <summary>写入 <see cref="T:System.Object"/> 值。如果无法将值写为单个 JSON 令牌，则会引发错误。</summary>
            <param name="value">要写入的 <see cref="T:System.Object"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
            <summary>写出包含指定文本的注释 <code>/*...*/</code>。</summary>
            <param name="text">放置在注释中的文本。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>写出给定的空格。</summary>
            <param name="ws">空格字符的字符串。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Dispose(System.Boolean)">
            <summary>发布非托管和 - 可选 - 托管资源</summary>
            <param name="disposing"><c>true</c> 为发布托管和非托管资源；<c>false</c> 为仅发布非托管资源。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.SetWriteState(Newtonsoft.Json.JsonToken,System.Object)">
            <summary>设置 JsonWriter 的状态，</summary>
            <param name="token">正在写入的 JsonToken。</param>
            <param name="value">正在写入的值。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriterException">
            <summary>读取 JSON 文本发生错误时引发的异常。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriterException.Path">
            <summary>获取发生错误的 JSON 的路径。</summary>
            <value>发生错误的 JSON 路径。</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonWriterException"/> 类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonWriterException"/> 类的新实例，其具有指定的错误消息。</summary>
            <param name="message">解释异常原因的错误消息。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.JsonWriterException"/> 类的新实例，其具有指定的错误消息以及对作为此异常原因的内部异常的引用。</summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">如果未指定内部异常，则导致当前异常的异常或 NULL 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化<see cref="T:Newtonsoft.Json.JsonWriterException"/>类的新实例。</summary>
            <param name="info">包含有关引发异常的串行化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">包含有关源或目标的上下文信息的 <see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> 参数为 NULL。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">类名为 NULL 或 <see cref="P:System.Exception.HResult"/> 为零 (0)。</exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.CommentHandling">
            <summary>指定加载 JSON 时如何处理 JSON 注释。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.CommentHandling.Ignore">
            <summary>忽略注释。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.CommentHandling.Load">
            <summary>将注释加载为类型为 <see cref="F:Newtonsoft.Json.Linq.JTokenType.Comment"/> 的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.LineInfoHandling">
            <summary>指定加载 JSON 时如何处理行信息。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.LineInfoHandling.Ignore">
            <summary>忽略行信息。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.LineInfoHandling.Load">
            <summary>加载行信息。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Extensions">
            <summary>包含 LINQ 到 JSON 扩展方法。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>返回包含源集合中每个令牌的祖先的令牌集合。</summary>
            <typeparam name="T">源中对象的类型，约束为 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</typeparam>
            <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>包含源集合中每个令牌的祖先的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AncestorsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>返回包含源集合中每个令牌，以及源集合中每个令牌的祖先的令牌集合。</summary>
            <typeparam name="T">源中对象的类型，约束为 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</typeparam>
            <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>包含源集合中每个令牌，以及源集合中每个令牌的祖先的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>返回包含源集合中每个令牌的后代的令牌集合。</summary>
            <typeparam name="T">源中对象的类型，约束为 <see cref="T:Newtonsoft.Json.Linq.JContainer"/>。</typeparam>
            <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>包含源集合中每个令牌的后代的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.DescendantsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>返回包含源集合中每个令牌，以及源集合中每个令牌的后代的令牌集合。</summary>
            <typeparam name="T">源中对象的类型，约束为 <see cref="T:Newtonsoft.Json.Linq.JContainer"/>。</typeparam>
            <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>包含源集合中每个令牌，以及源集合中每个令牌的后代的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
            <summary>返回源集合中每个对象的子属性的集合。</summary>
            <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JObject"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>包含源集合中每个对象的属性的 <see cref="T:Newtonsoft.Json.Linq.JProperty"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>返回具有给定密钥的源集合中每个对象的子值的集合。</summary>
            <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <param name="key">令牌密钥。</param>
            <returns>包含具有给定密钥的源集合中每个令牌的值的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>返回源集合中每个对象的子值的集合。</summary>
            <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>包含源集合中每个令牌的值的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>返回具有给定密钥的源集合中每个对象的已转换子值的集合。</summary>
            <typeparam name="U">要将值转换为的类型。</typeparam>
            <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <param name="key">令牌密钥。</param>
            <returns>包含具有给定密钥的源集合中每个令牌的转换值的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>返回源集合中每个对象的已转换子值的集合。</summary>
            <typeparam name="U">要将值转换为的类型。</typeparam>
            <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>包含源集合中每个令牌的已转换值的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>转换值。</summary>
            <typeparam name="U">要将值转换为的类型。</typeparam>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JToken"/> 转换为 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>转换后的值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>转换值。</summary>
            <typeparam name="T">源集合类型。</typeparam>
            <typeparam name="U">要将值转换为的类型。</typeparam>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JToken"/> 转换为 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>转换后的值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>返回源集合中每个数组的子令牌的集合。</summary>
            <typeparam name="T">源集合类型。</typeparam>
            <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>包含源集合中每个令牌的值的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>返回源集合中每个数组的已转换子令牌的集合。</summary>
            <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <typeparam name="U">要将值转换为的类型。</typeparam>
            <typeparam name="T">源集合类型。</typeparam>
            <returns>包含源集合中每个令牌的已转换值的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>返回键入为 <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/> 的输入。</summary>
            <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>键入为 <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/> 的输入。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>返回键入为 <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/> 的输入。</summary>
            <typeparam name="T">源集合类型。</typeparam>
            <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>键入为 <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/> 的输入。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.IJEnumerable`1">
            <summary>表示 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 对象的集合。</summary>
            <typeparam name="T">令牌的类型</typeparam>
        </member>
        <member name="P:Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
            <summary>获取具有特定密钥的 <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>。</summary>
            <value></value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JArray">
            <summary>表示 JSON 数组。</summary>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" /></example>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.ChildrenTokens">
            <summary>获取容器的子令牌。</summary>
            <value>容器的子令牌。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Type">
            <summary>获取此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的节点类型。</summary>
            <value>类型。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JArray"/> 类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(Newtonsoft.Json.Linq.JArray)">
            <summary>从其他 <see cref="T:Newtonsoft.Json.Linq.JArray"/> 对象初始化 <see cref="T:Newtonsoft.Json.Linq.JArray"/> 类的新实例。</summary>
            <param name="other">要从中复制的 <see cref="T:Newtonsoft.Json.Linq.JArray"/> 对象。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JArray"/> 类的新实例，其具有指定内容。</summary>
            <param name="content">数组的内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JArray"/> 类的新实例，其具有指定内容。</summary>
            <param name="content">数组的内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader)">
            <summary>从 <see cref="T:Newtonsoft.Json.JsonReader"/> 加载 <see cref="T:Newtonsoft.Json.Linq.JArray"/>。</summary>
            <param name="reader">将从中读取以获得 <see cref="T:Newtonsoft.Json.Linq.JArray"/> 内容的 <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <returns>包含从指定的 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取的 JSON 的 <see cref="T:Newtonsoft.Json.Linq.JArray"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>从 <see cref="T:Newtonsoft.Json.JsonReader"/> 加载 <see cref="T:Newtonsoft.Json.Linq.JArray"/>。</summary>
            <param name="reader">将从中读取以获得 <see cref="T:Newtonsoft.Json.Linq.JArray"/> 内容的 <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="settings">用于加载 JSON 的 <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>。如果为 NULL，则将使用默认加载设置。</param>
            <returns>包含从指定的 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取的 JSON 的 <see cref="T:Newtonsoft.Json.Linq.JArray"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String)">
            <summary>从包含 JSON 的字符串加载 <see cref="T:Newtonsoft.Json.Linq.JArray"/>。</summary>
            <param name="json">包含 JSON 的 <see cref="T:System.String"/>。</param>
            <returns>从包含 JSON 的字符串填充 <see cref="T:Newtonsoft.Json.Linq.JArray"/>。</returns>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" /></example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>从包含 JSON 的字符串加载 <see cref="T:Newtonsoft.Json.Linq.JArray"/>。</summary>
            <param name="json">包含 JSON 的 <see cref="T:System.String"/>。</param>
            <param name="settings">用于加载 JSON 的 <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>。如果为 NULL，则将使用默认加载设置。</param>
            <returns>从包含 JSON 的字符串填充 <see cref="T:Newtonsoft.Json.Linq.JArray"/>。</returns>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" /></example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
            <summary>从对象创建 <see cref="T:Newtonsoft.Json.Linq.JArray"/>。</summary>
            <param name="o">将用于创建 <see cref="T:Newtonsoft.Json.Linq.JArray"/> 的对象。</param>
            <returns>具有指定对象的值的 <see cref="T:Newtonsoft.Json.Linq.JArray"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>从对象创建 <see cref="T:Newtonsoft.Json.Linq.JArray"/>。</summary>
            <param name="o">将用于创建 <see cref="T:Newtonsoft.Json.Linq.JArray"/> 的对象。</param>
            <param name="jsonSerializer">将用于读取对象的 <see cref="T:Newtonsoft.Json.JsonSerializer"/>。</param>
            <returns>具有指定对象的值的 <see cref="T:Newtonsoft.Json.Linq.JArray"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>将此令牌写入 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</summary>
            <param name="writer">此方法将写入的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="converters">写入令牌时将使用的 <see cref="T:Newtonsoft.Json.JsonConverter"/> 的集合。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Object)">
            <summary>获取具有特定密钥的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</summary>
            <value>具有特定密钥的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
            <summary>获取或设置指定索引处的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)">
            <summary>确定 <see cref="T:System.Collections.Generic.IList`1"/> 中特定项的索引。</summary>
            <param name="item">要在 <see cref="T:System.Collections.Generic.IList`1"/> 中定位的对象。</param>
            <returns>如果在列表中找到，则为 <paramref name="item"/> 的索引；否则，为 -1。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Newtonsoft.Json.Linq.JToken)">
            <summary>将项目插入到指定索引处的 <see cref="T:System.Collections.Generic.IList`1"/>。</summary>
            <param name="index">应该插入 <paramref name="item"/> 的以零为基准的索引。</param>
            <param name="item">要插入 <see cref="T:System.Collections.Generic.IList`1"/> 的对象。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> <see cref="T:System.Collections.Generic.IList`1"/> 中不是一个有效的索引。</exception>
            <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.IList`1"/> 为只读。</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
            <summary>删除指定索引处的 <see cref="T:System.Collections.Generic.IList`1"/> 项目。</summary>
            <param name="index">要删除项目的以零为基础的索引。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> <see cref="T:System.Collections.Generic.IList`1"/> 中不是一个有效的索引。</exception>
            <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.IList`1"/> 为只读。</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.GetEnumerator">
            <summary>返回循环访问集合的枚举器。</summary>
            <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)">
            <summary>将项目添加到 <see cref="T:System.Collections.Generic.ICollection`1"/>。</summary>
            <param name="item">要添加到 <see cref="T:System.Collections.Generic.ICollection`1"/> 的对象。</param>
            <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.ICollection`1"/> 为只读。</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Clear">
            <summary>从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中删除所有项目。</summary>
            <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.ICollection`1"/> 为只读。</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)">
            <summary>确定 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否包含特定值。</summary>
            <param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1"/> 中定位的对象。</param>
            <returns>如果在 <see cref="T:System.Collections.Generic.ICollection`1"/> 中发现 <paramref name="item"/>，为 true；否则，为 false。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.CopyTo(Newtonsoft.Json.Linq.JToken[],System.Int32)">
            <summary>复制到。</summary>
            <param name="array">数组。</param>
            <param name="arrayIndex">数组的索引。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.IsReadOnly">
            <summary>获取指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读的值。</summary>
            <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读，则为 true；否则，为 false。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)">
            <summary>从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中删除第一次出现的特定对象。</summary>
            <param name="item">要 <see cref="T:System.Collections.Generic.ICollection`1"/> 中删除的对象。</param>
            <returns>如果已从 <see cref="T:System.Collections.Generic.ICollection`1"/> 成功删除 <paramref name="item"/>，为 true；否则，为 false。如果在原始 <see cref="T:System.Collections.Generic.ICollection`1"/> 中没找到 <paramref name="item"/>，此方法也会返回 false。</returns>
            <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.ICollection`1"/> 为只读。</exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JConstructor">
            <summary>表示 JSON 构造函数。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.ChildrenTokens">
            <summary>获取容器的子令牌。</summary>
            <value>容器的子令牌。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Name">
            <summary>获取或设置此构造函数的名称。</summary>
            <value>构造函数名称。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Type">
            <summary>获取此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的节点类型。</summary>
            <value>类型。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> 类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(Newtonsoft.Json.Linq.JConstructor)">
            <summary>从其他 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> 对象初始化 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> 类的新实例。</summary>
            <param name="other">要从中复制的 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> 对象。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> 类的新实例，其具有指定名称和内容。</summary>
            <param name="name">构造函数名称。</param>
            <param name="content">构造函数的内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> 类的新实例，其具有指定名称和内容。</summary>
            <param name="name">构造函数名称。</param>
            <param name="content">构造函数的内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> 类的新实例，其具有指定名称。</summary>
            <param name="name">构造函数名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>将此令牌写入 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</summary>
            <param name="writer">此方法将写入的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="converters">写入令牌时将使用的 <see cref="T:Newtonsoft.Json.JsonConverter"/> 的集合。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
            <summary>获取具有特定密钥的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</summary>
            <value>具有特定密钥的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader)">
            <summary>从 <see cref="T:Newtonsoft.Json.JsonReader"/> 加载 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/>。</summary>
            <param name="reader">将从中读取以获得 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> 内容的 <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <returns>包含从指定的 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取的 JSON 的 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>从 <see cref="T:Newtonsoft.Json.JsonReader"/> 加载 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/>。</summary>
            <param name="reader">将从中读取以获得 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> 内容的 <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="settings">用于加载 JSON 的 <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>。如果为 NULL，则将使用默认加载设置。</param>
            <returns>包含从指定的 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取的 JSON 的 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JContainer">
            <summary>表示可以包含其他令牌的令牌。</summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.ListChanged">
            <summary>列表更改或列表中的项目更改时发生。</summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.AddingNew">
            <summary>在将项目添加到集合之前发生。</summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged">
            <summary>在集合的项目列表更改或集合重置时发生。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.ChildrenTokens">
            <summary>获取容器的子令牌。</summary>
            <value>容器的子令牌。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
            <summary>提高了 <see cref="E:Newtonsoft.Json.Linq.JContainer.AddingNew"/> 事件。</summary>
            <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.AddingNewEventArgs"/> 实例。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>提高了 <see cref="E:Newtonsoft.Json.Linq.JContainer.ListChanged"/> 事件。</summary>
            <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs"/> 实例。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>提高了 <see cref="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged"/> 事件。</summary>
            <param name="e">包含事件数据的 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> 实例。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.HasValues">
            <summary>获取一个值，该值指示此令牌是否具有子令牌。</summary>
            <value>如果此令牌具有子值，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.First">
            <summary>获取此令牌的第一个子令牌。</summary>
            <value>包含 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的第一个子令牌的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.Last">
            <summary>获取此令牌的最后一个子令牌。</summary>
            <value>包含 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的最后一个子令牌的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Children">
            <summary>以文档顺序返回此令牌的子令牌集合。</summary>
            <returns>以文档顺序包含此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的子令牌的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Values``1">
            <summary>以文档顺序返回此令牌的子值集合。</summary>
            <typeparam name="T">要将值转换为的类型。</typeparam>
            <returns>以文档顺序包含此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的子值的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Descendants">
            <summary>以文档顺序返回此令牌的后代令牌的集合。</summary>
            <returns>包含 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的后代令牌的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.DescendantsAndSelf">
            <summary>以文档顺序返回包含此令牌以及此令牌的所有后代令牌的集合。</summary>
            <returns>包含此令牌以及 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的所有后代令牌的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
            <summary>将指定内容添加为此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的子项。</summary>
            <param name="content">要添加的内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
            <summary>将指定内容添加为此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的第一个子项。</summary>
            <param name="content">要添加的内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.CreateWriter">
            <summary>创建可用于将令牌添加到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</summary>
            <returns>准备好将内容写入其中的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
            <summary>用指定内容替换此令牌的子节点。</summary>
            <param name="content">内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.RemoveAll">
            <summary>从此令牌中删除子节点。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Merge(System.Object)">
            <summary>将指定内容合并到此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 中。</summary>
            <param name="content">要合并的内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Merge(System.Object,Newtonsoft.Json.Linq.JsonMergeSettings)">
            <summary>使用 <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings"/> 将指定内容合并到此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 中。</summary>
            <param name="content">要合并的内容。</param>
            <param name="settings">用于合并内容的 <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings"/>。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.Count">
            <summary>获取子 JSON 令牌的计数。</summary>
            <value>子 JSON 令牌的计数。</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JEnumerable`1">
            <summary>表示 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 对象的集合。</summary>
            <typeparam name="T">令牌的类型</typeparam>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JEnumerable`1.Empty">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> 对象的空集合。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/> 结构的新实例。</summary>
            <param name="enumerable">可枚举项。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
            <summary>返回循环访问集合的枚举器。</summary>
            <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>返回循环访问集合的枚举器。</summary>
            <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
            <summary>获取具有特定密钥的 <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>。</summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(Newtonsoft.Json.Linq.JEnumerable{`0})">
            <summary>确定指定的 <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/> 是否等于此实例。</summary>
            <param name="other">与此实例进行比较的 <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/>。</param>
            <returns>如果指定的 <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/> 等于此实例，为 <c>true</c>；否则，为 <c>false</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
            <summary>确定指定的 <see cref="T:System.Object"/> 是否等于此实例。</summary>
            <param name="obj">与此实例进行比较的 <see cref="T:System.Object"/>。</param>
            <returns>如果指定的 <see cref="T:System.Object"/> 等于此实例，为 <c>true</c>；否则，为 <c>false</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
            <summary>返回此实例的哈希代码。</summary>
            <returns>此实例的哈希代码，适用于散列算法和哈希表等数据结构。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JObject">
            <summary>表示 JSON 对象。</summary>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" /></example>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.ChildrenTokens">
            <summary>获取容器的子令牌。</summary>
            <value>容器的子令牌。</value>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanged">
            <summary>属性值更改时发生。</summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanging">
            <summary>在属性值更改时发生。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JObject"/> 类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>从其他 <see cref="T:Newtonsoft.Json.Linq.JObject"/> 对象初始化 <see cref="T:Newtonsoft.Json.Linq.JObject"/> 类的新实例。</summary>
            <param name="other">要从中复制的 <see cref="T:Newtonsoft.Json.Linq.JObject"/> 对象。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JObject"/> 类的新实例，其具有指定内容。</summary>
            <param name="content">对象内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JObject"/> 类的新实例，其具有指定内容。</summary>
            <param name="content">对象内容。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Type">
            <summary>获取此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的节点类型。</summary>
            <value>类型。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Properties">
            <summary>获取此对象属性的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</summary>
            <returns>此对象属性的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Property(System.String)">
            <summary>获取指定名称的 <see cref="T:Newtonsoft.Json.Linq.JProperty"/>。</summary>
            <param name="name">属性名称。</param>
            <returns>具有指定名称或 NULL 的 <see cref="T:Newtonsoft.Json.Linq.JProperty"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.PropertyValues">
            <summary>获取此对象属性值的 <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/>。</summary>
            <returns>此对象属性值的 <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/>。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.Object)">
            <summary>获取具有特定密钥的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</summary>
            <value>具有特定密钥的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.String)">
            <summary>获取或设置具有指定属性名称的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)">
            <summary>从 <see cref="T:Newtonsoft.Json.JsonReader"/> 加载 <see cref="T:Newtonsoft.Json.Linq.JObject"/>。</summary>
            <param name="reader">将从中读取以获得 <see cref="T:Newtonsoft.Json.Linq.JObject"/> 内容的 <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <returns>包含从指定的 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取的 JSON 的 <see cref="T:Newtonsoft.Json.Linq.JObject"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>从 <see cref="T:Newtonsoft.Json.JsonReader"/> 加载 <see cref="T:Newtonsoft.Json.Linq.JObject"/>。</summary>
            <param name="reader">将从中读取以获得 <see cref="T:Newtonsoft.Json.Linq.JObject"/> 内容的 <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="settings">用于加载 JSON 的 <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>。如果为 NULL，则将使用默认加载设置。</param>
            <returns>包含从指定的 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取的 JSON 的 <see cref="T:Newtonsoft.Json.Linq.JObject"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String)">
            <summary>从包含 JSON 的字符串加载 <see cref="T:Newtonsoft.Json.Linq.JObject"/>。</summary>
            <param name="json">包含 JSON 的 <see cref="T:System.String"/>。</param>
            <returns>从包含 JSON 的字符串填充 <see cref="T:Newtonsoft.Json.Linq.JObject"/>。</returns>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" /></example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>从包含 JSON 的字符串加载 <see cref="T:Newtonsoft.Json.Linq.JObject"/>。</summary>
            <param name="json">包含 JSON 的 <see cref="T:System.String"/>。</param>
            <param name="settings">用于加载 JSON 的 <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>。如果为 NULL，则将使用默认加载设置。</param>
            <returns>从包含 JSON 的字符串填充 <see cref="T:Newtonsoft.Json.Linq.JObject"/>。</returns>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" /></example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
            <summary>从对象创建 <see cref="T:Newtonsoft.Json.Linq.JObject"/>。</summary>
            <param name="o">将用于创建 <see cref="T:Newtonsoft.Json.Linq.JObject"/> 的对象。</param>
            <returns>具有指定对象的值的 <see cref="T:Newtonsoft.Json.Linq.JObject"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>从对象创建 <see cref="T:Newtonsoft.Json.Linq.JObject"/>。</summary>
            <param name="o">将用于创建 <see cref="T:Newtonsoft.Json.Linq.JObject"/> 的对象。</param>
            <param name="jsonSerializer">将用于读取对象的 <see cref="T:Newtonsoft.Json.JsonSerializer"/>。</param>
            <returns>具有指定对象的值的 <see cref="T:Newtonsoft.Json.Linq.JObject"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>将此令牌写入 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</summary>
            <param name="writer">此方法将写入的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="converters">写入令牌时将使用的 <see cref="T:Newtonsoft.Json.JsonConverter"/> 的集合。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String)">
            <summary>获取具有指定属性名称的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</summary>
            <param name="propertyName">属性名称。</param>
            <returns>具有指定属性名称的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
            <summary>获取具有指定属性名称的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。首先将搜索确切的属性名称，如果找不到匹配的属性，则 <see cref="T:System.StringComparison"/> 将用于匹配属性。</summary>
            <param name="propertyName">属性名称。</param>
            <param name="comparison">枚举值之一，指定如何比较字符串。</param>
            <returns>具有指定属性名称的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,Newtonsoft.Json.Linq.JToken@)">
            <summary>尝试获取具有指定属性名称的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。首先将搜索确切的属性名称，如果找不到匹配的属性，则 <see cref="T:System.StringComparison"/> 将用于匹配属性。</summary>
            <param name="propertyName">属性名称。</param>
            <param name="value">值。</param>
            <param name="comparison">枚举值之一，指定如何比较字符串。</param>
            <returns>如果成功检索到某个值，为 <c>true</c>；否则，为 <c>false</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Add(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>添加指定的属性名称。</summary>
            <param name="propertyName">属性名称。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Remove(System.String)">
            <summary>删除具有指定名称的属性。</summary>
            <param name="propertyName">属性名称。</param>
            <returns>如果项目被成功删除，为 <c>true</c>；否则，为 <c>false</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Newtonsoft.Json.Linq.JToken@)">
            <summary>尝试获得值。</summary>
            <param name="propertyName">属性名称。</param>
            <param name="value">值。</param>
            <returns>如果成功检索到某个值，为 <c>true</c>；否则，为 <c>false</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetEnumerator">
            <summary>返回循环访问集合的枚举器。</summary>
            <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
            <summary>提高具有提供的参数的 <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanged"/> 事件。</summary>
            <param name="propertyName">属性名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanging(System.String)">
            <summary>提高具有提供的参数的 <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanging"/> 事件。</summary>
            <param name="propertyName">属性名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
            <summary>返回此组件实例的属性。</summary>
            <returns>表示此组件实例的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
            <summary>使用属性数组作为过滤器返回此组件实例的属性。</summary>
            <param name="attributes">用作过滤器的类型 <see cref="T:System.Attribute"/> 的数组。</param>
            <returns>表示此组件实例过滤后的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
            <summary>返回此组件实例的自定义属性的集合。</summary>
            <returns>包含此对象的属性的 <see cref="T:System.ComponentModel.AttributeCollection"/> 。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
            <summary>返回此组件实例的类名。</summary>
            <returns>对象的类名，如果类没有名称，则为 NULL。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
            <summary>返回此组件实例的名称。</summary>
            <returns>对象的名称，如果对象没有名称，则为 NULL。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
            <summary>返回此组件实例的类型转换器。</summary>
            <returns><see cref="T:System.ComponentModel.TypeConverter"/>，这是此对象的转换器，或者如果此对象没有 <see cref="T:System.ComponentModel.TypeConverter"/>，则为 NULL。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
            <summary>返回此组件实例的默认事件。</summary>
            <returns>表示此对象的默认事件的 <see cref="T:System.ComponentModel.EventDescriptor"/>，如果此对象没有事件，则为 NULL。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
            <summary>返回此组件实例的默认属性。</summary>
            <returns>表示此对象的默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor"/>，如果此对象没有属性，则为 NULL。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
            <summary>返回此组件实例的指定类型的编辑器。</summary>
            <param name="editorBaseType">表示此对象的编辑器的 <see cref="T:System.Type"/>。</param>
            <returns>指定类型的 <see cref="T:System.Object"/>，其为此对象的编辑器，或者如果找不到编辑器，则为 NULL。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
            <summary>使用指定属性数组作为过滤器返回此组件实例的事件。</summary>
            <param name="attributes">用作过滤器的类型 <see cref="T:System.Attribute"/> 的数组。</param>
            <returns>表示此组件实例过滤后的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
            <summary>返回此组件实例的事件。</summary>
            <returns>表示此组件实例的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>返回包含指定属性描述符描述的属性的对象。</summary>
            <param name="pd">表示要找到其所有者的属性的 <see cref="T:System.ComponentModel.PropertyDescriptor"/>。</param>
            <returns>表示指定属性的所有者的 <see cref="T:System.Object"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>返回负责对此对象执行绑定操作的 <see cref="T:System.Dynamic.DynamicMetaObject"/>。</summary>
            <param name="parameter">运行时值的表达式树表示。</param>
            <returns>要绑定此对象的 <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JsonMergeSettings">
            <summary>指定合并 JSON 时使用的设置。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonMergeSettings.MergeArrayHandling">
            <summary>获取或设置合并 JSON 数组时使用的方法。</summary>
            <value>合并 JSON 数组时使用的方法。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonMergeSettings.MergeNullValueHandling">
            <summary>获取或设置合并 NULL 值属性的方式。</summary>
            <value>合并 NULL 值属性的方式。</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JProperty">
            <summary>表示 JSON 属性。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.ChildrenTokens">
            <summary>获取容器的子令牌。</summary>
            <value>容器的子令牌。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Name">
            <summary>获取属性名称。</summary>
            <value>属性名称。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Value">
            <summary>获取或设置属性值。</summary>
            <value>属性值。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(Newtonsoft.Json.Linq.JProperty)">
            <summary>从其他 <see cref="T:Newtonsoft.Json.Linq.JProperty"/> 对象初始化 <see cref="T:Newtonsoft.Json.Linq.JProperty"/> 类的新实例。</summary>
            <param name="other">要从中复制的 <see cref="T:Newtonsoft.Json.Linq.JProperty"/> 对象。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Type">
            <summary>获取此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的节点类型。</summary>
            <value>类型。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JProperty"/> 类的新实例。</summary>
            <param name="name">属性名称。</param>
            <param name="content">属性内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
            <summary>初始化<see cref="T:Newtonsoft.Json.Linq.JProperty"/>类的新实例。</summary>
            <param name="name">属性名称。</param>
            <param name="content">属性内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>将此令牌写入 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</summary>
            <param name="writer">此方法将写入的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="converters">写入令牌时将使用的 <see cref="T:Newtonsoft.Json.JsonConverter"/> 的集合。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader)">
            <summary>从 <see cref="T:Newtonsoft.Json.JsonReader"/> 加载 <see cref="T:Newtonsoft.Json.Linq.JProperty"/>。</summary>
            <param name="reader">将从中读取以获得 <see cref="T:Newtonsoft.Json.Linq.JProperty"/> 内容的 <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <returns>包含从指定的 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取的 JSON 的 <see cref="T:Newtonsoft.Json.Linq.JProperty"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>从 <see cref="T:Newtonsoft.Json.JsonReader"/> 加载 <see cref="T:Newtonsoft.Json.Linq.JProperty"/>。</summary>
            <param name="reader">将从中读取以获得 <see cref="T:Newtonsoft.Json.Linq.JProperty"/> 内容的 <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="settings">用于加载 JSON 的 <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>。如果为 NULL，则将使用默认加载设置。</param>
            <returns>包含从指定的 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取的 JSON 的 <see cref="T:Newtonsoft.Json.Linq.JProperty"/>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JPropertyDescriptor">
            <summary>代表 <see cref="T:Newtonsoft.Json.Linq.JProperty"/> 的视图。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.#ctor(System.String)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JPropertyDescriptor"/> 类的新实例。</summary>
            <param name="name">名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
            <summary>在派生类中重写时，返回重置对象是否更改其值。</summary>
            <returns>如果重置组件会改变其值，为 <c>true</c>；否则，为 <c>false</c>。</returns>
            <param name="component">用于测试重置功能的组件。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
            <summary>在派生类中重写时，获取组件上属性的当前值。</summary>
            <returns>给定组件的属性值。</returns>
            <param name="component">具有要为其检索值的属性的组件。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
            <summary>在派生类中重写时，将此组件属性的值重置为默认值。</summary>
            <param name="component">具有要重置为默认值的属性值的组件。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>在派生类中重写时，将组件的值设置为不同的值。</summary>
            <param name="component">具有要设置的属性值的组件。</param><param name="value">新值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>在派生类中重写时，确定一个值，该值指示是否需要保留此属性的值。</summary>
            <returns>如果属性应保存，为 <c>true</c>；否则，为 <c>false</c>。</returns>
            <param name="component">具有要检查永久性的属性的组件。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.ComponentType">
            <summary>在派生类中重写时，获取此属性绑定到的组件的类型。</summary>
            <returns>表示此属性绑定的组件类型的 <see cref="T:System.Type"/>。调用 <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/> 或 <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)"/> 方法时，指定的对象可能是此类型的实例。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.IsReadOnly">
            <summary>在派生类中重写时，获取一个值，该值指示此属性是否为只读。</summary>
            <returns>如果属性为只读，为 <c>true</c>；否则，为 <c>false</c>。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.PropertyType">
            <summary>在派生类中重写时，获取属性的类型。</summary>
            <returns>表示属性类型的 <see cref="T:System.Type"/>。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.NameHashCode">
            <summary>获取成员名称的哈希码。</summary>
            <value></value>
            <returns>成员名称的哈希码。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JRaw">
            <summary>表示原始 JSON 字符串。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(Newtonsoft.Json.Linq.JRaw)">
            <summary>从其他 <see cref="T:Newtonsoft.Json.Linq.JRaw"/> 对象初始化 <see cref="T:Newtonsoft.Json.Linq.JRaw"/> 类的新实例。</summary>
            <param name="other">要从中复制的 <see cref="T:Newtonsoft.Json.Linq.JRaw"/> 对象。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JRaw"/> 类的新实例。</summary>
            <param name="rawJson">原始 json。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.Create(Newtonsoft.Json.JsonReader)">
            <summary>创建 <see cref="T:Newtonsoft.Json.Linq.JRaw"/> 的实例，其具有读取器当前令牌的内容。</summary>
            <param name="reader">读取器。</param>
            <returns><see cref="T:Newtonsoft.Json.Linq.JRaw"/> 的实例，其具有读取器当前令牌的内容。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JToken">
            <summary>表示抽象 JSON 令牌。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.EqualityComparer">
            <summary>获取一个比较器，可以比较值相等性的两个令牌。</summary>
            <value>可以比较值相等性的两个节点的 <see cref="T:Newtonsoft.Json.Linq.JTokenEqualityComparer"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Parent">
            <summary>获取或设置父级。</summary>
            <value>父级。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Root">
            <summary>获取此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的根 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</summary>
            <value>此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的根 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Type">
            <summary>获取此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的节点类型。</summary>
            <value>类型。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.HasValues">
            <summary>获取一个值，该值指示此令牌是否具有子令牌。</summary>
            <value>如果此令牌具有子值，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>比较两个令牌的值，包括所有后代令牌的值。</summary>
            <param name="t1">要比较的第一个 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="t2">要比较的第二个 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <returns>如果令牌相等，为 <c>true</c>，否则，为 <c>false</c>。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Next">
            <summary>获取此节点的下一个兄弟令牌。</summary>
            <value>包含下一个兄弟令牌的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Previous">
            <summary>获取此节点之前的兄弟令牌。</summary>
            <value>包含之前兄弟令牌的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Path">
            <summary>获取 JSON 令牌的路径。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
            <summary>在此令牌后立即添加指定的内容。</summary>
            <param name="content">包含要在此令牌之后添加的简单内容或内容对象集合的内容对象。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
            <summary>在此令牌前立即添加指定的内容。</summary>
            <param name="content">包含要在此令牌之前添加的简单内容或内容对象集合的内容对象。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Ancestors">
            <summary>返回此令牌的祖先令牌集合。</summary>
            <returns>此令牌的祖先令牌集合。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AncestorsAndSelf">
            <summary>返回包含此令牌以及此令牌祖先的令牌集合。</summary>
            <returns>包含此令牌以及此令牌祖先的令牌集合。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AfterSelf">
            <summary>按文档顺序返回此令牌之后的兄弟令牌的集合。</summary>
            <returns>此令牌之后的兄弟令牌集合（按文档顺序）。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.BeforeSelf">
            <summary>按文档顺序返回此令牌之前的兄弟令牌的集合。</summary>
            <returns>此令牌之前的兄弟令牌的集合（按文档顺序）。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Item(System.Object)">
            <summary>获取具有特定密钥的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</summary>
            <value>具有特定密钥的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
            <summary>获取 <see cref="T:Newtonsoft.Json.Linq.JToken"/>，其指定的密钥已转换为指定的类型。</summary>
            <typeparam name="T">要将令牌转换为的类型。</typeparam>
            <param name="key">令牌密钥。</param>
            <returns>转换后的令牌值。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.First">
            <summary>获取此令牌的第一个子令牌。</summary>
            <value>包含 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的第一个子令牌的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Last">
            <summary>获取此令牌的最后一个子令牌。</summary>
            <value>包含 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的最后一个子令牌的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Children">
            <summary>以文档顺序返回此令牌的子令牌集合。</summary>
            <returns>以文档顺序包含此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的子令牌的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Children``1">
            <summary>以文档顺序返回此令牌按指定类型过滤之后的子令牌集合。</summary>
            <typeparam name="T">用于过滤子令牌的类型。</typeparam>
            <returns>以文档顺序包含此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的子令牌的 <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Values``1">
            <summary>以文档顺序返回此令牌的子值集合。</summary>
            <typeparam name="T">要将值转换为的类型。</typeparam>
            <returns>以文档顺序包含此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的子值的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Remove">
            <summary>从其父级中删除此令牌。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)">
            <summary>用指定令牌替换此令牌。</summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>将此令牌写入 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</summary>
            <param name="writer">此方法将写入的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="converters">写入令牌时将使用的 <see cref="T:Newtonsoft.Json.JsonConverter"/> 的集合。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToString">
            <summary>返回此令牌的缩进 JSON。</summary>
            <returns>此令牌的缩进 JSON。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
            <summary>使用给定的格式和转换器返回此令牌的 JSON。</summary>
            <param name="formatting">指示输出的格式。</param>
            <param name="converters">写入令牌时将使用的 <see cref="T:Newtonsoft.Json.JsonConverter"/> 的集合。</param>
            <returns>使用给定格式和转换器的此令牌的 JSON。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Boolean">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Boolean"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.DateTimeOffset"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Nullable`1"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int64">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Int64"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Nullable`1"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Nullable`1"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Nullable`1"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Nullable`1"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Nullable`1"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int32">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Int32"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int16">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Int16"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt16">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.UInt16"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Char">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Char"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Byte"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.SByte">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.SByte"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Nullable`1"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Nullable`1"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Nullable`1"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Nullable`1"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.SByte}">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Nullable`1"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTime">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.DateTime"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Nullable`1"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Nullable`1"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Decimal">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Decimal"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Nullable`1"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Nullable`1"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Double">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Double"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Single">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Single"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.String">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.String"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt32">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.UInt32"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt64">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.UInt64"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte[]">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Byte"/>[] 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Guid">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Guid"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Guid"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.TimeSpan">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.TimeSpan"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.TimeSpan"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Uri">
            <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 到 <see cref="T:System.Uri"/> 的显式转换。</summary>
            <param name="value">值。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Boolean"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.DateTimeOffset"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte)~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Byte"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Nullable`1"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.SByte)~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.SByte"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Nullable`1"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Nullable`1"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Nullable`1"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Nullable`1"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Nullable`1"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Nullable`1"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Nullable`1"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Int16"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.UInt16"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Int32"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Nullable`1"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.DateTime"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Nullable`1"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Nullable`1"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Decimal"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Nullable`1"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Nullable`1"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Nullable`1"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Nullable`1"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Double"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Single"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.String"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.UInt32"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.UInt64"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Byte"/>[] 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Uri)~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Uri"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.TimeSpan)~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.TimeSpan"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Nullable`1"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Guid)~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Guid"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~Newtonsoft.Json.Linq.JToken">
            <summary>执行从 <see cref="T:System.Nullable`1"/> 到 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的隐式转换。</summary>
            <param name="value">从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 的值。</param>
            <returns>使用指定值初始化的 <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.CreateReader">
            <summary>为此令牌创建一个 <see cref="T:Newtonsoft.Json.JsonReader"/>。</summary>
            <returns>可用于读取此令牌及其后代的 <see cref="T:Newtonsoft.Json.JsonReader"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
            <summary>从对象创建 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</summary>
            <param name="o">将用于创建 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的对象。</param>
            <returns>具有指定对象的值的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>使用指定的 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 从对象创建 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</summary>
            <param name="o">将用于创建 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的对象。</param>
            <param name="jsonSerializer">将在读取对象时使用的 <see cref="T:Newtonsoft.Json.JsonSerializer"/>。</param>
            <returns>具有指定对象的值的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1">
            <summary>从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 中创建指定的 .NET 类型。</summary>
            <typeparam name="T">令牌将被反序列化的对象类型。</typeparam>
            <returns>从 JSON 值创建的新对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type)">
            <summary>从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 中创建指定的 .NET 类型。</summary>
            <param name="objectType">令牌将被反序列化的对象类型。</param>
            <returns>从 JSON 值创建的新对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1(Newtonsoft.Json.JsonSerializer)">
            <summary>使用指定的 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 创建指定的 .NET 类型。</summary>
            <typeparam name="T">令牌将被反序列化的对象类型。</typeparam>
            <param name="jsonSerializer">将在创建对象时使用的 <see cref="T:Newtonsoft.Json.JsonSerializer"/>。</param>
            <returns>从 JSON 值创建的新对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type,Newtonsoft.Json.JsonSerializer)">
            <summary>使用指定的 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 创建指定的 .NET 类型。</summary>
            <param name="objectType">令牌将被反序列化的对象类型。</param>
            <param name="jsonSerializer">将在创建对象时使用的 <see cref="T:Newtonsoft.Json.JsonSerializer"/>。</param>
            <returns>从 JSON 值创建的新对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)">
            <summary>从 <see cref="T:Newtonsoft.Json.JsonReader"/> 创建 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</summary>
            <param name="reader">定位在令牌上的 <see cref="T:Newtonsoft.Json.JsonReader"/> 以读入此 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <returns>包含从读取器读取的令牌及其后代令牌的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。令牌的运行时类型由读取器中遇到的第一个令牌的令牌类型确定。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>从 <see cref="T:Newtonsoft.Json.JsonReader"/> 创建 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</summary>
            <param name="reader">定位在令牌上的 <see cref="T:Newtonsoft.Json.JsonReader"/> 以读入此 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="settings">用于加载 JSON 的 <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>。如果为 NULL，则将使用默认加载设置。</param>
            <returns>包含从读取器读取的令牌及其后代令牌的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。令牌的运行时类型由读取器中遇到的第一个令牌的令牌类型确定。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String)">
            <summary>从包含 JSON 的字符串加载 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</summary>
            <param name="json">包含 JSON 的 <see cref="T:System.String"/>。</param>
            <returns>从包含 JSON 的字符串填充 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>从包含 JSON 的字符串加载 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</summary>
            <param name="json">包含 JSON 的 <see cref="T:System.String"/>。</param>
            <param name="settings">用于加载 JSON 的 <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>。如果为 NULL，则将使用默认加载设置。</param>
            <returns>从包含 JSON 的字符串填充 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>从 <see cref="T:Newtonsoft.Json.JsonReader"/> 创建 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</summary>
            <param name="reader">定位在令牌上的 <see cref="T:Newtonsoft.Json.JsonReader"/> 以读入此 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="settings">用于加载 JSON 的 <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>。如果为 NULL，则将使用默认加载设置。</param>
            <returns>包含从读取器读取的令牌及其后代令牌的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。令牌的运行时类型由读取器中遇到的第一个令牌的令牌类型确定。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader)">
            <summary>从 <see cref="T:Newtonsoft.Json.JsonReader"/> 创建 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</summary>
            <param name="reader">定位在令牌上的 <see cref="T:Newtonsoft.Json.JsonReader"/> 以读入此 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <returns>包含从读取器读取的令牌及其后代令牌的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。令牌的运行时类型由读取器中遇到的第一个令牌的令牌类型确定。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
            <summary>使用 JPath 表达式选择 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。选择与对象路径匹配的令牌。</summary>
            <param name="path">包含 JPath 表达式的 <see cref="T:System.String"/>。</param>
            <returns><see cref="T:Newtonsoft.Json.Linq.JToken"/>，或 NULL。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
            <summary>使用 JPath 表达式选择 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。选择与对象路径匹配的令牌。</summary>
            <param name="path">包含 JPath 表达式的 <see cref="T:System.String"/>。</param>
            <param name="errorWhenNoMatch">一个标志，用于指示在计算表达式的一部分时，如果没有找到令牌，是否应该引发错误。</param>
            <returns><see cref="T:Newtonsoft.Json.Linq.JToken"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String)">
            <summary>使用 JPath 表达式选择元素集合。</summary>
            <param name="path">包含 JPath 表达式的 <see cref="T:System.String"/>。</param>
            <returns>包含所选元素的 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String,System.Boolean)">
            <summary>使用 JPath 表达式选择元素集合。</summary>
            <param name="path">包含 JPath 表达式的 <see cref="T:System.String"/>。</param>
            <param name="errorWhenNoMatch">一个标志，用于指示在计算表达式的一部分时，如果没有找到令牌，是否应该引发错误。</param>
            <returns>包含所选元素的 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>返回负责对此对象执行绑定操作的 <see cref="T:System.Dynamic.DynamicMetaObject"/>。</summary>
            <param name="parameter">运行时值的表达式树表示。</param>
            <returns>要绑定此对象的 <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>返回负责对此对象执行绑定操作的 <see cref="T:System.Dynamic.DynamicMetaObject"/>。</summary>
            <param name="parameter">运行时值的表达式树表示。</param>
            <returns>要绑定此对象的 <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.DeepClone">
            <summary>创建 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的新实例。所有子令牌都以递归方式克隆。</summary>
            <returns><see cref="T:Newtonsoft.Json.Linq.JToken"/> 的新实例。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddAnnotation(System.Object)">
            <summary>将对象添加到此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的注释列表中。</summary>
            <param name="annotation">要添加的注释。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotation``1">
            <summary>从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 中获取指定类型的第一个注释对象。</summary>
            <typeparam name="T">要检索的注释类型。</typeparam>
            <returns>第一个与指定类型匹配的注释对象，或如果没有注释属于指定类型，则为 <c>NULL</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotation(System.Type)">
            <summary>从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 中获取指定类型的第一个注释对象。</summary>
            <param name="type">要检索的注释的 <see cref="P:Newtonsoft.Json.Linq.JToken.Type"/>。</param>
            <returns>第一个与指定类型匹配的注释对象，或如果没有注释属于指定类型，则为 <c>NULL</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotations``1">
            <summary>获取此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 指定类型的注释的集合。</summary>
            <typeparam name="T">要检索的注释类型。</typeparam>
            <returns>包含此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的注释的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotations(System.Type)">
            <summary>获取此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 指定类型的注释的集合。</summary>
            <param name="type">要检索的注释的 <see cref="P:Newtonsoft.Json.Linq.JToken.Type"/>。</param>
            <returns>包含与此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的指定类型匹配的注释的 <see cref="T:System.Object"/> 的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.RemoveAnnotations``1">
            <summary>从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 中删除指定类型的注释。</summary>
            <typeparam name="T">要删除的注释类型。</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.RemoveAnnotations(System.Type)">
            <summary>从 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 中删除指定类型的注释。</summary>
            <param name="type">要删除的注释的 <see cref="P:Newtonsoft.Json.Linq.JToken.Type"/>。</param>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenEqualityComparer">
            <summary>比较令牌以确定它们是否相等。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>确定指定的对象是否相等。</summary>
            <param name="x">要比较的类型 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的第一个对象。</param>
            <param name="y">要比较的类型 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的第二个对象。</param>
            <returns>如果指定的对象相等，为 <c>true</c>；否则，为 <c>false</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Newtonsoft.Json.Linq.JToken)">
            <summary>返回指定对象的哈希代码。</summary>
            <param name="obj">要为其返回哈希代码的 <see cref="T:System.Object"/>。</param>
            <returns>指定对象的哈希代码。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> 的类型是一个引用类型，并且 <paramref name="obj"/> 为 NULL。</exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenReader">
            <summary>表示读取器，其提供对串行化 JSON 数据的快速、非缓存、仅向前访问。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenReader.CurrentToken">
            <summary>在读取器的当前位置获取 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenReader.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JTokenReader"/> 类的新实例。</summary>
            <param name="token">要从中读取的令牌。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenReader.Read">
            <summary>从数据流中读取下一个 JSON 令牌。</summary>
            <returns>如果成功读取下一个令牌，为 <c>true</c>；如果没有更多的令牌可供读取，则为 <c>false</c>。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenReader.Path">
            <summary>获取当前 JSON 令牌的路径。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenType">
            <summary>指定令牌的类型。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.None">
            <summary>未设置令牌类型。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Object">
            <summary>JSON 对象。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Array">
            <summary>JSON 数组。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Constructor">
            <summary>JSON 构造函数。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Property">
            <summary>JSON 对象属性。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Comment">
            <summary>注释。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Integer">
            <summary>整数值。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Float">
            <summary>浮动值。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.String">
            <summary>字符串值。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Boolean">
            <summary>布尔值。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Null">
            <summary>NULL 值。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Undefined">
            <summary>未定义值。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Date">
            <summary>日期值。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Raw">
            <summary>原始 JSON 值。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Bytes">
            <summary>字节值的集合。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Guid">
            <summary>GUID 值。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Uri">
            <summary>URI 值。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.TimeSpan">
            <summary>TimeSpan 值。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenWriter">
            <summary>表示编写器，其提供一种快速、非缓存、仅向前的方式来生成 JSON 数据。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenWriter.CurrentToken">
            <summary>在编写器的当前位置获取 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenWriter.Token">
            <summary>获取正在写入的令牌。</summary>
            <value>正在写入的令牌。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor(Newtonsoft.Json.Linq.JContainer)">
            <summary>初始化写入给定的 <see cref="T:Newtonsoft.Json.Linq.JContainer"/> 的 <see cref="T:Newtonsoft.Json.Linq.JTokenWriter"/> 类的新实例。</summary>
            <param name="container">正在写入的容器。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JTokenWriter"/> 类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Flush">
            <summary>将缓冲区中的任何内容刷新到底层数据流，并刷新底层数据流。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Close">
            <summary>关闭此数据流和底层数据流。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
            <summary>写入 JSON 对象的开头。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
            <summary>写入 JSON 数组的开头。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
            <summary>使用给定名称写入构造函数的开头。</summary>
            <param name="name">构造函数的名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>写入到结束。</summary>
            <param name="token">令牌。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
            <summary>在 JSON 对象上写入名称/值对的属性名称。</summary>
            <param name="name">属性的名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Object)">
            <summary>写入 <see cref="T:System.Object"/> 值。如果无法将值写为单个 JSON 令牌，则会引发错误。</summary>
            <param name="value">要写入的 <see cref="T:System.Object"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
            <summary>写入 NULL 值。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
            <summary>写入未定义的值。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
            <summary>写入原始 JSON。</summary>
            <param name="json">要写入的原始 JSON。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
            <summary>写出包含指定文本的注释 <code>/*...*/</code>。</summary>
            <param name="text">放置在注释中的文本。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
            <summary>写入 <see cref="T:System.String"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.String"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
            <summary>写入 <see cref="T:System.Int32"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Int32"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
            <summary>写入 <see cref="T:System.UInt32"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.UInt32"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
            <summary>写入 <see cref="T:System.Int64"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Int64"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
            <summary>写入 <see cref="T:System.UInt64"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.UInt64"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
            <summary>写入 <see cref="T:System.Single"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Single"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
            <summary>写入 <see cref="T:System.Double"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Double"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
            <summary>写入 <see cref="T:System.Boolean"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Boolean"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
            <summary>写入 <see cref="T:System.Int16"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Int16"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
            <summary>写入 <see cref="T:System.UInt16"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.UInt16"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
            <summary>写入 <see cref="T:System.Char"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Char"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
            <summary>写入 <see cref="T:System.Byte"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Byte"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
            <summary>写入 <see cref="T:System.SByte"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.SByte"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
            <summary>写入 <see cref="T:System.Decimal"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Decimal"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
            <summary>写入 <see cref="T:System.DateTime"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.DateTime"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
            <summary>写入 <see cref="T:System.DateTimeOffset"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.DateTimeOffset"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
            <summary>写入 <see cref="T:System.Byte"/>[] 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Byte"/>[] 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
            <summary>写入 <see cref="T:System.TimeSpan"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.TimeSpan"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
            <summary>写入 <see cref="T:System.Guid"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Guid"/> 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
            <summary>写入 <see cref="T:System.Uri"/> 值。</summary>
            <param name="value">要写入的 <see cref="T:System.Uri"/> 值。</param>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JValue">
            <summary>表示 JSON 中的值（字符串、整数、日期等）。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(Newtonsoft.Json.Linq.JValue)">
            <summary>从其他 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 对象初始化 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 类的新实例。</summary>
            <param name="other">要从中复制的 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 对象。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 类的新实例，其具有给定值。</summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Decimal)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 类的新实例，其具有给定值。</summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Char)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 类的新实例，其具有给定值。</summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 类的新实例，其具有给定值。</summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 类的新实例，其具有给定值。</summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Single)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 类的新实例，其具有给定值。</summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 类的新实例，其具有给定值。</summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTimeOffset)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 类的新实例，其具有给定值。</summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 类的新实例，其具有给定值。</summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 类的新实例，其具有给定值。</summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 类的新实例，其具有给定值。</summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 类的新实例，其具有给定值。</summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 类的新实例，其具有给定值。</summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 类的新实例，其具有给定值。</summary>
            <param name="value">值。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.HasValues">
            <summary>获取一个值，该值指示此令牌是否具有子令牌。</summary>
            <value>如果此令牌具有子值，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
            <summary>创建具有给定值的 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 注释。</summary>
            <param name="value">值。</param>
            <returns>具有给定值的 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 注释。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
            <summary>创建具有给定值的 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 字符串。</summary>
            <param name="value">值。</param>
            <returns>具有给定值的 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 字符串。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateNull">
            <summary>创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> NULL 值。</summary>
            <returns><see cref="T:Newtonsoft.Json.Linq.JValue"/> NULL 值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateUndefined">
            <summary>创建 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 未定义值。</summary>
            <returns><see cref="T:Newtonsoft.Json.Linq.JValue"/> 未定义值。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.Type">
            <summary>获取此 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 的节点类型。</summary>
            <value>类型。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.Value">
            <summary>获取或设置底层令牌值。</summary>
            <value>底层令牌值。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>将此令牌写入 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</summary>
            <param name="writer">此方法将写入的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="converters">写入令牌时将使用的 <see cref="T:Newtonsoft.Json.JsonConverter"/> 的集合。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)">
            <summary>指示当前对象是否等于同一类型的另一个对象。</summary>
            <returns>如果当前对象等于 <paramref name="other"/> 参数，为 <c>true</c>；否则，为 <c>false</c>。</returns>
            <param name="other">要与此对象进行比较的对象。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
            <summary>确定指定 <see cref="T:System.Object"/> 是否等于当前 <see cref="T:System.Object"/>。</summary>
            <param name="obj">要与当前 <see cref="T:System.Object"/> 比较的 <see cref="T:System.Object"/>。</param>
            <returns>如果指定 <see cref="T:System.Object"/> 等于当前 <see cref="T:System.Object"/>，为 <c>true</c>；否则，为 <c>false</c>。</returns>
            <exception cref="T:System.NullReferenceException"><paramref name="obj"/> 参数为 NULL。</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.GetHashCode">
            <summary>用作特定类型的哈希函数。</summary>
            <returns>当前 <see cref="T:System.Object"/> 的哈希代码。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString">
            <summary>返回代表此实例的 <see cref="T:System.String"/>。</summary>
            <returns>代表此实例的 <see cref="T:System.String"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String)">
            <summary>返回代表此实例的 <see cref="T:System.String"/>。</summary>
            <param name="format">格式。</param>
            <returns>代表此实例的 <see cref="T:System.String"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
            <summary>返回代表此实例的 <see cref="T:System.String"/>。</summary>
            <param name="formatProvider">格式提供程序。</param>
            <returns>代表此实例的 <see cref="T:System.String"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
            <summary>返回代表此实例的 <see cref="T:System.String"/>。</summary>
            <param name="format">格式。</param>
            <param name="formatProvider">格式提供程序。</param>
            <returns>代表此实例的 <see cref="T:System.String"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>返回负责对此对象执行绑定操作的 <see cref="T:System.Dynamic.DynamicMetaObject"/>。</summary>
            <param name="parameter">运行时值的表达式树表示。</param>
            <returns>要绑定此对象的 <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)">
            <summary>将当前实例与相同类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例是在另一个对象的前面、后面，还是在与另一个对象排序顺序相同的位置上出现。</summary>
            <param name="obj">要与此实例进行比较的对象。</param>
            <returns>表示要比较的对象的相对顺序的 32 位带符号整数。返回值具有以下含义：值含义小于零此实例小于 <paramref name="obj"/>。零此实例等于 <paramref name="obj"/>。大于零此实例大于 <paramref name="obj"/>。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> 与此实例的类型不同。</exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JsonLoadSettings">
            <summary>指定加载 JSON 时使用的设置。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonLoadSettings.CommentHandling">
            <summary>获取或设置加载 JSON 时如何处理 JSON 注释。</summary>
            <value>JSON 注释处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonLoadSettings.LineInfoHandling">
            <summary>获取或设置加载 JSON 时如何处理 JSON 行信息。</summary>
            <value>JSON 行信息处理。</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.MergeArrayHandling">
            <summary>指定如何将 JSON 数组合并在一起。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Concat">
            <summary>连接数组。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Union">
            <summary>联合数组，跳过已存在的项目。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Replace">
            <summary>替换所有数组项目。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Merge">
            <summary>将数组项目合并在一起，与索引匹配。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.MergeNullValueHandling">
            <summary>指定如何合并 NULL 值属性。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeNullValueHandling.Ignore">
            <summary>合并期间将忽略内容的 NULL 值属性。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeNullValueHandling.Merge">
            <summary>将合并内容的 NULL 值属性。</summary>
        </member>
        <member name="T:Newtonsoft.Json.MemberSerialization">
            <summary>指定 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 的成员序列化选项。</summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.OptOut">
            <summary>默认情况下，所有公共成员都已序列化。可以使用 <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute"/> 或 <see cref="T:System.NonSerializedAttribute"/> 排除成员。这是默认成员序列化模式。</summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.OptIn">
            <summary>仅串行化标有 <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> 或 <see cref="T:System.Runtime.Serialization.DataMemberAttribute"/> 的成员。也可以通过使用 <see cref="T:System.Runtime.Serialization.DataContractAttribute"/> 标记类来设置此成员序列化模式。</summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.Fields">
            <summary>所有公共和私有字段都是串行化的。可以使用 <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute"/> 或 <see cref="T:System.NonSerializedAttribute"/> 排除成员。也可以通过使用 <see cref="T:System.SerializableAttribute"/> 标记类以及将 <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> 上的 IgnoreSerializableAttribute 设置为 false 来设置此成员序列化模式。</summary>
        </member>
        <member name="T:Newtonsoft.Json.MetadataPropertyHandling">
            <summary>指定 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 的元数据属性处理选项。</summary>
        </member>
        <member name="F:Newtonsoft.Json.MetadataPropertyHandling.Default">
            <summary>读取位于 JSON 对象开头的元数据属性。</summary>
        </member>
        <member name="F:Newtonsoft.Json.MetadataPropertyHandling.ReadAhead">
            <summary>读取位于 JSON 对象中任何位置的元数据属性。请注意，此设置会影响性能。</summary>
        </member>
        <member name="F:Newtonsoft.Json.MetadataPropertyHandling.Ignore">
            <summary>不要尝试读取元数据属性。</summary>
        </member>
        <member name="T:Newtonsoft.Json.MissingMemberHandling">
            <summary>指定 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 缺少的成员处理选项。</summary>
        </member>
        <member name="F:Newtonsoft.Json.MissingMemberHandling.Ignore">
            <summary>忽略缺少的成员，不要尝试反序列化它。</summary>
        </member>
        <member name="F:Newtonsoft.Json.MissingMemberHandling.Error">
            <summary>在反序列化期间遇到缺少的成员时，会引发 <see cref="T:Newtonsoft.Json.JsonSerializationException"/>。</summary>
        </member>
        <member name="T:Newtonsoft.Json.NullValueHandling">
            <summary>指定 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 的 NULL 值处理选项。</summary>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" /> <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" /></example>
        </member>
        <member name="F:Newtonsoft.Json.NullValueHandling.Include">
            <summary>在序列化和反序列化对象时包括 NULL 值。</summary>
        </member>
        <member name="F:Newtonsoft.Json.NullValueHandling.Ignore">
            <summary>在序列化和反序列化对象时忽略 NULL 值。</summary>
        </member>
        <member name="T:Newtonsoft.Json.ObjectCreationHandling">
            <summary>指定 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 如何处理对象创建。</summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Auto">
            <summary>重用现有对象，在需要时创建新对象。</summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Reuse">
            <summary>仅重用现有对象。</summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Replace">
            <summary>始终创建新对象。</summary>
        </member>
        <member name="T:Newtonsoft.Json.PreserveReferencesHandling">
            <summary>指定 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 的引用处理选项。请注意，通过非默认构造函数（例如实现 ISerializable 的类型）设置值时，无法保留引用。</summary>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" /></example>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.None">
            <summary>串行化类型时不要保留引用。</summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Objects">
            <summary>串行化为 JSON 对象结构时保留引用。</summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Arrays">
            <summary>串行化为 JSON 数组结构时保留引用。</summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.All">
            <summary>串行化时保留引用。</summary>
        </member>
        <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
            <summary>指定 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 的引用循环处理选项。</summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
            <summary>遇到循环时引发 <see cref="T:Newtonsoft.Json.JsonSerializationException"/>。</summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
            <summary>忽略循环引用，不要串行化。</summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
            <summary>序列化循环引用。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Required">
            <summary>指示是否需要属性。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.Default">
            <summary>不需要属性。默认状态。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.AllowNull">
            <summary>属性必须以 JSON 定义，但可以为 NULL 值。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.Always">
            <summary>属性必须以 JSON 定义，并且不可以为 NULL 值。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.DisallowNull">
            <summary>不需要属性，但属性不能为 NULL 值。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Extensions">
            <summary>
            <para>包含 JSON 架构扩展方法。</para>
            <note type="caution">JSON 架构验证已移至其自己的包中。有关详细信息，请登录 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。</note>
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            <para>确定 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 是否有效。</para>
            <note type="caution">JSON 架构验证已移至其自己的包中。有关详细信息，请登录 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。</note>
            </summary>
            <param name="source">要测试的源 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="schema">要测试的架构。</param>
            <returns>如果指定的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 有效，为 <c>true</c>；否则，为 <c>false</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
            <summary>
            <para>确定 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 是否有效。</para>
            <note type="caution">JSON 架构验证已移至其自己的包中。有关详细信息，请登录 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。</note>
            </summary>
            <param name="source">要测试的源 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="schema">要测试的架构。</param>
            <param name="errorMessages">返回此方法时，包含验证时生成的任何错误消息。</param>
            <returns>如果指定的 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 有效，为 <c>true</c>；否则，为 <c>false</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            <para>验证指定的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</para>
            <note type="caution">JSON 架构验证已移至其自己的包中。有关详细信息，请登录 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。</note>
            </summary>
            <param name="source">要测试的源 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="schema">要测试的架构。</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Schema.ValidationEventHandler)">
            <summary>
            <para>验证指定的 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</para>
            <note type="caution">JSON 架构验证已移至其自己的包中。有关详细信息，请登录 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。</note>
            </summary>
            <param name="source">要测试的源 <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="schema">要测试的架构。</param>
            <param name="validationEventHandler">验证事件处理程序。</param>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchema">
            <summary>
            <para>JSON 架构的内存表示。</para>
            <note type="caution">JSON 架构验证已移至其自己的包中。有关详细信息，请登录 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。</note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Id">
            <summary>获取或设置 ID。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Title">
            <summary>获取或设置标题。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Required">
            <summary>获取或设置对象是否为必需的。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
            <summary>获取或设置对象是否为只读。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Hidden">
            <summary>获取或设置对象是否对用户可见。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Transient">
            <summary>获取或设置对象是否为瞬态的。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Description">
            <summary>获取或设置对象的描述。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Type">
            <summary>获取或设置对象允许的值的类型。</summary>
            <value>类型。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Pattern">
            <summary>获取或设置模式。</summary>
            <value>模式。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
            <summary>获取或设置最小长度。</summary>
            <value>最小长度。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
            <summary>获取或设置最大长度。</summary>
            <value>最大长度。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
            <summary>获取或设置值应该被除以的数字。</summary>
            <value>值应该被除以的数字。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Minimum">
            <summary>获取或设置最小值。</summary>
            <value>最小值。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Maximum">
            <summary>获取或设置最大值。</summary>
            <value>最大值。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
            <summary>获取或设置一个标志，指示该值是否可以不等于 &quot;minimum&quot; 属性定义的数字。</summary>
            <value>指示该值是否可以不等于 &quot;minimum&quot; 属性定义的数字的标志。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
            <summary>获取或设置一个标志，指示该值是否可以不等于 &quot;maximum&quot; 属性定义的数字。</summary>
            <value>指示该值是否可以不等于 &quot;maximum&quot; 属性定义的数字的标志。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
            <summary>获取或设置最小项目数。</summary>
            <value>最小项目数。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
            <summary>获取或设置最大项目数。</summary>
            <value>最大项目数。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Items">
            <summary>获取或设置项目的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</summary>
            <value>项目的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.PositionalItemsValidation">
            <summary>获取或设置一个值，该值指示是否使用来自 <see cref="P:Newtonsoft.Json.Schema.JsonSchema.Items"/> 的数组位置的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> 实例验证数组中的项目。</summary>
            <value>如果项目使用其数组位置进行验证，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalItems">
            <summary>获取或设置其他项目的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</summary>
            <value>其他项目的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalItems">
            <summary>获取或设置一个值，该值指示是否允许其他项目。</summary>
            <value>如果允许其他项目，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.UniqueItems">
            <summary>获取或设置数组项目是否必须唯一。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Properties">
            <summary>获取或设置属性的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</summary>
            <value>属性的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
            <summary>获取或设置其他属性的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</summary>
            <value>其他属性的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
            <summary>获取或设置模式属性。</summary>
            <value>模式属性。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
            <summary>获取或设置一个值，该值指示是否允许其他属性。</summary>
            <value>如果允许其他属性，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Requires">
            <summary>获取或设置所需属性（如果此属性存在）。</summary>
            <value>所需属性（如果此属性存在）。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Enum">
            <summary>获取或设置允许的有效枚举值的集合。</summary>
            <value>允许的有效枚举值的集合。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Disallow">
            <summary>获取或设置不允许的类型。</summary>
            <value>不允许的类型。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Default">
            <summary>获取或设置默认值。</summary>
            <value>默认值。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Extends">
            <summary>获取或设置此架构扩展的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> 集合。</summary>
            <value>此架构扩展的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> 集合。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Format">
            <summary>获取或设置格式。</summary>
            <value>格式。</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> 类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)">
            <summary>从指定的 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</summary>
            <param name="reader">包含要读取的 JSON 架构的 <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <returns>表示 JSON 架构的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> 对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>从指定的 <see cref="T:Newtonsoft.Json.JsonReader"/> 读取 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</summary>
            <param name="reader">包含要读取的 JSON 架构的 <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="resolver">要在解析架构引用时使用的 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/>。</param>
            <returns>表示 JSON 架构的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> 对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
            <summary>从包含架构 JSON 的字符串加载 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</summary>
            <param name="json">包含 JSON 的 <see cref="T:System.String"/>。</param>
            <returns>从包含 JSON 的字符串填充 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>解析指定的 JSON。</summary>
            <param name="json">JSON。</param>
            <param name="resolver">解析器。</param>
            <returns>从包含 JSON 的字符串填充 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter)">
            <summary>将此架构写入 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</summary>
            <param name="writer">此方法将写入的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>使用指定的 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/> 将此架构写入 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</summary>
            <param name="writer">此方法将写入的 <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="resolver">使用的解析器。</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.ToString">
            <summary>返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。</summary>
            <returns>表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaException">
            <summary>
            <para>返回有关架构异常的详细信息。</para>
            <note type="caution">JSON 架构验证已移至其自己的包中。有关详细信息，请登录 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。</note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
            <summary>获取指示错误发生位置的行号。</summary>
            <value>指示错误发生位置的行号。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
            <summary>获取指示错误发生位置的行位置。</summary>
            <value>指示错误发生位置的行位置。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.Path">
            <summary>获取发生错误的 JSON 的路径。</summary>
            <value>发生错误的 JSON 路径。</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/> 类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/> 类的新实例，其具有指定的错误消息。</summary>
            <param name="message">解释异常原因的错误消息。</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/> 类的新实例，其具有指定的错误消息以及对作为此异常原因的内部异常的引用。</summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">如果未指定内部异常，则导致当前异常的异常或 NULL 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化<see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/>类的新实例。</summary>
            <param name="info">包含有关引发异常的串行化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">包含有关源或目标的上下文信息的 <see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> 参数为 NULL。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">类名为 NULL 或 <see cref="P:System.Exception.HResult"/> 为零 (0)。</exception>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaGenerator">
            <summary>
            <para>从指定的 <see cref="T:System.Type"/> 生成 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</para>
            <note type="caution">JSON 架构验证已移至其自己的包中。有关详细信息，请登录 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。</note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
            <summary>获取或设置串行化器处理未定义架构的方式。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
            <summary>获取或设置合约解析程序。</summary>
            <value>合约解析程序。</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
            <summary>从指定类型生成 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</summary>
            <param name="type">要从中生成 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> 的类型。</param>
            <returns>从指定类型生成的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>从指定类型生成 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</summary>
            <param name="type">要从中生成 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> 的类型。</param>
            <param name="resolver">用于解析架构引用的 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/>。</param>
            <returns>从指定类型生成的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
            <summary>从指定类型生成 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</summary>
            <param name="type">要从中生成 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> 的类型。</param>
            <param name="rootSchemaNullable">指定生成的根 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> 是否可以为空。</param>
            <returns>从指定类型生成的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
            <summary>从指定类型生成 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</summary>
            <param name="type">要从中生成 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> 的类型。</param>
            <param name="resolver">用于解析架构引用的 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/>。</param>
            <param name="rootSchemaNullable">指定生成的根 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> 是否可以为空。</param>
            <returns>从指定类型生成的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaResolver">
            <summary>
            <para>解析 ID 的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</para>
            <note type="caution">JSON 架构验证已移至其自己的包中。有关详细信息，请登录 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。</note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
            <summary>获取或设置加载的架构。</summary>
            <value>加载的架构。</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/> 类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
            <summary>获取指定引用的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</summary>
            <param name="reference">ID。</param>
            <returns>指定引用的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaType">
            <summary>
            <para><see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> 允许的值类型。</para>
            <note type="caution">JSON 架构验证已移至其自己的包中。有关详细信息，请登录 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。</note>
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.None">
            <summary>没有指定类型。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.String">
            <summary>字符串类型。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Float">
            <summary>浮动类型。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Integer">
            <summary>整数类型。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
            <summary>布尔类型。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Object">
            <summary>对象类型。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Array">
            <summary>数组类型。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Null">
            <summary>NULL 类型。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Any">
            <summary>任何类型。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
            <summary>
            <para>指定 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaGenerator"/> 的未定义架构 ID 处理选项。</para>
            <note type="caution">JSON 架构验证已移至其自己的包中。有关详细信息，请登录 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。</note>
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
            <summary>不要推断架构 ID。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
            <summary>使用 .NET 类型名称作为架构 ID。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
            <summary>使用程序集限定的 .NET 类型名称作为架构 ID。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.ValidationEventArgs">
            <summary>
            <para>返回与 <see cref="T:Newtonsoft.Json.Schema.ValidationEventHandler"/> 相关的详细信息。</para>
            <note type="caution">JSON 架构验证已移至其自己的包中。有关详细信息，请登录 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。</note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
            <summary>获取与验证错误相关联的 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/>。</summary>
            <value>与验证错误关联的 JsonSchemaException。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Path">
            <summary>获取发生验证错误的 JSON 位置的路径。</summary>
            <value>发生验证错误的 JSON 位置的路径。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Message">
            <summary>获取与验证错误对应的文本描述。</summary>
            <value>文本描述。</value>
        </member>
        <member name="T:Newtonsoft.Json.Schema.ValidationEventHandler">
            <summary>
            <para>表示将处理 JSON 架构验证事件和 <see cref="T:Newtonsoft.Json.Schema.ValidationEventArgs"/> 的回调方法。</para>
            <note type="caution">JSON 架构验证已移至其自己的包中。有关详细信息，请登录 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。</note>
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy">
            <summary>蛇形命名法命名策略。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy"/> 类的新实例。</summary>
            <param name="processDictionaryKeys">指示是否应处理字典关键字的标志。</param>
            <param name="overrideSpecifiedNames">指示是否应处理显式指定的属性名称（例如，使用 <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> 自定义的属性名称）的标志。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor">
            <summary>初始化<see cref="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy"/>类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>解析指定的属性名称。</summary>
            <param name="name">要解析的属性名称。</param>
            <returns>已解析的属性名称。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy">
            <summary>骆驼命名法命名策略。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy"/> 类的新实例。</summary>
            <param name="processDictionaryKeys">指示是否应处理字典关键字的标志。</param>
            <param name="overrideSpecifiedNames">指示是否应处理显式指定的属性名称（例如，使用 <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> 自定义的属性名称）的标志。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor">
            <summary>初始化<see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy"/>类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>解析指定的属性名称。</summary>
            <param name="name">要解析的属性名称。</param>
            <returns>已解析的属性名称。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
            <summary>解析类型骆驼命名法属性名称的成员映射。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver"/> 类的新实例。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultContractResolver">
            <summary>由 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 用于解析给定 <see cref="T:System.Type"/> 的 <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/>。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
            <summary>获取一个值，该值指示是否使用动态代码生成来获取和设置成员。此值由可用的运行时权限确定。</summary>
            <value>如果使用动态代码生成，为<c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
            <summary>获取或设置默认成员搜索标志。</summary>
            <value>默认成员搜索标志。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
            <summary>获取或设置一个值，该值指示是否应串行化编译器生成的成员。</summary>
            <value>如果串行化编译器生成了成员，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
            <summary>获取或设置一个值，该值指示在序列化和反序列化类型时是否忽略 <see cref="T:System.Runtime.Serialization.ISerializable"/> 接口。</summary>
            <value>如果在序列化和反序列化类型时，将忽略 <see cref="T:System.Runtime.Serialization.ISerializable"/> 接口，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
            <summary>获取或设置一个值，该值指示在序列化和反序列化类型时是否忽略 <see cref="T:System.SerializableAttribute"/> 属性。</summary>
            <value>如果在序列化和反序列化类型时将忽略 <see cref="T:System.SerializableAttribute"/> 属性，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.NamingStrategy">
            <summary>获取或设置用于解析如何串行化属性名称和字典关键字的命名策略。</summary>
            <value>用于解析如何串行化属性名称和字典关键字的命名策略。</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> 类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor(System.Boolean)">
            <summary>初始化<see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/>类的新实例。</summary>
            <param name="shareCache">如果设置为<c>true</c>，则 <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> 将使用与其他相同类型的解析器共享的缓存。共享缓存将显着提高多个解析器实例的性能，因为昂贵的反射只会发生一次。如果假定解析器的不同实例会产生不同的结果，则此设置可能导致意外行为。设置为 false 时，强烈建议重复使用具有 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 的 <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> 实例。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
            <summary>解析给定类型的合约。</summary>
            <param name="type">要为其解析合约的类型。</param>
            <returns>给定类型的合约。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
            <summary>获取类型的可序列化成员。</summary>
            <param name="objectType">要为其获取可序列化成员的类型。</param>
            <returns>类型的可序列化成员。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
            <summary>创建给定类型的 <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract"/>。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>给定类型的 <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Newtonsoft.Json.Serialization.JsonPropertyCollection)">
            <summary>创建构造函数参数。</summary>
            <param name="constructor">要为其创建属性的构造函数。</param>
            <param name="memberProperties">类型的成员属性。</param>
            <returns>给定 <see cref="T:System.Reflection.ConstructorInfo"/> 的属性。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
            <summary>创建给定 <see cref="T:System.Reflection.ParameterInfo"/> 的 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>。</summary>
            <param name="matchingMemberProperty">匹配的成员属性。</param>
            <param name="parameterInfo">构造函数参数。</param>
            <returns>给定 <see cref="T:System.Reflection.ParameterInfo"/> 的已创建的 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
            <summary>解析了合约的默认 <see cref="T:Newtonsoft.Json.JsonConverter" />。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>合约的默认 <see cref="T:Newtonsoft.Json.JsonConverter" />。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
            <summary>创建给定类型的 <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract"/>。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>给定类型的 <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
            <summary>创建给定类型的 <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract"/>。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>给定类型的 <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>创建给定类型的 <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract"/>。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>给定类型的 <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
            <summary>创建给定类型的 <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract"/>。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>给定类型的 <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
            <summary>创建给定类型的 <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract"/>。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>给定类型的 <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
            <summary>创建给定类型的 <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract"/>。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>给定类型的 <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
            <summary>创建给定类型的 <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract"/>。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>给定类型的 <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
            <summary>确定为给定类型创建的合约类型。</summary>
            <param name="objectType">对象的类型。</param>
            <returns>给定类型的 <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>创建给定 <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/> 的属性。</summary>
            <param name="type">要为其创建属性的类型。</param>/// <param name="memberSerialization">类型的成员序列化模式。</param>
            <returns>给定 <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/> 的属性。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>创建串行化器用于从成员获取和设置值的 <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/>。</summary>
            <param name="member">成员。</param>
            <returns>串行化器用于从成员获取和设置值的 <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <summary>创建给定 <see cref="T:System.Reflection.MemberInfo"/> 的 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>。</summary>
            <param name="memberSerialization">成员的父级 <see cref="T:Newtonsoft.Json.MemberSerialization"/>。</param>
            <param name="member">要为其创建 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> 的成员。</param>
            <returns>给定 <see cref="T:System.Reflection.MemberInfo"/> 的已创建的 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
            <summary>解析属性的名称。</summary>
            <param name="propertyName">属性名称。</param>
            <returns>已解析的属性名称。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(System.String)">
            <summary>解析字典的键。默认情况下，<see cref="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)"/> 用于解析字典关键字。</summary>
            <param name="dictionaryKey">字典的关键字。</param>
            <returns>解析字典的关键字。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
            <summary>获取已解析的属性名称。</summary>
            <param name="propertyName">属性名称。</param>
            <returns>属性名称。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultNamingStrategy">
            <summary>默认命名策略。属性名称和字典关键字保持不变。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultNamingStrategy.ResolvePropertyName(System.String)">
            <summary>解析指定的属性名称。</summary>
            <param name="name">要解析的属性名称。</param>
            <returns>已解析的属性名称。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder">
            <summary>从类型名称解析和加载类时使用的默认序列化绑定程序。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
            <summary>在派生类中重写时，控制串行化对象与类型的绑定。</summary>
            <param name="assemblyName">指定串行化对象的 <see cref="T:System.Reflection.Assembly"/> 名称。</param>
            <param name="typeName">指定串行化对象的 <see cref="T:System.Type"/> 名称。</param>
            <returns>格式化程序创建的新实例的对象类型。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>在派生类中重写时，控制串行化对象与类型的绑定。</summary>
            <param name="serializedType">格式化程序创建的新实例的对象类型。</param>
            <param name="assemblyName">指定串行化对象的 <see cref="T:System.Reflection.Assembly"/> 名称。</param>
            <param name="typeName">指定串行化对象的 <see cref="T:System.Type"/> 名称。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter">
            <summary>表示写入应用程序的 <see cref="T:System.Diagnostics.TraceListener"/> 实例的跟踪编写器。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.LevelFilter">
            <summary>获取将用于过滤传递给编写器的跟踪消息的 <see cref="T:System.Diagnostics.TraceLevel"/>。例如，<code>信息</code>的过滤级别将排除<code>冗长</code>消息，并且包括<code>信息</code>、<code>警告</code>和<code>错误</code>消息。</summary>
            <value>将用于过滤传递给编写器的跟踪消息的 <see cref="T:System.Diagnostics.TraceLevel"/>。</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>写入指定的跟踪级别、消息和可选的异常。</summary>
            <param name="level">写入此跟踪的 <see cref="T:System.Diagnostics.TraceLevel"/>。</param>
            <param name="message">跟踪消息。</param>
            <param name="ex">跟踪异常。此参数是可选的。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DynamicValueProvider">
            <summary>使用动态方法获取并设置 <see cref="T:System.Reflection.MemberInfo"/> 的值。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.DynamicValueProvider"/> 类的新实例。</summary>
            <param name="memberInfo">成员信息。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)">
            <summary>设置值。</summary>
            <param name="target">要设置值的目标。</param>
            <param name="value">要在目标上设置的值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.GetValue(System.Object)">
            <summary>获取值。</summary>
            <param name="target">要从中获取值的目标。</param>
            <returns>值。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ErrorContext">
            <summary>提供有关错误的信息。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Error">
            <summary>获取错误。</summary>
            <value>错误。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
            <summary>获取导致错误的原始对象。</summary>
            <value>导致错误的原始对象。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Member">
            <summary>获取导致错误的成员。</summary>
            <value>导致错误的成员。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Path">
            <summary>获取发生错误的 JSON 位置的路径。</summary>
            <value>发生错误的 JSON 位置的路径。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Handled">
            <summary>获取或设置一个值，指示 <see cref="T:Newtonsoft.Json.Serialization.ErrorContext"/> 是否已处理。</summary>
            <value>如果已处理，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ErrorEventArgs">
            <summary>提供 Error 事件的数据。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
            <summary>获取引发错误事件的当前对象。</summary>
            <value>引发错误事件的当前对象。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
            <summary>获取错误上下文。</summary>
            <value>错误上下文。</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Newtonsoft.Json.Serialization.ErrorContext)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.ErrorEventArgs"/> 类的新实例。</summary>
            <param name="currentObject">当前对象。</param>
            <param name="errorContext">错误上下文。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ExpressionValueProvider">
            <summary>使用动态方法获取并设置 <see cref="T:System.Reflection.MemberInfo"/> 的值。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.ExpressionValueProvider"/> 类的新实例。</summary>
            <param name="memberInfo">成员信息。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.SetValue(System.Object,System.Object)">
            <summary>设置值。</summary>
            <param name="target">要设置值的目标。</param>
            <param name="value">要在目标上设置的值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.GetValue(System.Object)">
            <summary>获取值。</summary>
            <param name="target">要从中获取值的目标。</param>
            <returns>值。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IAttributeProvider">
            <summary>提供获取属性的方法。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Boolean)">
            <summary>返回所有属性的集合，如果没有属性，则返回空集合。</summary>
            <param name="inherit">如果为 true，请查找继承的自定义属性的层次结构链。</param>
            <returns><see cref="T:System.Attribute"/> 的集合，或空集合。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>返回由类型标识的属性集合，如果没有属性，则返回空集合。</summary>
            <param name="attributeType">属性的类型。</param>
            <param name="inherit">如果为 true，请查找继承的自定义属性的层次结构链。</param>
            <returns><see cref="T:System.Attribute"/> 的集合，或空集合。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IContractResolver">
            <summary>由 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 用于解析给定 <see cref="T:System.Type"/> 的 <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/>。</summary>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" /> <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" /></example>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
            <summary>解析给定类型的合约。</summary>
            <param name="type">要为其解析合约的类型。</param>
            <returns>给定类型的合约。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.NamingStrategy">
            <summary>用于解析如何串行化属性名称和字典关键字的基类。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.NamingStrategy.ProcessDictionaryKeys">
            <summary>指示是否应处理字典关键字的标志。默认为 <c>false</c>。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.NamingStrategy.OverrideSpecifiedNames">
            <summary>指示是否应处理显式指定的属性名称（例如，使用 <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> 自定义的属性名称）的标志。默认为 <c>false</c>。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.GetPropertyName(System.String,System.Boolean)">
            <summary>获取给定属性名称的串行化名称。</summary>
            <param name="name">初始属性名称。</param>
            <param name="hasSpecifiedName">指示属性是否已显式指定名称的标志。</param>
            <returns>串行化属性名称。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.GetDictionaryKey(System.String)">
            <summary>获取给定字典关键字的串行化密钥。</summary>
            <param name="key">初始字典关键字。</param>
            <returns>串行化字典关键字。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.ResolvePropertyName(System.String)">
            <summary>解析指定的属性名称。</summary>
            <param name="name">要解析的属性名称。</param>
            <returns>已解析的属性名称。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IReferenceResolver">
            <summary>用于在通过 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 序列化和反序列化 JSON 时解析引用。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
            <summary>解析对其对象的引用。</summary>
            <param name="context">序列化上下文。</param>
            <param name="reference">要解析的参考。</param>
            <returns>对象</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
            <summary>获取指定对象的引用。</summary>
            <param name="context">序列化上下文。</param>
            <param name="value">获取引用的对象。</param>
            <returns>对象的引用。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
            <summary>确定是否引用了指定的对象。</summary>
            <param name="context">序列化上下文。</param>
            <param name="value">要测试引用的对象。</param>
            <returns>如果引用了指定的对象，为 <c>true</c>；否则，为 <c>false</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
            <summary>添加对指定对象的引用。</summary>
            <param name="context">序列化上下文。</param>
            <param name="reference">引用。</param>
            <param name="value">要引用的对象。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ITraceWriter">
            <summary>表示跟踪编写器。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ITraceWriter.LevelFilter">
            <summary>获取将用于过滤传递给编写器的跟踪消息的 <see cref="T:System.Diagnostics.TraceLevel"/>。例如，<code>信息</code>的过滤级别将排除<code>冗长</code>消息，并且包括<code>信息</code>、<code>警告</code>和<code>错误</code>消息。</summary>
            <value>将用于过滤传递给编写器的跟踪消息的 <see cref="T:System.Diagnostics.TraceLevel"/>。</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>写入指定的跟踪级别、消息和可选的异常。</summary>
            <param name="level">写入此跟踪的 <see cref="T:System.Diagnostics.TraceLevel"/>。</param>
            <param name="message">跟踪消息。</param>
            <param name="ex">跟踪异常。此参数是可选的。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IValueProvider">
            <summary>提供获取和设置值的方法。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
            <summary>设置值。</summary>
            <param name="target">要设置值的目标。</param>
            <param name="value">要在目标上设置的值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
            <summary>获取值。</summary>
            <param name="target">要从中获取值的目标。</param>
            <returns>值。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonArrayContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> 使用的 <see cref="T:System.Type"/> 的合约详细信息。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.CollectionItemType">
            <summary>获取集合项目的 <see cref="T:System.Type"/>。</summary>
            <value>集合项目的 <see cref="T:System.Type"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
            <summary>获取一个值，该值指示集合类型是否为多维数组。</summary>
            <value>如果集合类型是多维数组，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.OverrideCreator">
            <summary>获取或设置用于创建对象的函数。设置此函数时将覆盖 <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/>。</summary>
            <value>用于创建对象的函数。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.HasParameterizedCreator">
            <summary>获取一个值，该值指示创建程序是否具有包含集合值的参数。</summary>
            <value>如果创建程序具有包含集合值的参数，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract"/> 类的新实例。</summary>
            <param name="underlyingType">合约的基础类型。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonContainerContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> 使用的 <see cref="T:System.Type"/> 的合约详细信息。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemConverter">
            <summary>获取或设置默认集合项目 <see cref="T:Newtonsoft.Json.JsonConverter" />。</summary>
            <value>转换器。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemIsReference">
            <summary>获取或设置一个值，该值指示集合项目是否保留对象引用。</summary>
            <value>如果集合项目保留对象引用，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
            <summary>获取或设置集合项目引用循环处理。</summary>
            <value>参考循环处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
            <summary>获取或设置集合项目类型名称处理。</summary>
            <value>类型名处理。</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.JsonContainerContract"/> 类的新实例。</summary>
            <param name="underlyingType">合约的基础类型。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.SerializationCallback">
            <summary>处理 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 序列化回调事件。</summary>
            <param name="o">引发回调事件的对象。</param>
            <param name="context">流式上下文。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.SerializationErrorCallback">
            <summary>处理 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 序列化错误回调事件。</summary>
            <param name="o">引发回调事件的对象。</param>
            <param name="context">流式上下文。</param>
            <param name="errorContext">错误上下文。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ExtensionDataSetter">
            <summary>在反序列化期间设置对象的扩展数据。</summary>
            <param name="o">要设置扩展数据的对象。</param>
            <param name="key">扩展数据密钥。</param>
            <param name="value">扩展数据值。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ExtensionDataGetter">
            <summary>在序列化期间获取对象的扩展数据。</summary>
            <param name="o">要设置扩展数据的对象。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> 使用的 <see cref="T:System.Type"/> 的合约详细信息。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
            <summary>获取合约的基础类型。</summary>
            <value>合约的基础类型。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.CreatedType">
            <summary>获取或设置反序列化期间创建的类型。</summary>
            <value>反序列化期间创建的类型。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.IsReference">
            <summary>获取或设置此类型合约是否已串行化为引用。</summary>
            <value>此类型合约是否已串行化为引用。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.Converter">
            <summary>获取或设置此合约的默认 <see cref="T:Newtonsoft.Json.JsonConverter" />。</summary>
            <value>转换器。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializedCallbacks">
            <summary>获取或设置在反序列化对象后立即调用的所有方法。</summary>
            <value>在反序列化对象后立即调用的方法。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializingCallbacks">
            <summary>获取或设置在反序列化对象期间调用的所有方法。</summary>
            <value>在反序列化对象期间调用的方法。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializedCallbacks">
            <summary>获取或设置序列化对象图后调用的所有方法。</summary>
            <value>在序列化对象图之后调用的方法。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializingCallbacks">
            <summary>获取或设置在序列化对象之前调用的所有方法。</summary>
            <value>在序列化对象之前调用的方法。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnErrorCallbacks">
            <summary>获取或设置在序列化对象期间引发错误时调用的所有方法。</summary>
            <value>在序列化对象期间引发错误时调用的方法。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserialized">
            <summary>获取或设置在反序列化对象后立即调用的方法。</summary>
            <value>在反序列化对象后立即调用的方法。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializing">
            <summary>获取或设置在反序列化对象期间调用的方法。</summary>
            <value>在反序列化对象期间调用的方法。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerialized">
            <summary>获取或设置序列化对象图后调用的方法。</summary>
            <value>在序列化对象图之后调用的方法。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializing">
            <summary>获取或设置在序列化对象之前调用的方法。</summary>
            <value>在序列化对象之前调用的方法。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnError">
            <summary>获取或设置在序列化对象期间引发错误时调用的方法。</summary>
            <value>在序列化对象期间引发错误时调用的方法。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
            <summary>获取或设置用于创建对象的默认创建程序方法。</summary>
            <value>用于创建对象的默认创建程序方法。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
            <summary>获取或设置一个值，该值指示默认创建程序是否为非公共创建程序。</summary>
            <value>如果默认对象创建程序为非公共创建程序，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonDictionaryContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> 使用的 <see cref="T:System.Type"/> 的合约详细信息。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.PropertyNameResolver">
            <summary>获取或设置属性名称解析器。</summary>
            <value>属性名称解析器。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyResolver">
            <summary>获取或设置字典关键字解析器。</summary>
            <value>字典关键字解析器。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
            <summary>获取字典关键字的 <see cref="T:System.Type"/>。</summary>
            <value>字典关键字的 <see cref="T:System.Type"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
            <summary>获取字典值的 <see cref="T:System.Type"/>。</summary>
            <value>字典值的 <see cref="T:System.Type"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.OverrideCreator">
            <summary>获取或设置用于创建对象的函数。设置此函数时将覆盖 <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/>。</summary>
            <value>用于创建对象的函数。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.HasParameterizedCreator">
            <summary>获取一个值，该值指示创建程序是否具有包含字典值的参数。</summary>
            <value>如果创建程序具有包含字典值的参数，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract"/> 类的新实例。</summary>
            <param name="underlyingType">合约的基础类型。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonDynamicContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> 使用的 <see cref="T:System.Type"/> 的合约详细信息。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.Properties">
            <summary>获取对象的属性。</summary>
            <value>对象的属性。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.PropertyNameResolver">
            <summary>获取或设置属性名称解析器。</summary>
            <value>属性名称解析器。</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract"/> 类的新实例。</summary>
            <param name="underlyingType">合约的基础类型。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonISerializableContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> 使用的 <see cref="T:System.Type"/> 的合约详细信息。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonISerializableContract.ISerializableCreator">
            <summary>获取或设置 ISerializable 对象构造函数。</summary>
            <value>ISerializable 对象构造函数。</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract"/> 类的新实例。</summary>
            <param name="underlyingType">合约的基础类型。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonLinqContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> 使用的 <see cref="T:System.Type"/> 的合约详细信息。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract"/> 类的新实例。</summary>
            <param name="underlyingType">合约的基础类型。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonObjectContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> 使用的 <see cref="T:System.Type"/> 的合约详细信息。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
            <summary>获取或设置对象成员序列化。</summary>
            <value>成员对象序列化。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ItemRequired">
            <summary>获取或设置一个值，该值指示是否需要对象的属性。</summary>
            <value>指示是否需要对象属性的值。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
            <summary>获取对象的属性。</summary>
            <value>对象的属性。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ConstructorParameters">
            <summary>获取任何非默认构造函数所需的构造函数参数</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters">
            <summary>获取 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> 实例的集合，其定义与 <see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator"/> 一起使用的参数。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideConstructor">
            <summary>获取或设置用于创建对象的替代构造函数。使用 JsonConstructor 属性标记构造函数时设置此项。</summary>
            <value>替代构造函数。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ParametrizedConstructor">
            <summary>获取或设置用于创建对象的参数化构造函数。</summary>
            <value>参数化构造函数。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator">
            <summary>获取或设置用于创建对象的函数。设置此函数时将覆盖 <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/>。使用由 <see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters"/> 集合定义的参数集合调用此函数。</summary>
            <value>用于创建对象的函数。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataSetter">
            <summary>获取或设置扩展数据设置函数。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataGetter">
            <summary>获取或设置扩展数据获取函数。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataValueType">
            <summary>获取或设置扩展数据值类型。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract"/> 类的新实例。</summary>
            <param name="underlyingType">合约的基础类型。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> 使用的 <see cref="T:System.Type"/> 的合约详细信息。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> 类的新实例。</summary>
            <param name="underlyingType">合约的基础类型。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonProperty">
            <summary>将 JSON 属性映射到 .NET 成员或构造函数参数。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
            <summary>获取或设置属性的名称。</summary>
            <value>属性的名称。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DeclaringType">
            <summary>获取或设置声明此属性的类型。</summary>
            <value>声明此属性的类型。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Order">
            <summary>获取或设置成员的序列化顺序。</summary>
            <value>序列化的数字顺序。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName">
            <summary>获取或设置基础成员或参数的名称。</summary>
            <value>基础成员或参数的名称。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
            <summary>获取将在序列化期间获取和设置 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> 的 <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/>。</summary>
            <value>将在序列化期间获取和设置 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> 的 <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.AttributeProvider">
            <summary>获取或设置此属性的 <see cref="T:Newtonsoft.Json.Serialization.IAttributeProvider"/>。</summary>
            <value>此属性的 <see cref="T:Newtonsoft.Json.Serialization.IAttributeProvider"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
            <summary>获取或设置属性的类型。</summary>
            <value>属性的类型。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Converter">
            <summary>获取或设置属性的 <see cref="T:Newtonsoft.Json.JsonConverter" />。如果设置，则此转换器将占用属性类型的合约转换器。</summary>
            <value>转换器。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
            <summary>获取或设置成员转换器。</summary>
            <value>成员转换器。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Ignored">
            <summary>获取或设置一个值，指示是否忽略了此 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>。</summary>
            <value>如果已忽略，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Readable">
            <summary>获取或设置一个值，指示此 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> 是否可读。</summary>
            <value>如果可读，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Writable">
            <summary>获取或设置一个值，指示此 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> 是否可写入。</summary>
            <value>如果可写入，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.HasMemberAttribute">
            <summary>获取或设置一个值，该值指示此 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> 是否具有成员属性。</summary>
            <value>如果有成员属性，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
            <summary>获取默认值。</summary>
            <value>默认值。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Required">
            <summary>获取或设置一个值，指示是否需要此 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>。</summary>
            <value>指示是否需要此 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> 的值。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.IsReference">
            <summary>获取或设置一个值，该值指示此属性是否保留对象引用。</summary>
            <value>如果此实例已引用，为 <c>true</c>；否则，为 <c>false</c>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
            <summary>获取或设置属性 NULL 值处理。</summary>
            <value>NULL 值处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
            <summary>获取或设置属性默认值处理。</summary>
            <value>默认值处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
            <summary>获取或设置属性引用循环处理。</summary>
            <value>参考循环处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
            <summary>获取或设置属性对象创建处理。</summary>
            <value>对象创建处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
            <summary>获取或设置或设置类型名称处理。</summary>
            <value>类型名处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
            <summary>获取或设置用于确定属性是否应串行化的谓词。</summary>
            <value>用于确定属性是否应串行化的谓词。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldDeserialize">
            <summary>获取或设置用于确定属性是否应反序列化的谓词。</summary>
            <value>用于确定属性是否应反序列化的谓词。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
            <summary>获取或设置用于确定属性是否应串行化的谓词。</summary>
            <value>用于确定属性是否应串行化的谓词。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
            <summary>获取或设置用于设置属性是否已反序列化的操作。</summary>
            <value>用于设置属性是否已反序列化的操作。</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonProperty.ToString">
            <summary>返回代表此实例的 <see cref="T:System.String"/>。</summary>
            <returns>代表此实例的 <see cref="T:System.String"/>。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemConverter">
            <summary>获取或设置序列化属性的集合项时使用的转换器。</summary>
            <value>集合的项目转换器。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemIsReference">
            <summary>获取或设置此属性的集合项是否已串行化为引用。</summary>
            <value>此属性的集合项是否已串行化为引用。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemTypeNameHandling">
            <summary>获取或设置串行化属性的集合项时使用的类型名称处理。</summary>
            <value>集合项类型名称处理。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
            <summary>获取或设置串行化属性的集合项时使用的引用循环处理。</summary>
            <value>集合项引用循环处理。</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonPropertyCollection">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> 对象的集合。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.JsonPropertyCollection"/> 类的新实例。</summary>
            <param name="type">类型。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>在派生类中实现时，从指定元素中提取密钥。</summary>
            <param name="item">要从中提取密钥的元素。</param>
            <returns>指定元素的密钥。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>添加 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> 对象。</summary>
            <param name="property">要添加到集合的属性。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
            <summary>获取最接近的匹配 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> 对象。首先尝试获取 propertyName 的精确大小写匹配，然后尝试不区分大小写的匹配。</summary>
            <param name="propertyName">属性名称。</param>
            <returns>匹配的属性（如果找到）。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
            <summary>按属性名称获取属性。</summary>
            <param name="propertyName">要获取的属性的名称。</param>
            <param name="comparisonType">输入属性名称字符串比较。</param>
            <returns>匹配的属性（如果找到）。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonStringContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> 使用的 <see cref="T:System.Type"/> 的合约详细信息。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract"/> 类的新实例。</summary>
            <param name="underlyingType">合约的基础类型。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonTypeReflector.CreateJsonConverterInstance(System.Type,System.Object[])">
            <summary>查找并创建参数描述的 JsonConverter 类型的实例。</summary>
            <param name="converterType">要创建的 JsonConverter 类型。</param>
            <param name="converterArgs">传递给 JsonConverter 的初始化构造函数的可选参数。如果为 NULL，则使用默认构造函数。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.MemoryTraceWriter">
            <summary>表示写入内存的跟踪编写器。达到跟踪消息限制时，将在添加新消息时删除旧跟踪消息。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.MemoryTraceWriter.LevelFilter">
            <summary>获取将用于过滤传递给编写器的跟踪消息的 <see cref="T:System.Diagnostics.TraceLevel"/>。例如，<code>信息</code>的过滤级别将排除<code>冗长</code>消息，并且包括<code>信息</code>、<code>警告</code>和<code>错误</code>消息。</summary>
            <value>将用于过滤传递给编写器的跟踪消息的 <see cref="T:System.Diagnostics.TraceLevel"/>。</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.#ctor">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.MemoryTraceWriter"/> 类的新实例。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>写入指定的跟踪级别、消息和可选的异常。</summary>
            <param name="level">写入此跟踪的 <see cref="T:System.Diagnostics.TraceLevel"/>。</param>
            <param name="message">跟踪消息。</param>
            <param name="ex">跟踪异常。此参数是可选的。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
            <summary>返回最新跟踪消息的枚举。</summary>
            <returns>最新跟踪消息的枚举。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.ToString">
            <summary>返回最新跟踪消息的 <see cref="T:System.String"/>。</summary>
            <returns>最新跟踪消息的 <see cref="T:System.String"/>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ObjectConstructor`1">
            <summary>表示构造对象的方法。</summary>
            <typeparam name="T">要创建的对象类型。</typeparam>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.OnErrorAttribute">
            <summary>应用于方法时，指定在串行化对象发生错误时调用此方法。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ReflectionAttributeProvider">
            <summary>提供从 <see cref="T:System.Type"/>、<see cref="T:System.Reflection.MemberInfo"/>、<see cref="T:System.Reflection.ParameterInfo"/> 或 <see cref="T:System.Reflection.Assembly"/> 获取属性的方法。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.#ctor(System.Object)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.ReflectionAttributeProvider"/> 类的新实例。</summary>
            <param name="attributeProvider">要为其获取属性的实例。此参数应为 <see cref="T:System.Type"/>、<see cref="T:System.Reflection.MemberInfo"/>、<see cref="T:System.Reflection.ParameterInfo"/> 或 <see cref="T:System.Reflection.Assembly"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Boolean)">
            <summary>返回所有属性的集合，如果没有属性，则返回空集合。</summary>
            <param name="inherit">如果为 true，请查找继承的自定义属性的层次结构链。</param>
            <returns><see cref="T:System.Attribute"/> 的集合，或空集合。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>返回由类型标识的属性集合，如果没有属性，则返回空集合。</summary>
            <param name="attributeType">属性的类型。</param>
            <param name="inherit">如果为 true，请查找继承的自定义属性的层次结构链。</param>
            <returns><see cref="T:System.Attribute"/> 的集合，或空集合。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ReflectionValueProvider">
            <summary>使用反射获取并设置 <see cref="T:System.Reflection.MemberInfo"/> 的值。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.ReflectionValueProvider"/> 类的新实例。</summary>
            <param name="memberInfo">成员信息。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
            <summary>设置值。</summary>
            <param name="target">要设置值的目标。</param>
            <param name="value">要在目标上设置的值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
            <summary>获取值。</summary>
            <param name="target">要从中获取值的目标。</param>
            <returns>值。</returns>
        </member>
        <member name="T:Newtonsoft.Json.StringEscapeHandling">
            <summary>指定在编写 JSON 文本时如何转义字符串。</summary>
        </member>
        <member name="F:Newtonsoft.Json.StringEscapeHandling.Default">
            <summary>仅转义控制字符（例如换行符）。</summary>
        </member>
        <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeNonAscii">
            <summary>转义所有非 ASCII 和控制字符（例如换行符）。</summary>
        </member>
        <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeHtml">
            <summary>转义 HTML (&lt;, &gt;, &amp;, &apos;, &quot;) 和控制字符（例如换行符）。</summary>
        </member>
        <member name="T:Newtonsoft.Json.TypeNameHandling">
            <summary>指定 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 的类型名称处理选项。</summary>
            <remarks><see cref="T:Newtonsoft.Json.TypeNameHandling"/> 当你的应用程序从外部源反序列化 JSON 时，应谨慎使用。使用除 <c>TypeNameHandling.None</c> 以外的值反序列化时，应使用自定义 <see cref="T:System.Runtime.Serialization.SerializationBinder"/> 验证传入类型。</remarks>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.None">
            <summary>串行化类型时不要包含 .NET 类型名称。</summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Objects">
            <summary>串行化为 JSON 对象结构时包括 .NET 类型名称。</summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Arrays">
            <summary>串行化为 JSON 数组结构时包括 .NET 类型名称。</summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.All">
            <summary>串行化时始终包含 .NET 类型名称。</summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Auto">
            <summary>当串行化对象的类型与其声明的类型不同时，请包含 .NET 类型名称。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>确定集合是 NULL 还是空。</summary>
            <param name="collection">集合。</param>
            <returns>如果集合为 NULL 或为空，为 <c>true</c>；否则，为 <c>false</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>将指定集合的元素添加到指定的通用 IList。</summary>
            <param name="initial">要添加到的列表。</param>
            <param name="collection">要添加到的元素集合。</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>将值转换为指定的类型。如果无法转换值，则检查该值是否可分配给指定的类型。</summary>
            <param name="initialValue">要转换的值。</param>
            <param name="culture">转换时使用的区域性。</param>
            <param name="targetType">要将值转换或强制转换到的类型。</param>
            <returns>转换后的类型。如果转换不成功，则返回初始值（如果可分配给目标类型）。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>用于生成 MetaObject 的 Helper 方法，该方法在 Dynamic 上调用返回结果的特定方法</summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>用于生成 MetaObject 的 Helper 方法，该方法在 Dynamic 上调用特定方法，但使用其中一个参数作为结果。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>用于生成 MetaObject 的 Helper 方法，该方法在 Dynamic 上调用特定方法，但使用其中一个参数作为结果。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
            <summary>返回一个 Restrictions 对象，其中包含与限制我们类型的限制合并的当前限制</summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1">
            <summary>获取名称的字典以及 Enum 类型的值。</summary>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
            <summary>获取名称的字典以及 Enum 类型的值。</summary>
            <param name="enumType">要为其获取名称和值的枚举类型。</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
            <summary>获取已键入集合项目的类型。</summary>
            <param name="type">类型。</param>
            <returns>已键入集合项目的类型。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>获取成员的基础类型。</summary>
            <param name="member">成员。</param>
            <returns>成员的基础类型。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>确定成员是否为索引属性。</summary>
            <param name="member">成员。</param>
            <returns>如果成员为索引属性，为 <c>true</c>；否则，为 <c>false</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>确定属性是否为索引属性。</summary>
            <param name="property">属性。</param>
            <returns>如果属性为索引属性，为 <c>true</c>；否则，为 <c>false</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>获取对象上的成员值。</summary>
            <param name="member">成员。</param>
            <param name="target">目标对象。</param>
            <returns>对象上的成员值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>设置目标对象上的成员值。</summary>
            <param name="member">成员。</param>
            <param name="target">目标。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>确定是否可以读取指定的 MemberInfo。</summary>
            <param name="member">确定是否可以读取的 MemberInfo。</param>/// <param name="nonPublic">如果设置为 <c>true</c>，则允许非公开获取成员。</param>
            <returns>如果可以读取指定的 MemberInfo，为 <c>true</c>；否则，为 <c>false</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
            <summary>确定是否可以设置指定的 MemberInfo。</summary>
            <param name="member">确定是否可以设置的 MemberInfo。</param>
            <param name="nonPublic">如果设置为 <c>true</c>，则允许非公开设置成员。</param>
            <param name="canSetReadOnly">如果设置为 <c>true</c>，则允许在只读的情况下设置成员。</param>
            <returns>如果可以设置指定的 MemberInfo，为 <c>true</c>；否则，为 <c>false</c>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Utilities.StringBuffer">
            <summary>构建字符串。与 StringBuilder 不同，此类允许你重用其内部缓冲区。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>确定字符串是否均为空格。空字符串将返回 false。</summary>
            <param name="s">用于测试是否均为空格的字符串。</param>
            <returns>如果字符串均为空格，为 <c>true</c>；否则，为 <c>false</c>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.WriteState">
            <summary>指定 <see cref="T:Newtonsoft.Json.JsonWriter"/> 的状态。</summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Error">
            <summary>已引发一个异常，该异常使 <see cref="T:Newtonsoft.Json.JsonWriter"/> 处于无效状态。你可以调用 <see cref="M:Newtonsoft.Json.JsonWriter.Close"/> 方法以将 <see cref="T:Newtonsoft.Json.JsonWriter"/> 至于<c>已关闭</c>状态。任何其他 <see cref="T:Newtonsoft.Json.JsonWriter"/> 方法调用均会导致引发 <see cref="T:System.InvalidOperationException"/>。</summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Closed">
            <summary>已调用 <see cref="M:Newtonsoft.Json.JsonWriter.Close"/> 方法。</summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Object">
            <summary>正在写入对象。</summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Array">
            <summary>正在写入数组。</summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Constructor">
            <summary>正在写入构造函数。</summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Property">
            <summary>正在写入属性。</summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Start">
            <summary>尚未调用写入方法。</summary>
        </member>
    </members>
</doc>