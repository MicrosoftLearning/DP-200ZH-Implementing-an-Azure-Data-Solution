<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>GalaSoft.MvvmLight.Platform</name>
    </assembly>
    <members>
        <member name="T:GalaSoft.MvvmLight.CommandWpf.RelayCommand">
            <summary>唯一目的是通过调用委托将其功能传递至其他对象的命令。CanExecute 方法的默认返回值为“true”。此类不允许你在 Execute 和 CanExecute 回调方法中接受命令参数。</summary>
            <remarks>如果你在 WPF4.5 或更高版本中使用此类，则需要使用 GalaSoft.MvvmLight.CommandWpf 命名空间（而非 GalaSoft.MvvmLight.Command）。这将启用（或恢复）CommandManager 类，该类基于 CanExecute 委托处理控件的自动启用/禁用。</remarks>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand.#ctor(System.Action)">
            <summary>初始化始终能执行的 RelayCommand 类的新实例。</summary>
            <param name="execute">执行逻辑。重要事项：请注意，由于使用了 WeakActions，目前不支持收尾（请参阅 http://stackoverflow.com/questions/25730530/）。</param>
            <exception cref="T:System.ArgumentNullException">执行参数是否为 null。</exception>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>初始化 RelayCommand 类的新实例。</summary>
            <param name="execute">执行逻辑。重要事项：请注意，由于使用了 WeakActions，目前不支持收尾（请参阅 http://stackoverflow.com/questions/25730530/）。</param>
            <param name="canExecute">执行状态逻辑。</param>
            <exception cref="T:System.ArgumentNullException">执行参数是否为 null。重要事项：请注意，由于使用了 WeakActions，目前不支持收尾（请参阅 http://stackoverflow.com/questions/25730530/）。</exception>
        </member>
        <member name="E:GalaSoft.MvvmLight.CommandWpf.RelayCommand.CanExecuteChanged">
            <summary>当更改影响命令是否应执行时发生。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand.RaiseCanExecuteChanged">
            <summary>提高了 <see cref="E:GalaSoft.MvvmLight.CommandWpf.RelayCommand.CanExecuteChanged" /> 事件。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand.CanExecute(System.Object)">
            <summary>对确定是否能在当前状态下执行命令的方法进行定义。</summary>
            <param name="parameter">始终将忽略此参数。</param>
            <returns>如果可以执行此命令，则为 true；否则否则为 false。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand.Execute(System.Object)">
            <summary>调用命令时对方法进行定义。</summary>
            <param name="parameter">始终将忽略此参数。</param>
        </member>
        <member name="T:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1">
            <summary>唯一目的是通过调用委托将其功能传递至其他对象的通用命令。CanExecute 方法的默认返回值为“true”。此类允许你在 Execute 和 CanExecute 回调方法中接受命令参数。</summary>
            <typeparam name="T">命令参数的类型。</typeparam>
            <remarks>如果你在 WPF4.5 或更高版本中使用此类，则需要使用 GalaSoft.MvvmLight.CommandWpf 命名空间（而非 GalaSoft.MvvmLight.Command）。这将启用（或恢复）CommandManager 类，该类基于 CanExecute 委托处理控件的自动启用/禁用。</remarks>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1.#ctor(System.Action{`0})">
            <summary>初始化始终能执行的 RelayCommand 类的新实例。</summary>
            <param name="execute">执行逻辑。重要事项：请注意，由于使用了 WeakActions，目前不支持收尾（请参阅 http://stackoverflow.com/questions/25730530/）。</param>
            <exception cref="T:System.ArgumentNullException">执行参数是否为 null。</exception>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>初始化 RelayCommand 类的新实例。</summary>
            <param name="execute">执行逻辑。重要事项：请注意，由于使用了 WeakActions，目前不支持收尾（请参阅 http://stackoverflow.com/questions/25730530/）。</param>
            <param name="canExecute">执行状态逻辑。重要事项：请注意，由于使用了 WeakActions，目前不支持收尾（请参阅 http://stackoverflow.com/questions/25730530/）。</param>
            <exception cref="T:System.ArgumentNullException">执行参数是否为 null。</exception>
        </member>
        <member name="E:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1.CanExecuteChanged">
            <summary>当更改影响命令是否应执行时发生。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1.RaiseCanExecuteChanged">
            <summary>提高了 <see cref="E:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1.CanExecuteChanged" /> 事件。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1.CanExecute(System.Object)">
            <summary>对确定是否能在当前状态下执行命令的方法进行定义。</summary>
            <param name="parameter">此命令所用的数据。如果该命令不需要传递数据，则可以将此对象设置为 null 引用。</param>
            <returns>如果可以执行此命令，则为 true；否则否则为 false。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1.Execute(System.Object)">
            <summary>调用命令时对方法进行定义。</summary>
            <param name="parameter">此命令所用的数据。如果该命令不需要传递数据，则可以将此对象设置为 null 引用。</param>
        </member>
        <member name="T:GalaSoft.MvvmLight.Command.EventToCommand">
            <summary>此 <see cref="T:System.Windows.Interactivity.TriggerAction`1" /> 可用于将任何 FrameworkElement 上的任何事件与 <see cref="T:System.Windows.Input.ICommand" /> 绑定。通常，此元素在 XAML 中用于将附加元素连接到位于 ViewModel 中的命令。此触发器只能附加到 FrameworkElement 或从 FrameworkElement 中派生的类。<para>要访问已触发事件的 EventArgs，请使用 RelayCommand&lt;EventArgs&gt; 并将 CommandParameter 和 CommandParameterValue 留空！</para></summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameterProperty">
            <summary>识别 <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameter" /> 依赖属性</summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.CommandProperty">
            <summary>识别 <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command" /> 依赖属性</summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabledProperty">
            <summary>识别 <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabled" /> 依赖属性</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.Command">
            <summary>获取或设置此触发器绑定的 ICommand。这是一个 DependencyProperty。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameter">
            <summary>获取或设置将传递给附加到此触发器的 <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command" /> 的对象。这是一个 DependencyProperty。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameterValue">
            <summary>获取或设置将传递给附加到此触发器的 <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command" /> 的对象。此属性用于与 Silverlight 版本兼容。这不是 DependencyProperty。对于数据绑定，请使用 <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameter" /> 属性。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabled">
            <summary>获取或设置一个值，该值指示触发 <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command" /> 属性的 CanExecuteChanged 事件时是否必须禁用附加的元素。如果此属性为 true，并且命令的 CanExecute 方法返回 false，则将禁用该元素。如果此属性为 false，则在命令的 CanExecute 方法更改时不会禁用该元素。这是一个 DependencyProperty。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabledValue">
            <summary>获取或设置一个值，该值指示触发 <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command" /> 属性的 CanExecuteChanged 事件时是否必须禁用附加的元素。如果此属性为 true，并且命令的 CanExecute 方法返回 false，则将禁用该元素。此属性用于与 Silverlight 版本兼容。这不是 DependencyProperty。对于数据绑定，请使用 <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabled" /> 属性。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.OnAttached">
            <summary>将此触发器附加到 FrameworkElement 时调用。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.GetAssociatedObject">
            <summary>此方法用于与 Silverlight 版本兼容。</summary>
            <returns>附加此触发器的 FrameworkElement。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.GetCommand">
            <summary>此方法用于与 Silverlight 3 版本兼容。</summary>
            <returns>调用此触发器时必须执行的命令。</returns>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.PassEventArgsToCommand">
            <summary>指定是否应将触发此操作的事件的 EventArgs 传递给绑定的 RelayCommand。如果是 true，则命令应接受相应类型的参数（例如 RelayCommand&lt;MouseButtonEventArgs&gt;）。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverter">
            <summary>获取或设置用于在使用 <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.PassEventArgsToCommand"/> 时转换 EventArgs 的转换器。如果 PassEventArgsToCommand 为 false，则永远不会使用此属性。</summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverterParameterPropertyName">
            <summary><see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverterParameter" /> 依赖项属性的名称。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverterParameter">
            <summary>获取或设置用于在使用 <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.PassEventArgsToCommand"/> 时转换 EventArgs 的转换器的参数。如果 PassEventArgsToCommand 为 false，则永远不会使用此属性。这是依赖属性。</summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverterParameterProperty">
            <summary>识别 <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverterParameter" /> 依赖项属性。</summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.AlwaysInvokeCommandPropertyName">
            <summary><see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.AlwaysInvokeCommand" /> 依赖项属性的名称。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.AlwaysInvokeCommand">
            <summary>获取或设置一个值，该值指示是否即使禁用附加控件也应调用该命令。这是依赖属性。</summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.AlwaysInvokeCommandProperty">
            <summary>识别 <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.AlwaysInvokeCommand" /> 依赖项属性。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.Invoke">
            <summary>提供一种以编程方式调用此触发器，而无需任何 EventArgs 的简单方法。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.Invoke(System.Object)">
            <summary>执行触发器。<para>要访问已触发事件的 EventArgs，请使用 RelayCommand&lt;EventArgs&gt; 并将 CommandParameter 和 CommandParameterValue 留空！</para></summary>
            <param name="parameter">已触发事件的 EventArgs。</param>
        </member>
        <member name="T:GalaSoft.MvvmLight.Command.IEventArgsConverter">
            <summary>用于转换 <see cref="T:GalaSoft.MvvmLight.Command.EventToCommand"/> 类中 EventArgs 的转换器的定义（如果 <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.PassEventArgsToCommand"/> 属性为 true）。将此类的实例设置为 EventToCommand 实例的 <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverter"/> 属性。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.IEventArgsConverter.Convert(System.Object,System.Object)">
            <summary>用于转换 EventArgs 实例的方法。</summary>
            <param name="value">EventTrCommand 实例正在处理的事件传递的 EventArgs 实例。</param>
            <param name="parameter">用于转换的可选参数。使用 <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverterParameter"/> 属性设置此值。可能为 null。</param>
            <returns>转换后的值。</returns>
        </member>
        <member name="T:GalaSoft.MvvmLight.Threading.DispatcherHelper">
            <summary>UI 会话上的调度程序操作的帮助程序类。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Threading.DispatcherHelper.UIDispatcher">
            <summary>在 UI 会话上调用 <see cref="M:GalaSoft.MvvmLight.Threading.DispatcherHelper.Initialize" /> 方法后，获取对 UI 会话的调度程序的引用。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Threading.DispatcherHelper.CheckBeginInvokeOnUI(System.Action)">
            <summary>在 UI 会话上执行操作。如果从 UI 会话调用此方法，则会立即执行该操作。如果从另一个会话调用该方法，则该操作将在 UI 会话的调度程序中排队并异步执行。<para>对于 UI 会话上的其他操作，由于属性 <see cref="P:GalaSoft.MvvmLight.Threading.DispatcherHelper.UIDispatcher" />，你可以获得对 UI 会话调度程序的引用</para>。</summary>
            <param name="action">将在 UI 会话上执行的操作。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Threading.DispatcherHelper.RunAsync(System.Action)">
            <summary>在 UI 会话上异步调用操作。</summary>
            <param name="action">必须执行的操作。</param>
            <returns>调用 BeginInvoke 后立即返回的对象，可以用于在事件队列中等待执行时与委托进行交互。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Threading.DispatcherHelper.Initialize">
            <summary>应该在 UI 会话上调用此方法一次以确保该 <see cref="P:GalaSoft.MvvmLight.Threading.DispatcherHelper.UIDispatcher" /> 属性已初始化。<para>在 Silverlight 应用程序中，构造 MainPage 之后，在 Application_Startup 事件处理程序中调用此方法。</para><para>在 WPF 中，在静态 App() 构造函数上调用此方法。</para></summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Threading.DispatcherHelper.Reset">
            <summary>通过删除重置类 <see cref="P:GalaSoft.MvvmLight.Threading.DispatcherHelper.UIDispatcher"/></summary>
        </member>
    </members>
</doc>