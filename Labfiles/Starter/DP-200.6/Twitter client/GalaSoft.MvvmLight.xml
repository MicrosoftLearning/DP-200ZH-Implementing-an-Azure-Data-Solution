<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>GalaSoft.MvvmLight</name>
    </assembly>
    <members>
        <member name="T:GalaSoft.MvvmLight.Command.RelayCommand">
            <summary>唯一目的是通过调用委托将其功能传递至其他对象的命令。CanExecute 方法的默认返回值为“true”。此类不允许您在 Execute 和 CanExecute 回调方法中接受命令参数。</summary>
            <remarks>如果您在 WPF4.5 或更高版本中使用此类，则需要使用 GalaSoft.MvvmLight.CommandWpf 命名空间（而非 GalaSoft.MvvmLight.Command）。这将启用（或恢复）CommandManager 类，该类基于 CanExecute 委托处理控件的自动启用/禁用。</remarks>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.RelayCommand.#ctor(System.Action)">
            <summary>初始化始终能执行的 RelayCommand 类的新实例。</summary>
            <param name="execute">执行逻辑。重要事项：请注意，由于使用了 WeakActions，目前不支持收尾（请参阅 http://stackoverflow.com/questions/25730530/）。</param>
            <exception cref="T:System.ArgumentNullException">执行参数是否为 null。</exception>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.RelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>初始化 RelayCommand 类的新实例。</summary>
            <param name="execute">执行逻辑。重要事项：请注意，由于使用了 WeakActions，目前不支持收尾（请参阅 http://stackoverflow.com/questions/25730530/）。</param>
            <param name="canExecute">执行状态逻辑。</param>
            <exception cref="T:System.ArgumentNullException">执行参数是否为 null。重要事项：请注意，由于使用了 WeakActions，目前不支持收尾（请参阅 http://stackoverflow.com/questions/25730530/）。</exception>
        </member>
        <member name="E:GalaSoft.MvvmLight.Command.RelayCommand.CanExecuteChanged">
            <summary>当更改影响命令是否应执行时发生。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.RelayCommand.RaiseCanExecuteChanged">
            <summary>提高了 <see cref="E:GalaSoft.MvvmLight.Command.RelayCommand.CanExecuteChanged" /> 事件。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.RelayCommand.CanExecute(System.Object)">
            <summary>对确定是否能在当前状态下执行命令的方法进行定义。</summary>
            <param name="parameter">始终将忽略此参数。</param>
            <returns>如果可以执行此命令，则为 true；否则否则为 false。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.RelayCommand.Execute(System.Object)">
            <summary>调用命令时对方法进行定义。</summary>
            <param name="parameter">始终将忽略此参数。</param>
        </member>
        <member name="T:GalaSoft.MvvmLight.Command.RelayCommand`1">
            <summary>唯一目的是通过调用委托将其功能传递至其他对象的通用命令。CanExecute 方法的默认返回值为“true”。此类允许你在 Execute 和 CanExecute 回调方法中接受命令参数。</summary>
            <typeparam name="T">命令参数的类型。</typeparam>
            <remarks>如果你在 WPF4.5 或更高版本中使用此类，则需要使用 GalaSoft.MvvmLight.CommandWpf 命名空间（而非 GalaSoft.MvvmLight.Command）。这将启用（或恢复）CommandManager 类，该类基于 CanExecute 委托处理控件的自动启用/禁用。</remarks>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.RelayCommand`1.#ctor(System.Action{`0})">
            <summary>初始化始终能执行的 RelayCommand 类的新实例。</summary>
            <param name="execute">执行逻辑。重要事项：请注意，由于使用了 WeakActions，目前不支持收尾（请参阅 http://stackoverflow.com/questions/25730530/）。</param>
            <exception cref="T:System.ArgumentNullException">执行参数是否为 null。</exception>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.RelayCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>初始化 RelayCommand 类的新实例。</summary>
            <param name="execute">执行逻辑。重要事项：请注意，由于使用了 WeakActions，目前不支持收尾（请参阅 http://stackoverflow.com/questions/25730530/）。</param>
            <param name="canExecute">执行状态逻辑。重要事项：请注意，由于使用了 WeakActions，目前不支持收尾（请参阅 http://stackoverflow.com/questions/25730530/）。</param>
            <exception cref="T:System.ArgumentNullException">执行参数是否为 null。</exception>
        </member>
        <member name="E:GalaSoft.MvvmLight.Command.RelayCommand`1.CanExecuteChanged">
            <summary>当更改影响命令是否应执行时发生。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.RelayCommand`1.RaiseCanExecuteChanged">
            <summary>提高了 <see cref="E:GalaSoft.MvvmLight.Command.RelayCommand`1.CanExecuteChanged" /> 事件。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.RelayCommand`1.CanExecute(System.Object)">
            <summary>对确定是否能在当前状态下执行命令的方法进行定义。</summary>
            <param name="parameter">此命令所用的数据。如果该命令不需要传递数据，则可以将此对象设置为 null 引用。</param>
            <returns>如果可以执行此命令，则为 true；否则否则为 false。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.RelayCommand`1.Execute(System.Object)">
            <summary>调用命令时对方法进行定义。</summary>
            <param name="parameter">此命令所用的数据。如果该命令不需要传递数据，则可以将此对象设置为 null 引用。</param>
        </member>
        <member name="T:GalaSoft.MvvmLight.Helpers.DesignerLibrary">
            <summary>用于平台检测的帮助程序类。</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Helpers.Empty">
            <summary>需要异步方法时使用的帮助程序类，但上下文同步。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.Empty.Task">
            <summary>获取空任务。</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Helpers.FeatureDetection">
            <summary>用于平台和功能检测的帮助程序类。</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Helpers.IExecuteWithObject">
            <summary>这个界面用于 <see cref="T:GalaSoft.MvvmLight.Helpers.WeakAction`1" /> 类，如果你存储多个 WeakAction {T} 实例但事先不知道 T 代表什么类型，则可以使用它。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.IExecuteWithObject.Target">
            <summary>WeakAction 的目标。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.IExecuteWithObject.ExecuteWithObject(System.Object)">
            <summary>执行一个操作。</summary>
            <param name="parameter">作为对象传递的参数，待转换为适当的类型。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.IExecuteWithObject.MarkForDeletion">
            <summary>删除所有引用，通知清除方法必须删除此条目。</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Helpers.IExecuteWithObjectAndResult">
            <summary>这个界面用于 <see cref="T:GalaSoft.MvvmLight.Helpers.WeakFunc`1" /> 类，如果您存储多个 WeakFunc{T} 实例但事先不知道 T 代表什么类型，则可以使用它。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.IExecuteWithObjectAndResult.ExecuteWithObject(System.Object)">
            <summary>执行一个 Func 并返回结果。</summary>
            <param name="parameter">作为对象传递的参数，待转换为适当的类型。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="T:GalaSoft.MvvmLight.Helpers.WeakAction">
            <summary>存储 <see cref="T:System.Action" /> 而不导致为 Action 的所有者创建硬引用。所有者可以随时进行垃圾收集。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakAction.Method">
            <summary>获取或设置 <see cref="T:System.Reflection.MethodInfo" />，其对应于此构造函数中传递的 WeakAction 方法。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakAction.MethodName">
            <summary>获取此 WeakAction 表示的方法的名称。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakAction.ActionReference">
            <summary>获取或设置此 WeakAction 操作的目标的 WeakReference。这不一定与 <see cref="P:GalaSoft.MvvmLight.Helpers.WeakAction.Reference" /> 相同，例如：如果该方法是匿名的。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakAction.Reference">
            <summary>获取或设置构造 WeakAction 时传递的目标的 WeakReference。这不一定与 <see cref="P:GalaSoft.MvvmLight.Helpers.WeakAction.ActionReference" /> 相同，例如：如果该方法是匿名的。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakAction.IsStatic">
            <summary>获取指示 WeakAction 是否为静态的值。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction.#ctor">
            <summary>初始化 <see cref="T:GalaSoft.MvvmLight.Helpers.WeakAction" /> 类的空实例。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction.#ctor(System.Action)">
            <summary>初始化 <see cref="T:GalaSoft.MvvmLight.Helpers.WeakAction" /> 类的新实例。</summary>
            <param name="action">将与此实例关联的操作。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction.#ctor(System.Object,System.Action)">
            <summary>初始化 <see cref="T:GalaSoft.MvvmLight.Helpers.WeakAction" /> 类的新实例。</summary>
            <param name="target">操作的所有者。</param>
            <param name="action">将与此实例关联的操作。</param>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakAction.IsAlive">
            <summary>获取以下数值：其指示 Action 的所有者是否仍处于活动状态或者是否已由 Garbage Collector 收集。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakAction.Target">
            <summary>获取 Action 的所有者。该对象存储为 <see cref="T:System.WeakReference" />。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakAction.ActionTarget">
            <summary>弱引用的目标。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction.Execute">
            <summary>执行操作。仅当操作的所有者仍活动时才发生这种情况。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction.MarkForDeletion">
            <summary>将此实例存储的引用设置为 null。</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Helpers.WeakAction`1">
            <summary>存储 Action 而不导致为 Action 的所有者创建硬引用。所有者可以随时进行垃圾收集。</summary>
            <typeparam name="T">Action 的参数类型。</typeparam>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakAction`1.MethodName">
            <summary>获取此 WeakAction 表示的方法的名称。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakAction`1.IsAlive">
            <summary>获取以下数值：其指示 Action 的所有者是否仍处于活动状态或者是否已由 Garbage Collector 收集。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction`1.#ctor(System.Action{`0})">
            <summary>初始化 WeakAction 类的新实例。</summary>
            <param name="action">将与此实例关联的操作。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction`1.#ctor(System.Object,System.Action{`0})">
            <summary>初始化 WeakAction 类的新实例。</summary>
            <param name="target">操作的所有者。</param>
            <param name="action">将与此实例关联的操作。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction`1.Execute">
            <summary>执行操作。仅当操作的所有者仍活动时才发生这种情况。操作的参数设置为默认值 （T）。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction`1.Execute(`0)">
            <summary>执行操作。仅当操作的所有者仍活动时才发生这种情况。</summary>
            <param name="parameter">待传递至操作的参数。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction`1.ExecuteWithObject(System.Object)">
            <summary>使用类型对象的参数执行操作。此参数将被转换为 T。此方法实现 <see cref="M:GalaSoft.MvvmLight.Helpers.IExecuteWithObject.ExecuteWithObject(System.Object)" /> 如果您存储多个 WeakAction {T} 实例但事先不知道 T 代表什么类型，则可以使用它。</summary>
            <param name="parameter">在转换为 T 后将传递至操作的参数。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction`1.MarkForDeletion">
            <summary>将此 WeakAction 包含的所有操作设置为 null，这是包含应删除此 WeakAction 的对象的信号。</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Helpers.WeakFunc`1">
            <summary>存储 Func&lt;T&gt;，而不导致对 Func 的所有者创建硬引用。所有者可以随时进行垃圾收集。</summary>
            <typeparam name="TResult">将由此弱引用存储的 Func 结果的类型。</typeparam>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.Method">
            <summary>获取或设置 <see cref="T:System.Reflection.MethodInfo" />，其对应于此构造函数中传递的 WeakFunc 方法。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.IsStatic">
            <summary>获取指示 WeakFunc 是否为静态的值。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.MethodName">
            <summary>获取此 WeakFunc 表示的方法的名称。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.FuncReference">
            <summary>获取或设置此 WeakFunc 操作的目标的 WeakReference。这不一定与 <see cref="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.Reference" /> 相同，例如：如果该方法是匿名的。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.Reference">
            <summary>获取或设置构造 WeakFunc 时传递的目标的 WeakReference。这不一定与 <see cref="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.FuncReference" /> 相同，例如：如果该方法是匿名的。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`1.#ctor">
            <summary>初始化 WeakFunc 类的空实例。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`1.#ctor(System.Func{`0})">
            <summary>初始化 WeakFunc 类的新实例。</summary>
            <param name="func">将与此实例关联的 Func。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`1.#ctor(System.Object,System.Func{`0})">
            <summary>初始化 WeakFunc 类的新实例。</summary>
            <param name="target">Func 的所有者。</param>
            <param name="func">将与此实例关联的 Func。</param>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.IsAlive">
            <summary>获取以下数值：其指示 Func 的所有者是否仍处于活动状态或者是否已由 Garbage Collector 收集。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.Target">
            <summary>获取 Func 的所有者。该对象存储为 <see cref="T:System.WeakReference" />。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.FuncTarget">
            <summary>获取作为参数传递的 Func 的所有者。这不一定与 <see cref="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.Target" /> 相同，例如：如果该方法是匿名的。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`1.Execute">
            <summary>执行操作。仅当 Func 的所有者仍活动时才发生这种情况。</summary>
            <returns>将 Func 的结果存储为引用。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`1.MarkForDeletion">
            <summary>将此实例存储的引用设置为 null。</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Helpers.WeakFunc`2">
            <summary>存储 Func，而不导致对 Func 的所有者创建硬引用。所有者可以随时进行垃圾收集。</summary>
            <typeparam name="T">Func 参数的类型。</typeparam>
            <typeparam name="TResult">Func 的返回值的类型。</typeparam>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakFunc`2.MethodName">
            <summary>获取或设置此 WeakFunc 表示的方法的名称。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakFunc`2.IsAlive">
            <summary>获取以下数值：其指示 Func 的所有者是否仍处于活动状态或者是否已由 Garbage Collector 收集。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`2.#ctor(System.Func{`0,`1})">
            <summary>初始化 WeakFunc 类的新实例。</summary>
            <param name="func">将与此实例关联的 Func。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`2.#ctor(System.Object,System.Func{`0,`1})">
            <summary>初始化 WeakFunc 类的新实例。</summary>
            <param name="target">Func 的所有者。</param>
            <param name="func">将与此实例关联的 Func。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`2.Execute">
            <summary>执行 Func。仅当 Func 的所有者仍活动时才发生这种情况。Func 的参数设置为默认值 （T）。</summary>
            <returns>将 Func 的结果存储为引用。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`2.Execute(`0)">
            <summary>执行 Func。仅当 Func 的所有者仍活动时才发生这种情况。</summary>
            <param name="parameter">待传递至操作的参数。</param>
            <returns>将 Func 的结果存储为引用。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`2.ExecuteWithObject(System.Object)">
            <summary>使用类型对象的参数执行 Func。此参数将被转换为T.此方法实现 <see cref="M:GalaSoft.MvvmLight.Helpers.IExecuteWithObject.ExecuteWithObject(System.Object)" /> 如果您存储多个 WeakFunc {T} 实例但不提前知道T代表什么类型，则可以使用它。</summary>
            <param name="parameter">在转换为 T 后将传递至 Func 的参数。</param>
            <returns>作为对象执行的结果，其将被转换为 T.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`2.MarkForDeletion">
            <summary>将此 WeakFunc 包含的所有 func 设置为 null，这是包含应删除此 WeakFunc 的对象的信号。</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.ICleanup">
            <summary>为应清除的类定义公共接口，但无 Idisposable 所预设的隐含。实现 Icleanup 的实例可以在不被处理和作为垃圾收集的情况下被清除。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.ICleanup.Cleanup">
            <summary>清理实例，例如：通过保存其状态，删除资源等...</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.GenericMessage`1">
            <summary>将通用值（Content）传递至收件人。</summary>
            <typeparam name="T">Content 属性的类型。</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.GenericMessage`1.#ctor(`0)">
            <summary>初始化 GenericMessage 类的新实例。</summary>
            <param name="content">消息内容。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.GenericMessage`1.#ctor(System.Object,`0)">
            <summary>初始化 GenericMessage 类的新实例。</summary>
            <param name="sender">消息的发件人。</param>
            <param name="content">消息内容。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.GenericMessage`1.#ctor(System.Object,System.Object,`0)">
            <summary>初始化 GenericMessage 类的新实例。</summary>
            <param name="sender">消息的发件人。</param>
            <param name="target">消息的预定目标。此参数可用于指示消息的目标对象。当然这只是指示，可能为 null。</param>
            <param name="content">消息内容。</param>
        </member>
        <member name="P:GalaSoft.MvvmLight.Messaging.GenericMessage`1.Content">
            <summary>获取或设置消息的内容。</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.IMessenger">
            <summary>Messenger 是允许对象交换消息的类。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Register``1(System.Object,System.Action{``0})">
            <summary>为一类消息 Tmessage 注册收件人。发送相应的消息时将执行操作参数。<para>注册收件人不会创建对其硬引用，因此如果删除此收件人，不会导致内存泄漏。</para></summary>
            <typeparam name="TMessage">收件人注册的消息类型。</typeparam>
            <param name="recipient">将收到消息的收件人。</param>
            <param name="action">发送类型为 Tmessage 的消息时将执行的操作。重要事项：请注意，由于使用了 WeakActions，目前不支持收尾（请参阅 http://stackoverflow.com/questions/25730530/）。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Register``1(System.Object,System.Object,System.Action{``0})">
            <summary>为一类消息 Tmessage 注册收件人。发送相应的消息时将执行操作参数。有关如何接收从 Tmessage（或者，如果 Tmessage 是接口，实现 Tmessage 的消息）派生的消息的详情，请参阅 receiveDerivedMessagesToo 参数。<para>注册收件人不会创建对其硬引用，因此如果删除此收件人，不会导致内存泄漏。</para></summary>
            <typeparam name="TMessage">收件人注册的消息类型。</typeparam>
            <param name="recipient">将收到消息的收件人。</param>
            <param name="token">消息传送通道的令牌。如果收件人使用令牌注册，并且发件人使用相同的令牌发送消息，则此消息将被传递至收件人。注册时未使用令牌的其他收件人（或使用其他令牌的用户）将无法收到该消息。同样，没有任何令牌或使用不同令牌发送的消息将不会传递至该收件人。</param>
            <param name="action">发送类型为 Tmessage 的消息时将执行的操作。重要事项：请注意，由于使用了 WeakActions，目前不支持收尾（请参阅 http://stackoverflow.com/questions/25730530/）。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Register``1(System.Object,System.Object,System.Boolean,System.Action{``0})">
            <summary>为一类消息 Tmessage 注册收件人。发送相应的消息时将执行操作参数。有关如何接收从 Tmessage（或者，如果 Tmessage 是接口，实现 Tmessage 的消息）派生的消息的详情，请参阅 receiveDerivedMessagesToo 参数。<para>注册收件人不会创建对其硬引用，因此如果删除此收件人，不会导致内存泄漏。</para></summary>
            <typeparam name="TMessage">收件人注册的消息类型。</typeparam>
            <param name="recipient">将收到消息的收件人。</param>
            <param name="token">消息传送通道的令牌。如果收件人使用令牌注册，并且发件人使用相同的令牌发送消息，则此消息将被传递至收件人。注册时未使用令牌的其他收件人（或使用其他令牌的用户）将无法收到该消息。同样，没有任何令牌或使用不同令牌发送的消息将不会传递至该收件人。</param>
            <param name="receiveDerivedMessagesToo">如果为 true，则从 Tmessage 派生的消息类型也将传输至收件人。例如：如果 SendOrderMessage 和 ExecuteOrderMessage 派生自 OrderMessage，则注册 OrderMessage 并将 receiveDerivedMessagesToo 设置为 true 将向已注册的收件人发送 SendOrderMessage 和 ExecuteOrderMessage。<para>此外，如果 Tmessage 是接口，实现 Tmessage 的消息类型也将被传输至收件人。例如：如果 SendOrderMessage 和 ExecuteOrderMessage 实现 IOrderMessage，则注册 IOrderMessage 并将 receiveDerivedMessagesToo 设置为 true 将向已注册的收件人发送 SendOrderMessage 和 ExecuteOrderMessage。</para></param>
            <param name="action">发送类型为 Tmessage 的消息时将执行的操作。重要事项：请注意，由于使用了 WeakActions，目前不支持收尾（请参阅 http://stackoverflow.com/questions/25730530/）。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Register``1(System.Object,System.Boolean,System.Action{``0})">
            <summary>为一类消息 Tmessage 注册收件人。发送相应的消息时将执行操作参数。有关如何接收从 Tmessage（或者，如果 Tmessage 是接口，实现 Tmessage 的消息）派生的消息的详情，请参阅 receiveDerivedMessagesToo 参数。<para>注册收件人不会创建对其硬引用，因此如果删除此收件人，不会导致内存泄漏。</para></summary>
            <typeparam name="TMessage">收件人注册的消息类型。</typeparam>
            <param name="recipient">将收到消息的收件人。</param>
            <param name="receiveDerivedMessagesToo">如果为 true，则从 Tmessage 派生的消息类型也将传输至收件人。例如：如果 SendOrderMessage 和 ExecuteOrderMessage 派生自 OrderMessage，则注册 OrderMessage 并将 receiveDerivedMessagesToo 设置为 true 将向已注册的收件人发送 SendOrderMessage 和 ExecuteOrderMessage。<para>此外，如果 Tmessage 是接口，实现 Tmessage 的消息类型也将被传输至收件人。例如：如果 SendOrderMessage 和 ExecuteOrderMessage 实现 IOrderMessage，则注册 IOrderMessage 并将 receiveDerivedMessagesToo 设置为 true 将向已注册的收件人发送 SendOrderMessage 和 ExecuteOrderMessage。</para></param>
            <param name="action">发送类型为 Tmessage 的消息时将执行的操作。重要事项：请注意，由于使用了 WeakActions，目前不支持收尾（请参阅 http://stackoverflow.com/questions/25730530/）。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Send``1(``0)">
            <summary>向已注册的收件人发送消息。将使用其中一种 Register 方法把该消息发送至注册此消息类型的所有收件人。</summary>
            <typeparam name="TMessage">待发送的消息类型。</typeparam>
            <param name="message">待发送至已注册收件人的消息。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Send``2(``0)">
            <summary>向已注册的收件人发送消息。将仅使用其中一种 Register 方法（targetType 中的其中一种）把该消息发送至注册此消息类型的所有收件人。</summary>
            <typeparam name="TMessage">待发送的消息类型。</typeparam>
            <typeparam name="TTarget">将接收消息的收件人类型。消息不会发送至其他类型的收件人。</typeparam>
            <param name="message">待发送至已注册收件人的消息。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Send``1(``0,System.Object)">
            <summary>向已注册的收件人发送消息。将仅使用其中一种 Register 方法（targetType 中的其中一种）把该消息发送至注册此消息类型的所有收件人。</summary>
            <typeparam name="TMessage">待发送的消息类型。</typeparam>
            <param name="message">待发送至已注册收件人的消息。</param>
            <param name="token">消息传送通道的令牌。如果收件人使用令牌注册，并且发件人使用相同的令牌发送消息，则此消息将被传递至收件人。注册时未使用令牌的其他收件人（或使用其他令牌的用户）将无法收到该消息。同样，没有任何令牌或使用不同令牌发送的消息将不会传递至该收件人。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Unregister(System.Object)">
            <summary>完全注销消息收件人。执行此方法后，收件人将不再收到任何消息。</summary>
            <param name="recipient">必须注销的收件人。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Unregister``1(System.Object)">
            <summary>仅针对给定类型的消息注销消息收件人。执行此方法后，收件人将不再接收 Tmessage 类型的消息，但仍会收到其他消息类型（如果之前已为其注册）。</summary>
            <typeparam name="TMessage">收件人想要注销的消息类型。</typeparam>
            <param name="recipient">必须注销的收件人。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Unregister``1(System.Object,System.Object)">
            <summary>仅针对给定类型的消息和给定令牌注销消息收件人。执行此方法后，收件人将不再接收带令牌的 Tmessage 类型的消息，但仍会收到其他消息类型或带其他令牌的消息（如果之前已为其注册）。</summary>
            <param name="recipient">必须注销的收件人。</param>
            <param name="token">必须注销收件人的令牌。</param>
            <typeparam name="TMessage">收件人想要注销的消息类型。</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Unregister``1(System.Object,System.Action{``0})">
            <summary>注销给定类型的消息和给定操作的消息收件人。其他消息类型仍将被传输至收件人（如果之前已为其注册）。已为 Tmessage 消息类型和给定收件人（如可用）注册的其他操作也将保持可用。</summary>
            <typeparam name="TMessage">收件人想要注销的消息类型。</typeparam>
            <param name="recipient">必须注销的收件人。</param>
            <param name="action">必须注销收件人和 TMessage 消息类型的操作。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Unregister``1(System.Object,System.Object,System.Action{``0})">
            <summary>对于给定操作和给定令牌，注销给定类型消息的消息收件人。其他消息类型仍将被传输至收件人（如果之前已为其注册）。已为 Tmessage 消息类型、给定收件人与其他令牌（如可用）注册的其他操作也将保持可用。</summary>
            <typeparam name="TMessage">收件人想要注销的消息类型。</typeparam>
            <param name="recipient">必须注销的收件人。</param>
            <param name="token">必须注销收件人的令牌。</param>
            <param name="action">必须注销收件人和 TMessage 消息类型的操作。</param>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.MessageBase">
            <summary>Messenger 广播的所有消息的基类。您可以通过扩展此类来创建自己的消息类型。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.MessageBase.#ctor">
            <summary>初始化 MessageBase 类的新实例。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.MessageBase.#ctor(System.Object)">
            <summary>初始化 MessageBase 类的新实例。</summary>
            <param name="sender">消息的原始发件人。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.MessageBase.#ctor(System.Object,System.Object)">
            <summary>初始化 MessageBase 类的新实例。</summary>
            <param name="sender">消息的原始发件人。</param>
            <param name="target">消息的预定目标。此参数可用于指示消息的目标对象。当然这只是指示，可能为 null。</param>
        </member>
        <member name="P:GalaSoft.MvvmLight.Messaging.MessageBase.Sender">
            <summary>获取或设置消息的发件人。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Messaging.MessageBase.Target">
            <summary>获取或设置消息的预期目标。此属性可用于指示消息的目标对象。当然这只是指示，可能为 null。</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.Messenger">
            <summary>Messenger 是允许对象交换消息的类。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Messaging.Messenger.Default">
            <summary>获取 Messenger 的默认实例，允许以静态方式注册和发送消息。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Register``1(System.Object,System.Action{``0})">
            <summary>为一类消息 Tmessage 注册收件人。发送相应的消息时将执行操作参数。<para>注册收件人不会创建对其硬引用，因此如果删除此收件人，不会导致内存泄漏。</para></summary>
            <typeparam name="TMessage">收件人注册的消息类型。</typeparam>
            <param name="recipient">将收到消息的收件人。</param>
            <param name="action">发送类型为 Tmessage 的消息时将执行的操作。重要事项：请注意，由于使用了 WeakActions，目前不支持收尾（请参阅 http://stackoverflow.com/questions/25730530/）。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Register``1(System.Object,System.Boolean,System.Action{``0})">
            <summary>为一类消息 Tmessage 注册收件人。发送相应的消息时将执行操作参数。有关如何接收从 Tmessage（或者，如果 Tmessage 是接口，实现 Tmessage 的消息）派生的消息的详情，请参阅 receiveDerivedMessagesToo 参数。<para>注册收件人不会创建对其硬引用，因此如果删除此收件人，不会导致内存泄漏。</para></summary>
            <typeparam name="TMessage">收件人注册的消息类型。</typeparam>
            <param name="recipient">将收到消息的收件人。</param>
            <param name="receiveDerivedMessagesToo">如果为 true，则从 Tmessage 派生的消息类型也将传输至收件人。例如：如果 SendOrderMessage 和 ExecuteOrderMessage 派生自 OrderMessage，则注册 OrderMessage 并将 receiveDerivedMessagesToo 设置为 true 将向已注册的收件人发送 SendOrderMessage 和 ExecuteOrderMessage。<para>此外，如果 Tmessage 是接口，实现 Tmessage 的消息类型也将被传输至收件人。例如：如果 SendOrderMessage 和 ExecuteOrderMessage 实现 IOrderMessage，则注册 IOrderMessage 并将 receiveDerivedMessagesToo 设置为 true 将向已注册的收件人发送 SendOrderMessage 和 ExecuteOrderMessage。</para></param>
            <param name="action">发送类型为 Tmessage 的消息时将执行的操作。重要事项：请注意，由于使用了 WeakActions，目前不支持收尾（请参阅 http://stackoverflow.com/questions/25730530/）。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Register``1(System.Object,System.Object,System.Action{``0})">
            <summary>为一类消息 Tmessage 注册收件人。发送相应的消息时将执行操作参数。<para>注册收件人不会创建对其硬引用，因此如果删除此收件人，不会导致内存泄漏。</para></summary>
            <typeparam name="TMessage">收件人注册的消息类型。</typeparam>
            <param name="recipient">将收到消息的收件人。</param>
            <param name="token">消息传送通道的令牌。如果收件人使用令牌注册，并且发件人使用相同的令牌发送消息，则此消息将被传递至收件人。注册时未使用令牌的其他收件人（或使用其他令牌的用户）将无法收到该消息。同样，没有任何令牌或使用不同令牌发送的消息将不会传递至该收件人。</param>
            <param name="action">发送类型为 Tmessage 的消息时将执行的操作。重要事项：请注意，由于使用了 WeakActions，目前不支持收尾（请参阅 http://stackoverflow.com/questions/25730530/）。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Register``1(System.Object,System.Object,System.Boolean,System.Action{``0})">
            <summary>为一类消息 Tmessage 注册收件人。发送相应的消息时将执行操作参数。有关如何接收从 Tmessage（或者，如果 Tmessage 是接口，实现 Tmessage 的消息）派生的消息的详情，请参阅 receiveDerivedMessagesToo 参数。<para>注册收件人不会创建对其硬引用，因此如果删除此收件人，不会导致内存泄漏。</para></summary>
            <typeparam name="TMessage">收件人注册的消息类型。</typeparam>
            <param name="recipient">将收到消息的收件人。</param>
            <param name="token">消息传送通道的令牌。如果收件人使用令牌注册，并且发件人使用相同的令牌发送消息，则此消息将被传递至收件人。注册时未使用令牌的其他收件人（或使用其他令牌的用户）将无法收到该消息。同样，没有任何令牌或使用不同令牌发送的消息将不会传递至该收件人。</param>
            <param name="receiveDerivedMessagesToo">如果为 true，则从 Tmessage 派生的消息类型也将传输至收件人。例如：如果 SendOrderMessage 和 ExecuteOrderMessage 派生自 OrderMessage，则注册 OrderMessage 并将 receiveDerivedMessagesToo 设置为 true 将向已注册的收件人发送 SendOrderMessage 和 ExecuteOrderMessage。<para>此外，如果 Tmessage 是接口，实现 Tmessage 的消息类型也将被传输至收件人。例如：如果 SendOrderMessage 和 ExecuteOrderMessage 实现 IOrderMessage，则注册 IOrderMessage 并将 receiveDerivedMessagesToo 设置为 true 将向已注册的收件人发送 SendOrderMessage 和 ExecuteOrderMessage。</para></param>
            <param name="action">发送类型为 Tmessage 的消息时将执行的操作。重要事项：请注意，由于使用了 WeakActions，目前不支持收尾（请参阅 http://stackoverflow.com/questions/25730530/）。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Send``1(``0)">
            <summary>向已注册的收件人发送消息。将使用其中一种 Register 方法把该消息发送至注册此消息类型的所有收件人。</summary>
            <typeparam name="TMessage">待发送的消息类型。</typeparam>
            <param name="message">待发送至已注册收件人的消息。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Send``2(``0)">
            <summary>向已注册的收件人发送消息。将仅使用其中一种 Register 方法（targetType 中的其中一种）把该消息发送至注册此消息类型的所有收件人。</summary>
            <typeparam name="TMessage">待发送的消息类型。</typeparam>
            <typeparam name="TTarget">将接收消息的收件人类型。消息不会发送至其他类型的收件人。</typeparam>
            <param name="message">待发送至已注册收件人的消息。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Send``1(``0,System.Object)">
            <summary>向已注册的收件人发送消息。将仅使用其中一种 Register 方法（targetType 中的其中一种）把该消息发送至注册此消息类型的所有收件人。</summary>
            <typeparam name="TMessage">待发送的消息类型。</typeparam>
            <param name="message">待发送至已注册收件人的消息。</param>
            <param name="token">消息传送通道的令牌。如果收件人使用令牌注册，并且发件人使用相同的令牌发送消息，则此消息将被传递至收件人。注册时未使用令牌的其他收件人（或使用其他令牌的用户）将无法收到该消息。同样，没有任何令牌或使用不同令牌发送的消息将不会传递至该收件人。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Unregister(System.Object)">
            <summary>完全注销消息收件人。执行此方法后，收件人将不再收到任何消息。</summary>
            <param name="recipient">必须注销的收件人。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Unregister``1(System.Object)">
            <summary>仅针对给定类型的消息注销消息收件人。执行此方法后，收件人将不再接收 Tmessage 类型的消息，但仍会收到其他消息类型（如果之前已为其注册）。</summary>
            <param name="recipient">必须注销的收件人。</param>
            <typeparam name="TMessage">收件人想要注销的消息类型。</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Unregister``1(System.Object,System.Object)">
            <summary>仅针对给定类型的消息和给定令牌注销消息收件人。执行此方法后，收件人将不再接收带令牌的 Tmessage 类型的消息，但仍会收到其他消息类型或带其他令牌的消息（如果之前已为其注册）。</summary>
            <param name="recipient">必须注销的收件人。</param>
            <param name="token">必须注销收件人的令牌。</param>
            <typeparam name="TMessage">收件人想要注销的消息类型。</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Unregister``1(System.Object,System.Action{``0})">
            <summary>注销给定类型的消息和给定操作的消息收件人。其他消息类型仍将被传输至收件人（如果之前已为其注册）。已为 Tmessage 消息类型和给定收件人（如可用）注册的其他操作也将保持可用。</summary>
            <typeparam name="TMessage">收件人想要注销的消息类型。</typeparam>
            <param name="recipient">必须注销的收件人。</param>
            <param name="action">必须注销收件人和 TMessage 消息类型的操作。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Unregister``1(System.Object,System.Object,System.Action{``0})">
            <summary>对于给定操作和给定令牌，注销给定类型消息的消息收件人。其他消息类型仍将被传输至收件人（如果之前已为其注册）。已为 Tmessage 消息类型、给定收件人与其他令牌（如可用）注册的其他操作也将保持可用。</summary>
            <typeparam name="TMessage">收件人想要注销的消息类型。</typeparam>
            <param name="recipient">必须注销的收件人。</param>
            <param name="token">必须注销收件人的令牌。</param>
            <param name="action">必须注销收件人和 TMessage 消息类型的操作。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.OverrideDefault(GalaSoft.MvvmLight.Messaging.IMessenger)">
            <summary>提供一种使用自定义实例覆盖 Messenger.Default 实例的方法，例如用于单元测试目的。</summary>
            <param name="newMessenger">此实例将用作 Messenger.Default 的实例。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Reset">
            <summary>将 Messenger 的默认（静态）实例设置为 null。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.ResetAll">
            <summary>提供对静态 <see cref="M:GalaSoft.MvvmLight.Messaging.Messenger.Reset"/> 方法的非静态访问。将 Messenger 的默认（静态）实例设置为 null。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.RequestCleanup">
            <summary>通知 Messenger 应扫描并清除收件人列表。由于收件人被存储为 <see cref="T:System.WeakReference"/>即使 Messenger 将它们保存在列表中，收件人也可能被作为垃圾采集。在清除操作期间，所有“无效”的收件人被从列表中删除。由于此操作可能需要一些时间，因此仅在应用空闲时执行此操作。因此，Messenger 类的用户应使用 <see cref="M:GalaSoft.MvvmLight.Messaging.Messenger.RequestCleanup"/> 而非强制使用 <see cref="M:GalaSoft.MvvmLight.Messaging.Messenger.Cleanup" /> 方法。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Cleanup">
            <summary>扫描收件人的“无效”实例列表并将其删除。由于收件人被存储为 <see cref="T:System.WeakReference"/>即使 Messenger 将它们保存在列表中，收件人也可能被作为垃圾采集。在清除操作期间，所有“无效”的收件人被从列表中删除。由于此操作可能需要一些时间，因此仅在应用空闲时执行此操作。因此，Messenger 类的用户应使用 <see cref="M:GalaSoft.MvvmLight.Messaging.Messenger.RequestCleanup"/> 而非强制使用 <see cref="M:GalaSoft.MvvmLight.Messaging.Messenger.Cleanup" /> 方法。</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.NotificationMessage">
            <summary>将字符串消息（通知）传递至收件人。<para>通常，通知被定义为静态类中的唯一字符串。为了定义唯一字符串，可以使用 Guid.NewGuid().ToString() 或任何其他唯一标识符。</para></summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessage.#ctor(System.String)">
            <summary>初始化 NotificationMessage 类的新实例。</summary>
            <param name="notification">包含待传递至收件人的任意消息的字符串</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessage.#ctor(System.Object,System.String)">
            <summary>初始化 NotificationMessage 类的新实例。</summary>
            <param name="sender">消息的发件人。</param>
            <param name="notification">包含待传递至收件人的任意消息的字符串</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessage.#ctor(System.Object,System.Object,System.String)">
            <summary>初始化 NotificationMessage 类的新实例。</summary>
            <param name="sender">消息的发件人。</param>
            <param name="target">消息的预定目标。此参数可用于指示消息的目标对象。当然这只是指示，可能为 null。</param>
            <param name="notification">包含待传递至收件人的任意消息的字符串</param>
        </member>
        <member name="P:GalaSoft.MvvmLight.Messaging.NotificationMessage.Notification">
            <summary>获取包含待传递至收件人的任意消息的字符串。</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction">
            <summary>提供带内置回调的消息类。当收件人处理完消息后，其可以执行回调以通知发件人操作完成。使用 <see cref="M:GalaSoft.MvvmLight.Messaging.NotificationMessageAction.Execute" /> 方法执行回调。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageAction.#ctor(System.String,System.Action)">
            <summary>初始化<see cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction" />类的新实例。</summary>
            <param name="notification">消息将携带的任意字符串。</param>
            <param name="callback">收件人可以执行的回调方法，用于通知发件人消息已被处理。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageAction.#ctor(System.Object,System.String,System.Action)">
            <summary>初始化 <see cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction" /> 类的新实例。</summary>
            <param name="sender">消息的发件人。</param>
            <param name="notification">消息将携带的任意字符串。</param>
            <param name="callback">收件人可以执行的回调方法，用于通知发件人消息已被处理。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageAction.#ctor(System.Object,System.Object,System.String,System.Action)">
            <summary>初始化 <see cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction" /> 类的新实例。</summary>
            <param name="sender">消息的发件人。</param>
            <param name="target">消息的预定目标。此参数可用于指示消息的目标对象。当然这只是指示，可能为 null。</param>
            <param name="notification">消息将携带的任意字符串。</param>
            <param name="callback">收件人可以执行的回调方法，用于通知发件人消息已被处理。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageAction.Execute">
            <summary>执行随消息提供的回调。</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction`1">
            <summary>提供带内置回调的消息类。当收件人处理完消息后，其可以执行回调以通知发件人操作完成。使用 <see cref="M:GalaSoft.MvvmLight.Messaging.NotificationMessageAction`1.Execute(`0)" /> 方法执行回调。回调方法具有一个参数。<seealso cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction"/>.</summary>
            <typeparam name="TCallbackParameter">回调方法唯一的参数类型。</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageAction`1.#ctor(System.String,System.Action{`0})">
            <summary>初始化<see cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction`1" />类的新实例。</summary>
            <param name="notification">消息将携带的任意字符串。</param>
            <param name="callback">收件人可以执行的回调方法，用于通知发件人消息已被处理。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageAction`1.#ctor(System.Object,System.String,System.Action{`0})">
            <summary>初始化 <see cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction`1" /> 类的新实例。</summary>
            <param name="sender">消息的发件人。</param>
            <param name="notification">消息将携带的任意字符串。</param>
            <param name="callback">收件人可以执行的回调方法，用于通知发件人消息已被处理。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageAction`1.#ctor(System.Object,System.Object,System.String,System.Action{`0})">
            <summary>初始化 <see cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction`1" /> 类的新实例。</summary>
            <param name="sender">消息的发件人。</param>
            <param name="target">消息的预定目标。此参数可用于指示消息的目标对象。当然这只是指示，可能为 null。</param>
            <param name="notification">消息将携带的任意字符串。</param>
            <param name="callback">收件人可以执行的回调方法，用于通知发件人消息已被处理。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageAction`1.Execute(`0)">
            <summary>执行随消息提供的回调。</summary>
            <param name="parameter">消息发件人请求的参数，提供有关收件人状态的其他信息。</param>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.NotificationMessage`1">
            <summary>将字符串消息（通知）和通用值（内容）传递至收件人。</summary>
            <typeparam name="T">Content 属性的类型。</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessage`1.#ctor(`0,System.String)">
            <summary>初始化 NotificationMessage 类的新实例。</summary>
            <param name="content">待传递至收件人的值。</param>
            <param name="notification">包含待传递至收件人的任意消息的字符串</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessage`1.#ctor(System.Object,`0,System.String)">
            <summary>初始化 NotificationMessage 类的新实例。</summary>
            <param name="sender">消息的发件人。</param>
            <param name="content">待传递至收件人的值。</param>
            <param name="notification">包含待传递至收件人的任意消息的字符串</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessage`1.#ctor(System.Object,System.Object,`0,System.String)">
            <summary>初始化 NotificationMessage 类的新实例。</summary>
            <param name="sender">消息的发件人。</param>
            <param name="target">消息的预定目标。此参数可用于指示消息的目标对象。当然这只是指示，可能为 null。</param>
            <param name="content">待传递至收件人的值。</param>
            <param name="notification">包含待传递至收件人的任意消息的字符串</param>
        </member>
        <member name="P:GalaSoft.MvvmLight.Messaging.NotificationMessage`1.Notification">
            <summary>获取包含待传递至收件人的任意消息的字符串。</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.NotificationMessageWithCallback">
            <summary>提供带内置回调的消息类。当收件人处理完消息后，其可以执行回调以通知发件人操作完成。使用 <see cref="M:GalaSoft.MvvmLight.Messaging.NotificationMessageWithCallback.Execute(System.Object[])" /> 方法执行回调。回调方法具有一个参数。 <seealso cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction"/> 和 <seealso cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction`1"/>.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageWithCallback.#ctor(System.String,System.Delegate)">
            <summary>初始化<see cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageWithCallback" />类的新实例。</summary>
            <param name="notification">消息将携带的任意字符串。</param>
            <param name="callback">收件人可以执行的回调方法，用于通知发件人消息已被处理。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageWithCallback.#ctor(System.Object,System.String,System.Delegate)">
            <summary>初始化 <see cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageWithCallback" /> 类的新实例。</summary>
            <param name="sender">消息的发件人。</param>
            <param name="notification">消息将携带的任意字符串。</param>
            <param name="callback">收件人可以执行的回调方法，用于通知发件人消息已被处理。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageWithCallback.#ctor(System.Object,System.Object,System.String,System.Delegate)">
            <summary>初始化 <see cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageWithCallback" /> 类的新实例。</summary>
            <param name="sender">消息的发件人。</param>
            <param name="target">消息的预定目标。此参数可用于指示消息的目标对象。当然这只是指示，可能为 null。</param>
            <param name="notification">消息将携带的任意字符串。</param>
            <param name="callback">收件人可以执行的回调方法，用于通知发件人消息已被处理。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageWithCallback.Execute(System.Object[])">
            <summary>执行带任意数量参数的消息提供的回调。</summary>
            <param name="arguments">待传递至回调方法的一些参数。</param>
            <returns>通过回调方法返回的对象。</returns>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1">
            <summary>将字符串属性名称 （PropertyName） 和通用值传递（<see cref="P:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1.OldValue" /> 和 <see cref="P:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1.NewValue" />）至收件人。此消息类型可用于使用消息系统将 PropertyChanged 事件传播至收件人。</summary>
            <typeparam name="T">OldValue 和 NewValue 属性的类型。</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1.#ctor(System.Object,`0,`0,System.String)">
            <summary>初始化<see cref="T:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1" />类的新实例。</summary>
            <param name="sender">消息的发件人。</param>
            <param name="oldValue">更改前的属性值。</param>
            <param name="newValue">更改后的属性值。</param>
            <param name="propertyName">已更改的属性的名称。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1.#ctor(`0,`0,System.String)">
            <summary>初始化 <see cref="T:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1" /> 类的新实例。</summary>
            <param name="oldValue">更改前的属性值。</param>
            <param name="newValue">更改后的属性值。</param>
            <param name="propertyName">已更改的属性的名称。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1.#ctor(System.Object,System.Object,`0,`0,System.String)">
            <summary>初始化 <see cref="T:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1" /> 类的新实例。</summary>
            <param name="sender">消息的发件人。</param>
            <param name="target">消息的预定目标。此参数可用于指示消息的目标对象。当然这只是指示，可能为 null。</param>
            <param name="oldValue">更改前的属性值。</param>
            <param name="newValue">更改后的属性值。</param>
            <param name="propertyName">已更改的属性的名称。</param>
        </member>
        <member name="P:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1.NewValue">
            <summary>获取更改后属性的值。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1.OldValue">
            <summary>获取更改前属性的值。</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.PropertyChangedMessageBase">
            <summary>用于基础类的 <see cref="T:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1" /> 类。此类允许收件人注册所有 PropertyChangedMessages，而无需指定类型 T。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.PropertyChangedMessageBase.#ctor(System.Object,System.String)">
            <summary>初始化<see cref="T:GalaSoft.MvvmLight.Messaging.PropertyChangedMessageBase" />类的新实例。</summary>
            <param name="sender">消息的发件人。</param>
            <param name="propertyName">已更改的属性的名称。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.PropertyChangedMessageBase.#ctor(System.Object,System.Object,System.String)">
            <summary>初始化 <see cref="T:GalaSoft.MvvmLight.Messaging.PropertyChangedMessageBase" /> 类的新实例。</summary>
            <param name="sender">消息的发件人。</param>
            <param name="target">消息的预定目标。此参数可用于指示消息的目标对象。当然这只是指示，可能为 null。</param>
            <param name="propertyName">已更改的属性的名称。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.PropertyChangedMessageBase.#ctor(System.String)">
            <summary>初始化 <see cref="T:GalaSoft.MvvmLight.Messaging.PropertyChangedMessageBase" /> 类的新实例。</summary>
            <param name="propertyName">已更改的属性的名称。</param>
        </member>
        <member name="P:GalaSoft.MvvmLight.Messaging.PropertyChangedMessageBase.PropertyName">
            <summary>获取或设置已更改的属性的名称。</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.ObservableObject">
            <summary>属性必须可观察的对象的基类。</summary>
        </member>
        <member name="E:GalaSoft.MvvmLight.ObservableObject.PropertyChanged">
            <summary>在属性值更改后发生。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.ObservableObject.PropertyChangedHandler">
            <summary>提供对派生类的 PropertyChanged 事件处理程序的访问。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.ObservableObject.VerifyPropertyName(System.String)">
            <summary>验证此 ViewModel 中是否存在属性名称。可以在使用该属性前调用此方法，例如在调用 RaisePropertyChanged 前。当属性名称被更改但某些地方被遗漏时，它可以避免错误。</summary>
            <remarks>此方法仅在 DEBUG 模式下有效。</remarks>
            <param name="propertyName">待检查的属性的名称。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.ObservableObject.RaisePropertyChanged(System.String)">
            <summary>引发 PropertyChanged 事件（如需要）。</summary>
            <remarks>如果 propertyName 参数与当前类的现有属性不对应，则仅在 DEBUG 配置中引发异常。</remarks>
            <param name="propertyName">（可选）已更改的属性的名称。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.ObservableObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>引发 PropertyChanged 事件（如需要）。</summary>
            <typeparam name="T">已更改的属性的类型。</typeparam>
            <param name="propertyExpression">标识已更改的属性的表达式。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.ObservableObject.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>从表达式中提取属性的名称。</summary>
            <typeparam name="T">属性的类型。</typeparam>
            <param name="propertyExpression">返回属性名称的表达式。</param>
            <returns>表达式返回的属性的名称。</returns>
            <exception cref="T:System.ArgumentNullException">表达式是否为 null。</exception>
            <exception cref="T:System.ArgumentException">表达式是否不表示属性。</exception>
        </member>
        <member name="M:GalaSoft.MvvmLight.ObservableObject.Set``1(System.Linq.Expressions.Expression{System.Func{``0}},``0@,``0)">
            <summary>为该属性分配一个新值。然后，引发 PropertyChanged 事件（如需要）。</summary>
            <typeparam name="T">已更改的属性的类型。</typeparam>
            <param name="propertyExpression">标识已更改的属性的表达式。</param>
            <param name="field">存储属性值的字段。</param>
            <param name="newValue">更改后的属性值。</param>
            <returns>如果已引发 PropertyChanged 事件，则返回 true，否则返回 false。如果旧值等于新值，则不会引发该事件。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.ObservableObject.Set``1(System.String,``0@,``0)">
            <summary>为该属性分配一个新值。然后，引发 PropertyChanged 事件（如需要）。</summary>
            <typeparam name="T">已更改的属性的类型。</typeparam>
            <param name="propertyName">已更改的属性的名称。</param>
            <param name="field">存储属性值的字段。</param>
            <param name="newValue">更改后的属性值。</param>
            <returns>如果已引发 PropertyChanged 事件，则返回 true，否则返回 false。如果旧值等于新值，则不会引发该事件。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.ObservableObject.Set``1(``0@,``0,System.String)">
            <summary>为该属性分配一个新值。然后，引发 PropertyChanged 事件（如需要）。</summary>
            <typeparam name="T">已更改的属性的类型。</typeparam>
            <param name="field">存储属性值的字段。</param>
            <param name="newValue">更改后的属性值。</param>
            <param name="propertyName">（可选）已更改的属性的名称。</param>
            <returns>如果已引发 PropertyChanged 事件，则返回 true，否则返回 false。如果旧值等于新值，则不会引发该事件。</returns>
        </member>
        <member name="T:GalaSoft.MvvmLight.ViewModelBase">
            <summary>MVVM 模式中 ViewModel 类的基类。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.ViewModelBase.#ctor">
            <summary>初始化 ViewModelBase 类的新实例。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.ViewModelBase.#ctor(GalaSoft.MvvmLight.Messaging.IMessenger)">
            <summary>初始化 ViewModelBase 类的新实例。</summary>
            <param name="messenger"><see cref="T:GalaSoft.MvvmLight.Messaging.Messenger" /> 用于向其他对象广播消息的实例。如果为 null，则此类将尝试使用 Messenger 的默认实例进行广播。</param>
        </member>
        <member name="P:GalaSoft.MvvmLight.ViewModelBase.IsInDesignMode">
            <summary>获取指示控件是否处于设计模式（在 Blend 或 Visual Studio 下运行）的值。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.ViewModelBase.IsInDesignModeStatic">
            <summary>获取指示控件是否处于设计模式（在 Blend 或 Visual Studio 中运行）的值。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.ViewModelBase.MessengerInstance">
            <summary>获取或设置 <see cref="T:GalaSoft.MvvmLight.Messaging.IMessenger" /> 用于向其他对象广播消息的实例。如果为 null，则此类将尝试使用 Messenger 的默认实例进行广播。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.ViewModelBase.Cleanup">
            <summary>从 Messenger 类注销此实例。<para>为了清除其他资源，请覆盖此方法，清除然后调用 base.Cleanup（）。</para></summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.ViewModelBase.Broadcast``1(``0,``0,System.String)">
            <summary>使用传递至此类的 Messenger 实例（如可用）或 Messenger 的默认实例来广播 PropertyChangedMessage。</summary>
            <typeparam name="T">已更改的属性的类型。</typeparam>
            <param name="oldValue">变化前的属性值。</param>
            <param name="newValue">变化后的属性值。</param>
            <param name="propertyName">已更改的属性的名称。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.ViewModelBase.RaisePropertyChanged``1(System.String,``0,``0,System.Boolean)">
            <summary>引发 PropertyChanged 事件（如需要），并使用 Messenger 实例（如果无 Messenger 实例可用，则使用静态默认实例）广播 PropertyChangedMessage。</summary>
            <typeparam name="T">已更改的属性的类型。</typeparam>
            <param name="propertyName">已更改的属性的名称。</param>
            <param name="oldValue">更改前的属性值。</param>
            <param name="newValue">更改后的属性值。</param>
            <param name="broadcast">如果为 true，则将广播 PropertyChangedMessage。如果为 false，则仅引发事件。</param>
            <remarks>如果 propertyName 参数与当前类的现有属性不对应，则仅在 DEBUG 配置中引发异常。</remarks>
        </member>
        <member name="M:GalaSoft.MvvmLight.ViewModelBase.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}},``0,``0,System.Boolean)">
            <summary>引发 PropertyChanged 事件（如需要），并使用 Messenger 实例（如果无 Messenger 实例可用，则使用静态默认实例）广播 PropertyChangedMessage。</summary>
            <typeparam name="T">已更改的属性的类型。</typeparam>
            <param name="propertyExpression">标识已更改的属性的表达式。</param>
            <param name="oldValue">更改前的属性值。</param>
            <param name="newValue">更改后的属性值。</param>
            <param name="broadcast">如果为 true，则将广播 PropertyChangedMessage。如果为 false，则仅引发事件。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.ViewModelBase.Set``1(System.Linq.Expressions.Expression{System.Func{``0}},``0@,``0,System.Boolean)">
            <summary>为该属性分配一个新值。然后，引发 PropertyChanged 事件（如需要），并使用 Messenger 实例（如果无 Messenger 实例可用，则使用静态默认实例）广播 PropertyChangedMessage。</summary>
            <typeparam name="T">已更改的属性的类型。</typeparam>
            <param name="propertyExpression">标识已更改的属性的表达式。</param>
            <param name="field">存储属性值的字段。</param>
            <param name="newValue">更改后的属性值。</param>
            <param name="broadcast">如果为 true，则将广播 PropertyChangedMessage。如果为 false，则仅引发事件。</param>
            <returns>如果引发 PropertyChanged 事件，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.ViewModelBase.Set``1(System.String,``0@,``0,System.Boolean)">
            <summary>为该属性分配一个新值。然后，引发 PropertyChanged 事件（如需要），并使用 Messenger 实例（如果无 Messenger 实例可用，则使用静态默认实例）广播 PropertyChangedMessage。</summary>
            <typeparam name="T">已更改的属性的类型。</typeparam>
            <param name="propertyName">已更改的属性的名称。</param>
            <param name="field">存储属性值的字段。</param>
            <param name="newValue">更改后的属性值。</param>
            <param name="broadcast">如果为 true，则将广播 PropertyChangedMessage。如果为 false，则仅引发事件。</param>
            <returns>如果引发 PropertyChanged 事件，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.ViewModelBase.Set``1(``0@,``0,System.Boolean,System.String)">
            <summary>为该属性分配一个新值。然后，引发 PropertyChanged 事件（如需要），并使用 Messenger 实例（如果无 Messenger 实例可用，则使用静态默认实例）广播 PropertyChangedMessage。</summary>
            <typeparam name="T">已更改的属性的类型。</typeparam>
            <param name="field">存储属性值的字段。</param>
            <param name="newValue">更改后的属性值。</param>
            <param name="broadcast">如果为 true，则将广播 PropertyChangedMessage。如果为 false，则仅引发事件。</param>
            <param name="propertyName">（可选）已更改的属性的名称。</param>
            <returns>如果引发 PropertyChanged 事件，则返回 true，否则返回 false。</returns>
        </member>
        <member name="T:GalaSoft.MvvmLight.Views.IDialogService">
            <summary>定义如何在不同框架（例如：Windows、Windows Phone、Android、iOS 等）中显示对话框的界面。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Views.IDialogService.ShowError(System.String,System.String,System.String,System.Action)">
            <summary>显示有关错误的信息。</summary>
            <param name="message">待向用户显示的消息。</param>
            <param name="title">对话框的标题。可能为 null。</param>
            <param name="buttonText">对话框中唯一按钮显示的文本。如果保留为 null，将使用文本“OK”。</param>
            <param name="afterHideCallback">用户关闭对话框后应执行的回调。</param>
            <returns>允许等待异步方法的任务。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Views.IDialogService.ShowError(System.Exception,System.String,System.String,System.Action)">
            <summary>显示有关错误的信息。</summary>
            <param name="error">必须向用户显示消息的例外情况。</param>
            <param name="title">对话框的标题。可能为 null。</param>
            <param name="buttonText">对话框中唯一按钮显示的文本。如果保留为 null，将使用文本“OK”。</param>
            <param name="afterHideCallback">用户关闭对话框后应执行的回调。</param>
            <returns>允许等待异步方法的任务。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Views.IDialogService.ShowMessage(System.String,System.String)">
            <summary>向用户显示信息。该对话框只有一个按钮，文本为“OK”。</summary>
            <param name="message">待向用户显示的消息。</param>
            <param name="title">对话框的标题。可能为 null。</param>
            <returns>允许等待异步方法的任务。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Views.IDialogService.ShowMessage(System.String,System.String,System.String,System.Action)">
            <summary>向用户显示信息。该对话框只有一个按钮。</summary>
            <param name="message">待向用户显示的消息。</param>
            <param name="title">对话框的标题。可能为 null。</param>
            <param name="buttonText">对话框中唯一按钮显示的文本。如果保留为 null，将使用文本“OK”。</param>
            <param name="afterHideCallback">用户关闭对话框后应执行的回调。</param>
            <returns>允许等待异步方法的任务。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Views.IDialogService.ShowMessage(System.String,System.String,System.String,System.String,System.Action{System.Boolean})">
            <summary>向用户显示信息。该对话框只有一个按钮。</summary>
            <param name="message">待向用户显示的消息。</param>
            <param name="title">对话框的标题。可能为 null。</param>
            <param name="buttonConfirmText">对话框中“确认”按钮中显示的文本。如果保留为 null，将使用文本“OK”。</param>
            <param name="buttonCancelText">对话框中“取消”按钮中显示的文本。如果保留为 null，将使用文本“取消”。</param>
            <param name="afterHideCallback">用户关闭对话框后应执行的回调。回调方法将获得一个布尔参数，指示用户是否按下了“确认”按钮 （true） 或“取消”按钮 （false）。</param>
            <returns>允许等待异步方法的任务。根据对话框结果，任务将返回 true 或 false。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Views.IDialogService.ShowMessageBox(System.String,System.String)">
            <summary>在简单的对话框中向用户显示信息。该对话框只有一个按钮，文本为“OK”。此方法应用于调试目的。</summary>
            <param name="message">待向用户显示的消息。</param>
            <param name="title">对话框的标题。可能为 null。</param>
            <returns>允许等待异步方法的任务。</returns>
        </member>
        <member name="T:GalaSoft.MvvmLight.Views.INavigationService">
            <summary>定义如何在不同框架（例如：Windows、Windows Phone、Android、iOS 等）中执行页面之间导航的界面。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Views.INavigationService.CurrentPageKey">
            <summary>与当前显示的页面对应的键。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Views.INavigationService.GoBack">
            <summary>指示导航服务放弃当前页面并在导航堆栈上显示上一页（如可能）。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Views.INavigationService.NavigateTo(System.String)">
            <summary>指示导航服务显示与给定键对应的新页面。根据平台的不同，导航服务可能必须使用键/页面列表进行配置。</summary>
            <param name="pageKey">与应显示的页面对应的键。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Views.INavigationService.NavigateTo(System.String,System.Object)">
            <summary>指示导航服务显示与给定键对应的新页面，并将参数传递至新页面。根据平台的不同，导航服务可能必须使用键/页面列表进行配置。</summary>
            <param name="pageKey">与应显示的页面对应的键。</param>
            <param name="parameter">应传递至新页面的参数。</param>
        </member>
    </members>
</doc>